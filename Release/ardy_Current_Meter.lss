
ardy_Current_Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f6  00800100  00001d1a  00001dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  008003f6  008003f6  000020a4  2**0
                  ALLOC
  3 .stab         00003bac  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001164  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006e0  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001054  00000000  00000000  00007494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006f3c  00000000  00000000  000084e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ac7  00000000  00000000  0000f424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004650  00000000  00000000  00010eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b80  00000000  00000000  0001553c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001edf  00000000  00000000  000160bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000449e  00000000  00000000  00017f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000680  00000000  00000000  0001c439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//  init_impulse(impulse_array, impulse_num_samples, 255);


}

void init_impulse(int * array, int array_length, int peak_value){
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_18>
      4c:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	65 08       	sbc	r6, r5

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ea e1       	ldi	r30, 0x1A	; 26
      d8:	fd e1       	ldi	r31, 0x1D	; 29
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	a6 3f       	cpi	r26, 0xF6	; 246
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	15 e0       	ldi	r17, 0x05	; 5
      e8:	a6 ef       	ldi	r26, 0xF6	; 246
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	ae 37       	cpi	r26, 0x7E	; 126
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__tablejump__>

00000106 <.do_global_ctors_start>:
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
     10c:	0e 94 28 09 	call	0x1250	; 0x1250 <main>
     110:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z14calculate_tachmP14encoder_struct>:
  	}
  }
  encoder->last_state = encoder->pin_state;
}

void calculate_tach(long unsigned int current_time, encoder_struct* tach_enc){
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8b 01       	movw	r16, r22
     126:	9c 01       	movw	r18, r24
     128:	ea 01       	movw	r28, r20
	if(tach_enc->last_period != 0){
     12a:	4a 89       	ldd	r20, Y+18	; 0x12
     12c:	5b 89       	ldd	r21, Y+19	; 0x13
     12e:	41 15       	cp	r20, r1
     130:	51 05       	cpc	r21, r1
     132:	09 f4       	brne	.+2      	; 0x136 <_Z14calculate_tachmP14encoder_struct+0x1e>
     134:	4b c0       	rjmp	.+150    	; 0x1cc <_Z14calculate_tachmP14encoder_struct+0xb4>
		if((current_time - tach_enc->startTime) > tach_enc->max_period){
     136:	8e 81       	ldd	r24, Y+6	; 0x06
     138:	9f 81       	ldd	r25, Y+7	; 0x07
     13a:	a8 85       	ldd	r26, Y+8	; 0x08
     13c:	b9 85       	ldd	r27, Y+9	; 0x09
     13e:	78 01       	movw	r14, r16
     140:	89 01       	movw	r16, r18
     142:	e8 1a       	sub	r14, r24
     144:	f9 0a       	sbc	r15, r25
     146:	0a 0b       	sbc	r16, r26
     148:	1b 0b       	sbc	r17, r27
     14a:	88 8d       	ldd	r24, Y+24	; 0x18
     14c:	99 8d       	ldd	r25, Y+25	; 0x19
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8e 15       	cp	r24, r14
     154:	9f 05       	cpc	r25, r15
     156:	a0 07       	cpc	r26, r16
     158:	b1 07       	cpc	r27, r17
     15a:	28 f4       	brcc	.+10     	; 0x166 <_Z14calculate_tachmP14encoder_struct+0x4e>
			tach_enc->hertz = 0;
     15c:	1c 86       	std	Y+12, r1	; 0x0c
     15e:	1d 86       	std	Y+13, r1	; 0x0d
     160:	1e 86       	std	Y+14, r1	; 0x0e
     162:	1f 86       	std	Y+15, r1	; 0x0f
     164:	33 c0       	rjmp	.+102    	; 0x1cc <_Z14calculate_tachmP14encoder_struct+0xb4>
		}
		else if((current_time - tach_enc->startTime) > tach_enc->last_period)
     166:	ca 01       	movw	r24, r20
     168:	aa 27       	eor	r26, r26
     16a:	97 fd       	sbrc	r25, 7
     16c:	a0 95       	com	r26
     16e:	ba 2f       	mov	r27, r26
     170:	6c 89       	ldd	r22, Y+20	; 0x14
     172:	7d 89       	ldd	r23, Y+21	; 0x15
     174:	8e 15       	cp	r24, r14
     176:	9f 05       	cpc	r25, r15
     178:	a0 07       	cpc	r26, r16
     17a:	b1 07       	cpc	r27, r17
     17c:	90 f4       	brcc	.+36     	; 0x1a2 <_Z14calculate_tachmP14encoder_struct+0x8a>
			tach_enc->hertz = (1000L*1000L)/((current_time - tach_enc->startTime)*tach_enc->cts_per_rev);
     17e:	9b 01       	movw	r18, r22
     180:	44 27       	eor	r20, r20
     182:	37 fd       	sbrc	r19, 7
     184:	40 95       	com	r20
     186:	54 2f       	mov	r21, r20
     188:	c8 01       	movw	r24, r16
     18a:	b7 01       	movw	r22, r14
     18c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     190:	9b 01       	movw	r18, r22
     192:	ac 01       	movw	r20, r24
     194:	60 e4       	ldi	r22, 0x40	; 64
     196:	72 e4       	ldi	r23, 0x42	; 66
     198:	8f e0       	ldi	r24, 0x0F	; 15
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__udivmodsi4>
     1a0:	11 c0       	rjmp	.+34     	; 0x1c4 <_Z14calculate_tachmP14encoder_struct+0xac>
		else{
			tach_enc->hertz = (1000L*1000L)/(tach_enc->last_period*tach_enc->cts_per_rev);
     1a2:	46 9f       	mul	r20, r22
     1a4:	90 01       	movw	r18, r0
     1a6:	47 9f       	mul	r20, r23
     1a8:	30 0d       	add	r19, r0
     1aa:	56 9f       	mul	r21, r22
     1ac:	30 0d       	add	r19, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	44 27       	eor	r20, r20
     1b2:	37 fd       	sbrc	r19, 7
     1b4:	40 95       	com	r20
     1b6:	54 2f       	mov	r21, r20
     1b8:	60 e4       	ldi	r22, 0x40	; 64
     1ba:	72 e4       	ldi	r23, 0x42	; 66
     1bc:	8f e0       	ldi	r24, 0x0F	; 15
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     1c4:	2c 87       	std	Y+12, r18	; 0x0c
     1c6:	3d 87       	std	Y+13, r19	; 0x0d
     1c8:	4e 87       	std	Y+14, r20	; 0x0e
     1ca:	5f 87       	std	Y+15, r21	; 0x0f
		}
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	08 95       	ret

000001da <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	db 01       	movw	r26, r22
     1e0:	0d 90       	ld	r0, X+
     1e2:	00 20       	and	r0, r0
     1e4:	e9 f7       	brne	.-6      	; 0x1e0 <_ZN5Print5writeEPKc+0x6>
     1e6:	11 97       	sbiw	r26, 0x01	; 1
     1e8:	a6 1b       	sub	r26, r22
     1ea:	b7 0b       	sbc	r27, r23
     1ec:	ec 01       	movw	r28, r24
     1ee:	e8 81       	ld	r30, Y
     1f0:	f9 81       	ldd	r31, Y+1	; 0x01
     1f2:	02 80       	ldd	r0, Z+2	; 0x02
     1f4:	f3 81       	ldd	r31, Z+3	; 0x03
     1f6:	e0 2d       	mov	r30, r0
     1f8:	ad 01       	movw	r20, r26
     1fa:	09 95       	icall
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <_Z17calculate_voltageP18volt_sensor_struct>:
void calculate_current(current_sensor_struct* current_sense){
	current_sense->sense_cts = ((long int)(current_sense->sense_cts*800L) + (long int)((analogRead(CURRENT_PIN)-9)*200L))/1000L;
	current_sense->current = (int)map(current_sense->sense_cts, 0, 1023, -25000, 25000);
}

void calculate_voltage(volt_sensor_struct* volt_sensor){
     202:	8f 92       	push	r8
     204:	9f 92       	push	r9
     206:	af 92       	push	r10
     208:	bf 92       	push	r11
     20a:	cf 92       	push	r12
     20c:	df 92       	push	r13
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	4c 01       	movw	r8, r24
	volt_sensor->sense_cts = ((long int)(volt_sensor->sense_cts*800L) + (long int)((analogRead(VOLT_PIN))*200L))/1000L;
     218:	fc 01       	movw	r30, r24
     21a:	62 81       	ldd	r22, Z+2	; 0x02
     21c:	73 81       	ldd	r23, Z+3	; 0x03
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	20 e2       	ldi	r18, 0x20	; 32
     224:	33 e0       	ldi	r19, 0x03	; 3
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     22e:	7b 01       	movw	r14, r22
     230:	8c 01       	movw	r16, r24
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 c8 09 	call	0x1390	; 0x1390 <analogRead>
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	bc 01       	movw	r22, r24
     242:	cd 01       	movw	r24, r26
     244:	28 ec       	ldi	r18, 0xC8	; 200
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     250:	6e 0d       	add	r22, r14
     252:	7f 1d       	adc	r23, r15
     254:	80 1f       	adc	r24, r16
     256:	91 1f       	adc	r25, r17
     258:	28 ee       	ldi	r18, 0xE8	; 232
     25a:	33 e0       	ldi	r19, 0x03	; 3
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     264:	ca 01       	movw	r24, r20
     266:	f4 01       	movw	r30, r8
     268:	22 83       	std	Z+2, r18	; 0x02
     26a:	33 83       	std	Z+3, r19	; 0x03
     26c:	44 83       	std	Z+4, r20	; 0x04
     26e:	95 83       	std	Z+5, r25	; 0x05
	volt_sensor->voltage = map(volt_sensor->sense_cts, 0, 1023, 0, volt_sensor->max_volts);
     270:	00 d0       	rcall	.+0      	; 0x272 <_Z17calculate_voltageP18volt_sensor_struct+0x70>
     272:	00 d0       	rcall	.+0      	; 0x274 <_Z17calculate_voltageP18volt_sensor_struct+0x72>
     274:	46 81       	ldd	r20, Z+6	; 0x06
     276:	57 81       	ldd	r21, Z+7	; 0x07
     278:	60 85       	ldd	r22, Z+8	; 0x08
     27a:	71 85       	ldd	r23, Z+9	; 0x09
     27c:	ed b7       	in	r30, 0x3d	; 61
     27e:	fe b7       	in	r31, 0x3e	; 62
     280:	41 83       	std	Z+1, r20	; 0x01
     282:	52 83       	std	Z+2, r21	; 0x02
     284:	63 83       	std	Z+3, r22	; 0x03
     286:	74 83       	std	Z+4, r23	; 0x04
     288:	b9 01       	movw	r22, r18
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	ef ef       	ldi	r30, 0xFF	; 255
     294:	ee 2e       	mov	r14, r30
     296:	e3 e0       	ldi	r30, 0x03	; 3
     298:	fe 2e       	mov	r15, r30
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	aa 24       	eor	r10, r10
     2a0:	bb 24       	eor	r11, r11
     2a2:	65 01       	movw	r12, r10
     2a4:	0e 94 df 08 	call	0x11be	; 0x11be <_Z3maplllll>
     2a8:	f4 01       	movw	r30, r8
     2aa:	62 87       	std	Z+10, r22	; 0x0a
     2ac:	73 87       	std	Z+11, r23	; 0x0b
     2ae:	84 87       	std	Z+12, r24	; 0x0c
     2b0:	95 87       	std	Z+13, r25	; 0x0d
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
}
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	08 95       	ret

000002d0 <_Z17calculate_currentP21current_sensor_struct>:
			tach_enc->hertz = (1000L*1000L)/(tach_enc->last_period*tach_enc->cts_per_rev);
		}
	}
}

void calculate_current(current_sensor_struct* current_sense){
     2d0:	8f 92       	push	r8
     2d2:	9f 92       	push	r9
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	4c 01       	movw	r8, r24
	current_sense->sense_cts = ((long int)(current_sense->sense_cts*800L) + (long int)((analogRead(CURRENT_PIN)-9)*200L))/1000L;
     2e6:	83 e0       	ldi	r24, 0x03	; 3
     2e8:	0e 94 c8 09 	call	0x1390	; 0x1390 <analogRead>
     2ec:	5c 01       	movw	r10, r24
     2ee:	d4 01       	movw	r26, r8
     2f0:	14 96       	adiw	r26, 0x04	; 4
     2f2:	6d 91       	ld	r22, X+
     2f4:	7d 91       	ld	r23, X+
     2f6:	8d 91       	ld	r24, X+
     2f8:	9c 91       	ld	r25, X
     2fa:	17 97       	sbiw	r26, 0x07	; 7
     2fc:	20 e2       	ldi	r18, 0x20	; 32
     2fe:	33 e0       	ldi	r19, 0x03	; 3
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     308:	7b 01       	movw	r14, r22
     30a:	8c 01       	movw	r16, r24
     30c:	88 ef       	ldi	r24, 0xF8	; 248
     30e:	98 ef       	ldi	r25, 0xF8	; 248
     310:	af ef       	ldi	r26, 0xFF	; 255
     312:	bf ef       	ldi	r27, 0xFF	; 255
     314:	e8 0e       	add	r14, r24
     316:	f9 1e       	adc	r15, r25
     318:	0a 1f       	adc	r16, r26
     31a:	1b 1f       	adc	r17, r27
     31c:	cc 24       	eor	r12, r12
     31e:	b7 fc       	sbrc	r11, 7
     320:	c0 94       	com	r12
     322:	dc 2c       	mov	r13, r12
     324:	c6 01       	movw	r24, r12
     326:	b5 01       	movw	r22, r10
     328:	28 ec       	ldi	r18, 0xC8	; 200
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     334:	e6 0e       	add	r14, r22
     336:	f7 1e       	adc	r15, r23
     338:	08 1f       	adc	r16, r24
     33a:	19 1f       	adc	r17, r25
     33c:	c8 01       	movw	r24, r16
     33e:	b7 01       	movw	r22, r14
     340:	28 ee       	ldi	r18, 0xE8	; 232
     342:	33 e0       	ldi	r19, 0x03	; 3
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     34c:	ca 01       	movw	r24, r20
     34e:	d4 01       	movw	r26, r8
     350:	14 96       	adiw	r26, 0x04	; 4
     352:	2c 93       	st	X, r18
     354:	14 97       	sbiw	r26, 0x04	; 4
     356:	15 96       	adiw	r26, 0x05	; 5
     358:	3c 93       	st	X, r19
     35a:	15 97       	sbiw	r26, 0x05	; 5
     35c:	16 96       	adiw	r26, 0x06	; 6
     35e:	4c 93       	st	X, r20
     360:	16 97       	sbiw	r26, 0x06	; 6
     362:	17 96       	adiw	r26, 0x07	; 7
     364:	9c 93       	st	X, r25
	current_sense->current = (int)map(current_sense->sense_cts, 0, 1023, -25000, 25000);
     366:	00 d0       	rcall	.+0      	; 0x368 <_Z17calculate_currentP21current_sensor_struct+0x98>
     368:	00 d0       	rcall	.+0      	; 0x36a <_Z17calculate_currentP21current_sensor_struct+0x9a>
     36a:	48 ea       	ldi	r20, 0xA8	; 168
     36c:	51 e6       	ldi	r21, 0x61	; 97
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	ed b7       	in	r30, 0x3d	; 61
     374:	fe b7       	in	r31, 0x3e	; 62
     376:	41 83       	std	Z+1, r20	; 0x01
     378:	52 83       	std	Z+2, r21	; 0x02
     37a:	63 83       	std	Z+3, r22	; 0x03
     37c:	74 83       	std	Z+4, r23	; 0x04
     37e:	b9 01       	movw	r22, r18
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	af ef       	ldi	r26, 0xFF	; 255
     38a:	ea 2e       	mov	r14, r26
     38c:	a3 e0       	ldi	r26, 0x03	; 3
     38e:	fa 2e       	mov	r15, r26
     390:	01 2d       	mov	r16, r1
     392:	11 2d       	mov	r17, r1
     394:	f8 e5       	ldi	r31, 0x58	; 88
     396:	af 2e       	mov	r10, r31
     398:	fe e9       	ldi	r31, 0x9E	; 158
     39a:	bf 2e       	mov	r11, r31
     39c:	ff ef       	ldi	r31, 0xFF	; 255
     39e:	cf 2e       	mov	r12, r31
     3a0:	ff ef       	ldi	r31, 0xFF	; 255
     3a2:	df 2e       	mov	r13, r31
     3a4:	0e 94 df 08 	call	0x11be	; 0x11be <_Z3maplllll>
     3a8:	d4 01       	movw	r26, r8
     3aa:	1f 96       	adiw	r26, 0x0f	; 15
     3ac:	7c 93       	st	X, r23
     3ae:	6e 93       	st	-X, r22
     3b0:	1e 97       	sbiw	r26, 0x0e	; 14
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	08 95       	ret

000003d0 <_Z12poll_encodermP14encoder_struct>:
//    	}
//    }
//
//}

void poll_encoder(long unsigned int current_time, encoder_struct* encoder){
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	7b 01       	movw	r14, r22
     3de:	8c 01       	movw	r16, r24
     3e0:	ea 01       	movw	r28, r20
  if(!digitalRead(encoder->pin_num)){
     3e2:	88 89       	ldd	r24, Y+16	; 0x10
     3e4:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <digitalRead>
     3e8:	28 81       	ld	r18, Y
     3ea:	39 81       	ldd	r19, Y+1	; 0x01
     3ec:	89 2b       	or	r24, r25
     3ee:	69 f4       	brne	.+26     	; 0x40a <_Z12poll_encodermP14encoder_struct+0x3a>
    if(encoder->debounce_cnt < encoder->debounce_min)
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	9b 81       	ldd	r25, Y+3	; 0x03
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	1c f4       	brge	.+6      	; 0x400 <_Z12poll_encodermP14encoder_struct+0x30>
    	encoder->debounce_cnt++;
     3fa:	2f 5f       	subi	r18, 0xFF	; 255
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <_Z12poll_encodermP14encoder_struct+0x44>
    else{ // debounce count is equal to or greater than minimum
    	encoder->pin_state = HIGH;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	9d 83       	std	Y+5, r25	; 0x05
     406:	8c 83       	std	Y+4, r24	; 0x04
     408:	0a c0       	rjmp	.+20     	; 0x41e <_Z12poll_encodermP14encoder_struct+0x4e>
    }
  }
  else{
    if(encoder->debounce_cnt > 0)
     40a:	12 16       	cp	r1, r18
     40c:	13 06       	cpc	r1, r19
     40e:	2c f4       	brge	.+10     	; 0x41a <_Z12poll_encodermP14encoder_struct+0x4a>
    	encoder->debounce_cnt--;
     410:	21 50       	subi	r18, 0x01	; 1
     412:	30 40       	sbci	r19, 0x00	; 0
     414:	39 83       	std	Y+1, r19	; 0x01
     416:	28 83       	st	Y, r18
     418:	02 c0       	rjmp	.+4      	; 0x41e <_Z12poll_encodermP14encoder_struct+0x4e>
    else{ // debounce count is at zero
    	encoder->pin_state = LOW;
     41a:	1d 82       	std	Y+5, r1	; 0x05
     41c:	1c 82       	std	Y+4, r1	; 0x04
    }
  }

  if (encoder->last_state != encoder->pin_state){
     41e:	6c 81       	ldd	r22, Y+4	; 0x04
     420:	7d 81       	ldd	r23, Y+5	; 0x05
     422:	8e 89       	ldd	r24, Y+22	; 0x16
     424:	9f 89       	ldd	r25, Y+23	; 0x17
     426:	86 17       	cp	r24, r22
     428:	97 07       	cpc	r25, r23
     42a:	91 f0       	breq	.+36     	; 0x450 <_Z12poll_encodermP14encoder_struct+0x80>
  	digitalWrite(LED_PIN, encoder->pin_state);
     42c:	8d e0       	ldi	r24, 0x0D	; 13
     42e:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
  	if(encoder->pin_state == LOW){ // detect falling edge
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	89 2b       	or	r24, r25
     438:	59 f4       	brne	.+22     	; 0x450 <_Z12poll_encodermP14encoder_struct+0x80>
//    		tach_enc->last_period = (tach_enc->alpha*(current_time - tach_enc->startTime)
//    				+ (1000L - tach_enc->alpha)*tach_enc->last_period)/1000;
  		encoder->last_period = (current_time - encoder->startTime);
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	97 01       	movw	r18, r14
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	3b 8b       	std	Y+19, r19	; 0x13
     446:	2a 8b       	std	Y+18, r18	; 0x12
  		encoder->startTime = current_time;
     448:	ee 82       	std	Y+6, r14	; 0x06
     44a:	ff 82       	std	Y+7, r15	; 0x07
     44c:	08 87       	std	Y+8, r16	; 0x08
     44e:	19 87       	std	Y+9, r17	; 0x09
  	}
  }
  encoder->last_state = encoder->pin_state;
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	9d 81       	ldd	r25, Y+5	; 0x05
     454:	9f 8b       	std	Y+23, r25	; 0x17
     456:	8e 8b       	std	Y+22, r24	; 0x16
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	08 95       	ret

00000466 <_Z8LcdWritehh>:
  {
    LcdCharacter(*characters++);
  }
}

void LcdWrite(byte dc, byte data)
     466:	1f 93       	push	r17
     468:	98 2f       	mov	r25, r24
     46a:	16 2f       	mov	r17, r22
{
  digitalWrite(PIN_DC, dc);
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	69 2f       	mov	r22, r25
     470:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
  digitalWrite(PIN_SCE, LOW);
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
     47c:	87 e0       	ldi	r24, 0x07	; 7
     47e:	68 e0       	ldi	r22, 0x08	; 8
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	21 2f       	mov	r18, r17
     484:	0e 94 b7 0a 	call	0x156e	; 0x156e <shiftOut>
  digitalWrite(PIN_SCE, HIGH);
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
}
     490:	1f 91       	pop	r17
     492:	08 95       	ret

00000494 <_Z6gotoXYii>:

void gotoXY(int x, int y) {
     494:	1f 93       	push	r17
     496:	16 2f       	mov	r17, r22
  LcdWrite(0, 0x80 | x);  // Column.
     498:	68 2f       	mov	r22, r24
     49a:	60 68       	ori	r22, 0x80	; 128
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(0, 0x40 | y);  // Row.  ?
     4a2:	10 64       	ori	r17, 0x40	; 64
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	61 2f       	mov	r22, r17
     4a8:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
}
     4ac:	1f 91       	pop	r17
     4ae:	08 95       	ret

000004b0 <_Z13LcdInitializev>:
  }
}

void LcdInitialize(void)
{
  pinMode(PIN_SCE, OUTPUT);
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(PIN_RESET, OUTPUT);
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(PIN_DC, OUTPUT);
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(PIN_SDIN, OUTPUT);
     4c8:	87 e0       	ldi	r24, 0x07	; 7
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(PIN_SCLK, OUTPUT);
     4d0:	88 e0       	ldi	r24, 0x08	; 8
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  digitalWrite(PIN_RESET, LOW);
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
  digitalWrite(PIN_RESET, HIGH);
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	61 e2       	ldi	r22, 0x21	; 33
     4ec:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast).
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	61 eb       	ldi	r22, 0xB1	; 177
     4f4:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	64 e0       	ldi	r22, 0x04	; 4
     4fc:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	64 e1       	ldi	r22, 0x14	; 20
     504:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	6c e0       	ldi	r22, 0x0C	; 12
     50c:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x20 );
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	60 e2       	ldi	r22, 0x20	; 32
     514:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x0C );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	6c e0       	ldi	r22, 0x0C	; 12
     51c:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
}
     520:	08 95       	ret

00000522 <_Z8LcdClearv>:
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void)
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	c0 e0       	ldi	r28, 0x00	; 0
     528:	d0 e0       	ldi	r29, 0x00	; 0
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void)
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	c8 3f       	cpi	r28, 0xF8	; 248
     538:	d8 07       	cpc	r29, r24
     53a:	b9 f7       	brne	.-18     	; 0x52a <_Z8LcdClearv+0x8>
  {
    LcdWrite(LCD_D, 0x00);
  }
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <_Z12LcdCharacterc>:

encoder_struct tach_enc;
current_sensor_struct current_sensor;
volt_sensor_struct volt_sensor;

void LcdCharacter(char character)
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	18 2f       	mov	r17, r24
{
  LcdWrite(LCD_D, 0x00);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
     554:	81 2f       	mov	r24, r17
     556:	99 27       	eor	r25, r25
     558:	87 fd       	sbrc	r24, 7
     55a:	90 95       	com	r25
     55c:	80 97       	sbiw	r24, 0x20	; 32
     55e:	ec 01       	movw	r28, r24
     560:	cc 0f       	add	r28, r28
     562:	dd 1f       	adc	r29, r29
     564:	cc 0f       	add	r28, r28
     566:	dd 1f       	adc	r29, r29
     568:	c8 0f       	add	r28, r24
     56a:	d9 1f       	adc	r29, r25
     56c:	cb 5f       	subi	r28, 0xFB	; 251
     56e:	dd 4f       	sbci	r29, 0xFD	; 253
  for (int index = 0; index < 5; index++)
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	18 02       	muls	r17, r24
     574:	80 01       	movw	r16, r0
     576:	11 24       	eor	r1, r1
     578:	06 59       	subi	r16, 0x96	; 150
     57a:	1e 4f       	sbci	r17, 0xFE	; 254
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	69 91       	ld	r22, Y+
     580:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
volt_sensor_struct volt_sensor;

void LcdCharacter(char character)
{
  LcdWrite(LCD_D, 0x00);
  for (int index = 0; index < 5; index++)
     584:	c0 17       	cp	r28, r16
     586:	d1 07       	cpc	r29, r17
     588:	c9 f7       	brne	.-14     	; 0x57c <_Z12LcdCharacterc+0x3a>
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <_Z9LcdStringPc>:
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
  LcdWrite(LCD_C, 0x20 );
  LcdWrite(LCD_C, 0x0C );
}

void LcdString(char *characters)
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <_Z9LcdStringPc+0xe>
{
  while (*characters)
  {
    LcdCharacter(*characters++);
     5a4:	21 96       	adiw	r28, 0x01	; 1
     5a6:	0e 94 a1 02 	call	0x542	; 0x542 <_Z12LcdCharacterc>
  LcdWrite(LCD_C, 0x0C );
}

void LcdString(char *characters)
{
  while (*characters)
     5aa:	88 81       	ld	r24, Y
     5ac:	88 23       	and	r24, r24
     5ae:	d1 f7       	brne	.-12     	; 0x5a4 <_Z9LcdStringPc+0x8>
  {
    LcdCharacter(*characters++);
  }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <loop>:
void calculate_voltage(volt_sensor_struct* volt_sensor){
	volt_sensor->sense_cts = ((long int)(volt_sensor->sense_cts*800L) + (long int)((analogRead(VOLT_PIN))*200L))/1000L;
	volt_sensor->voltage = map(volt_sensor->sense_cts, 0, 1023, 0, volt_sensor->max_volts);
}

void loop() {
     5b6:	2f 92       	push	r2
     5b8:	3f 92       	push	r3
     5ba:	4f 92       	push	r4
     5bc:	5f 92       	push	r5
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
	long unsigned int current_time = millis();
     5da:	0e 94 7f 09 	call	0x12fe	; 0x12fe <millis>
     5de:	1b 01       	movw	r2, r22
     5e0:	2c 01       	movw	r4, r24
  if(current_time >= sample_clock){
     5e2:	80 91 02 04 	lds	r24, 0x0402
     5e6:	90 91 03 04 	lds	r25, 0x0403
     5ea:	a0 91 04 04 	lds	r26, 0x0404
     5ee:	b0 91 05 04 	lds	r27, 0x0405
     5f2:	28 16       	cp	r2, r24
     5f4:	39 06       	cpc	r3, r25
     5f6:	4a 06       	cpc	r4, r26
     5f8:	5b 06       	cpc	r5, r27
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <loop+0x48>
     5fc:	04 c3       	rjmp	.+1544   	; 0xc06 <__stack+0x307>
  	// reset sampling clock
  	sample_clock += SAMPLE_PERIOD;
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	a1 1d       	adc	r26, r1
     602:	b1 1d       	adc	r27, r1
     604:	80 93 02 04 	sts	0x0402, r24
     608:	90 93 03 04 	sts	0x0403, r25
     60c:	a0 93 04 04 	sts	0x0404, r26
     610:	b0 93 05 04 	sts	0x0405, r27

    // step through impulse routine
//    step_pulser(current_time, &pulser);

    // poll the tachometer encoder
    poll_encoder(current_time, &tach_enc);
     614:	c2 01       	movw	r24, r4
     616:	b1 01       	movw	r22, r2
     618:	42 e9       	ldi	r20, 0x92	; 146
     61a:	54 e0       	ldi	r21, 0x04	; 4
     61c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z12poll_encodermP14encoder_struct>

		if(current_time >= calc_tach_clock){
     620:	80 91 fe 03 	lds	r24, 0x03FE
     624:	90 91 ff 03 	lds	r25, 0x03FF
     628:	a0 91 00 04 	lds	r26, 0x0400
     62c:	b0 91 01 04 	lds	r27, 0x0401
     630:	28 16       	cp	r2, r24
     632:	39 06       	cpc	r3, r25
     634:	4a 06       	cpc	r4, r26
     636:	5b 06       	cpc	r5, r27
     638:	10 f1       	brcs	.+68     	; 0x67e <loop+0xc8>
			calc_tach_clock = current_time + calc_tach_period;
     63a:	80 91 fc 01 	lds	r24, 0x01FC
     63e:	90 91 fd 01 	lds	r25, 0x01FD
     642:	aa 27       	eor	r26, r26
     644:	97 fd       	sbrc	r25, 7
     646:	a0 95       	com	r26
     648:	ba 2f       	mov	r27, r26
     64a:	82 0d       	add	r24, r2
     64c:	93 1d       	adc	r25, r3
     64e:	a4 1d       	adc	r26, r4
     650:	b5 1d       	adc	r27, r5
     652:	80 93 fe 03 	sts	0x03FE, r24
     656:	90 93 ff 03 	sts	0x03FF, r25
     65a:	a0 93 00 04 	sts	0x0400, r26
     65e:	b0 93 01 04 	sts	0x0401, r27
			calculate_tach(current_time, &tach_enc);
     662:	c2 01       	movw	r24, r4
     664:	b1 01       	movw	r22, r2
     666:	42 e9       	ldi	r20, 0x92	; 146
     668:	54 e0       	ldi	r21, 0x04	; 4
     66a:	0e 94 8c 00 	call	0x118	; 0x118 <_Z14calculate_tachmP14encoder_struct>
			calculate_current(&current_sensor);
     66e:	80 eb       	ldi	r24, 0xB0	; 176
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z17calculate_currentP21current_sensor_struct>
			calculate_voltage(&volt_sensor);
     676:	80 ec       	ldi	r24, 0xC0	; 192
     678:	94 e0       	ldi	r25, 0x04	; 4
     67a:	0e 94 01 01 	call	0x202	; 0x202 <_Z17calculate_voltageP18volt_sensor_struct>
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }

		if(current_time >= toggle_display_clock){
     67e:	80 91 0e 04 	lds	r24, 0x040E
     682:	90 91 0f 04 	lds	r25, 0x040F
     686:	a0 91 10 04 	lds	r26, 0x0410
     68a:	b0 91 11 04 	lds	r27, 0x0411
     68e:	28 16       	cp	r2, r24
     690:	39 06       	cpc	r3, r25
     692:	4a 06       	cpc	r4, r26
     694:	5b 06       	cpc	r5, r27
     696:	c0 f1       	brcs	.+112    	; 0x708 <loop+0x152>
			toggle_display_clock = current_time + toggle_display_period;
     698:	80 91 00 02 	lds	r24, 0x0200
     69c:	90 91 01 02 	lds	r25, 0x0201
     6a0:	aa 27       	eor	r26, r26
     6a2:	97 fd       	sbrc	r25, 7
     6a4:	a0 95       	com	r26
     6a6:	ba 2f       	mov	r27, r26
     6a8:	82 0d       	add	r24, r2
     6aa:	93 1d       	adc	r25, r3
     6ac:	a4 1d       	adc	r26, r4
     6ae:	b5 1d       	adc	r27, r5
     6b0:	80 93 0e 04 	sts	0x040E, r24
     6b4:	90 93 0f 04 	sts	0x040F, r25
     6b8:	a0 93 10 04 	sts	0x0410, r26
     6bc:	b0 93 11 04 	sts	0x0411, r27
			toggle_display = !toggle_display;
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	80 91 02 02 	lds	r24, 0x0202
     6c8:	90 91 03 02 	lds	r25, 0x0203
     6cc:	89 2b       	or	r24, r25
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <loop+0x11e>
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	30 93 03 02 	sts	0x0203, r19
     6d8:	20 93 02 02 	sts	0x0202, r18
		  gotoXY(0,2);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	62 e0       	ldi	r22, 0x02	; 2
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  if(toggle_display == SHOW_RPM)
     6e8:	80 91 02 02 	lds	r24, 0x0202
     6ec:	90 91 03 02 	lds	r25, 0x0203
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	91 05       	cpc	r25, r1
     6f4:	19 f4       	brne	.+6      	; 0x6fc <loop+0x146>
		  	LcdString((char*)"Speed:");
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <loop+0x14e>
		  else if(toggle_display == SHOW_WATTS)
     6fc:	89 2b       	or	r24, r25
     6fe:	21 f4       	brne	.+8      	; 0x708 <loop+0x152>
		  	LcdString((char*)"Power:");
     700:	87 e0       	ldi	r24, 0x07	; 7
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		}

		if(current_time >= update_display_clock){
     708:	80 91 06 04 	lds	r24, 0x0406
     70c:	90 91 07 04 	lds	r25, 0x0407
     710:	a0 91 08 04 	lds	r26, 0x0408
     714:	b0 91 09 04 	lds	r27, 0x0409
     718:	28 16       	cp	r2, r24
     71a:	39 06       	cpc	r3, r25
     71c:	4a 06       	cpc	r4, r26
     71e:	5b 06       	cpc	r5, r27
     720:	08 f4       	brcc	.+2      	; 0x724 <loop+0x16e>
     722:	97 c1       	rjmp	.+814    	; 0xa52 <__stack+0x153>

			update_display_clock = current_time + update_display_period;
     724:	80 91 fa 01 	lds	r24, 0x01FA
     728:	90 91 fb 01 	lds	r25, 0x01FB
     72c:	aa 27       	eor	r26, r26
     72e:	97 fd       	sbrc	r25, 7
     730:	a0 95       	com	r26
     732:	ba 2f       	mov	r27, r26
     734:	82 0d       	add	r24, r2
     736:	93 1d       	adc	r25, r3
     738:	a4 1d       	adc	r26, r4
     73a:	b5 1d       	adc	r27, r5
     73c:	80 93 06 04 	sts	0x0406, r24
     740:	90 93 07 04 	sts	0x0407, r25
     744:	a0 93 08 04 	sts	0x0408, r26
     748:	b0 93 09 04 	sts	0x0409, r27
		  snprintf(outputbuffer, 11,"%d.%02d Amps", (current_sensor.current)/1000,
		  		((abs(current_sensor.current) % 1000) / 10));
     74c:	40 91 be 04 	lds	r20, 0x04BE
     750:	e0 91 bf 04 	lds	r30, 0x04BF
     754:	8d b7       	in	r24, 0x3d	; 61
     756:	9e b7       	in	r25, 0x3e	; 62
     758:	0a 97       	sbiw	r24, 0x0a	; 10
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	9e bf       	out	0x3e, r25	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	8d bf       	out	0x3d, r24	; 61
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	21 96       	adiw	r28, 0x01	; 1
     76a:	82 e1       	ldi	r24, 0x12	; 18
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	ad b7       	in	r26, 0x3d	; 61
     770:	be b7       	in	r27, 0x3e	; 62
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	9c 93       	st	X, r25
     776:	8e 93       	st	-X, r24
     778:	11 97       	sbiw	r26, 0x01	; 1
     77a:	8b e0       	ldi	r24, 0x0B	; 11
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9b 83       	std	Y+3, r25	; 0x03
     780:	8a 83       	std	Y+2, r24	; 0x02
     782:	8e e0       	ldi	r24, 0x0E	; 14
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	9d 83       	std	Y+5, r25	; 0x05
     788:	8c 83       	std	Y+4, r24	; 0x04
     78a:	84 2f       	mov	r24, r20
     78c:	9e 2f       	mov	r25, r30
     78e:	68 ee       	ldi	r22, 0xE8	; 232
     790:	73 e0       	ldi	r23, 0x03	; 3
     792:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodhi4>
     796:	7f 83       	std	Y+7, r23	; 0x07
     798:	6e 83       	std	Y+6, r22	; 0x06
     79a:	24 2f       	mov	r18, r20
     79c:	3e 2f       	mov	r19, r30
     79e:	c9 01       	movw	r24, r18
     7a0:	97 ff       	sbrs	r25, 7
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <loop+0x1f4>
     7a4:	90 95       	com	r25
     7a6:	81 95       	neg	r24
     7a8:	9f 4f       	sbci	r25, 0xFF	; 255
     7aa:	68 ee       	ldi	r22, 0xE8	; 232
     7ac:	73 e0       	ldi	r23, 0x03	; 3
     7ae:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodhi4>
     7b2:	6a e0       	ldi	r22, 0x0A	; 10
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodhi4>
     7ba:	79 87       	std	Y+9, r23	; 0x09
     7bc:	68 87       	std	Y+8, r22	; 0x08
     7be:	0e 94 82 0b 	call	0x1704	; 0x1704 <snprintf>

		  gotoXY(6,1);
     7c2:	ed b7       	in	r30, 0x3d	; 61
     7c4:	fe b7       	in	r31, 0x3e	; 62
     7c6:	3a 96       	adiw	r30, 0x0a	; 10
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	fe bf       	out	0x3e, r31	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	ed bf       	out	0x3d, r30	; 61
     7d2:	86 e0       	ldi	r24, 0x06	; 6
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString((char*)"           ");
     7de:	8b e1       	ldi	r24, 0x1B	; 27
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		  gotoXY(6,1);
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString(outputbuffer);
     7f2:	c2 e1       	ldi	r28, 0x12	; 18
     7f4:	d4 e0       	ldi	r29, 0x04	; 4
     7f6:	ce 01       	movw	r24, r28
     7f8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>


		  if(toggle_display == SHOW_RPM){
     7fc:	80 91 02 02 	lds	r24, 0x0202
     800:	90 91 03 02 	lds	r25, 0x0203
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	91 05       	cpc	r25, r1
     808:	e9 f5       	brne	.+122    	; 0x884 <loop+0x2ce>
			  snprintf(outputbuffer,11,"%ld.%01ld RPM", (60*tach_enc.hertz)/1000, ((60*tach_enc.hertz)%1000) / 100);
     80a:	60 91 9e 04 	lds	r22, 0x049E
     80e:	70 91 9f 04 	lds	r23, 0x049F
     812:	80 91 a0 04 	lds	r24, 0x04A0
     816:	90 91 a1 04 	lds	r25, 0x04A1
     81a:	2c e3       	ldi	r18, 0x3C	; 60
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     826:	6b 01       	movw	r12, r22
     828:	7c 01       	movw	r14, r24
     82a:	8d b7       	in	r24, 0x3d	; 61
     82c:	9e b7       	in	r25, 0x3e	; 62
     82e:	0e 97       	sbiw	r24, 0x0e	; 14
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	9e bf       	out	0x3e, r25	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	8d bf       	out	0x3d, r24	; 61
     83a:	0d b7       	in	r16, 0x3d	; 61
     83c:	1e b7       	in	r17, 0x3e	; 62
     83e:	0f 5f       	subi	r16, 0xFF	; 255
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	ad b7       	in	r26, 0x3d	; 61
     844:	be b7       	in	r27, 0x3e	; 62
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	dc 93       	st	X, r29
     84a:	ce 93       	st	-X, r28
     84c:	11 97       	sbiw	r26, 0x01	; 1
     84e:	8b e0       	ldi	r24, 0x0B	; 11
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	f8 01       	movw	r30, r16
     854:	93 83       	std	Z+3, r25	; 0x03
     856:	82 83       	std	Z+2, r24	; 0x02
     858:	87 e2       	ldi	r24, 0x27	; 39
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	95 83       	std	Z+5, r25	; 0x05
     85e:	84 83       	std	Z+4, r24	; 0x04
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	28 ee       	ldi	r18, 0xE8	; 232
     866:	33 e0       	ldi	r19, 0x03	; 3
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     870:	d8 01       	movw	r26, r16
     872:	16 96       	adiw	r26, 0x06	; 6
     874:	2d 93       	st	X+, r18
     876:	3d 93       	st	X+, r19
     878:	4d 93       	st	X+, r20
     87a:	5c 93       	st	X, r21
     87c:	19 97       	sbiw	r26, 0x09	; 9
     87e:	c7 01       	movw	r24, r14
     880:	b6 01       	movw	r22, r12
     882:	55 c0       	rjmp	.+170    	; 0x92e <__stack+0x2f>
		  }

		  else if(toggle_display == SHOW_WATTS){
     884:	89 2b       	or	r24, r25
     886:	09 f0       	breq	.+2      	; 0x88a <loop+0x2d4>
     888:	6d c0       	rjmp	.+218    	; 0x964 <__stack+0x65>
		  	watts = (current_sensor.current * volt_sensor.voltage) / 1000;
     88a:	60 91 be 04 	lds	r22, 0x04BE
     88e:	70 91 bf 04 	lds	r23, 0x04BF
     892:	88 27       	eor	r24, r24
     894:	77 fd       	sbrc	r23, 7
     896:	80 95       	com	r24
     898:	98 2f       	mov	r25, r24
     89a:	20 91 ca 04 	lds	r18, 0x04CA
     89e:	30 91 cb 04 	lds	r19, 0x04CB
     8a2:	40 91 cc 04 	lds	r20, 0x04CC
     8a6:	50 91 cd 04 	lds	r21, 0x04CD
     8aa:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     8ae:	28 ee       	ldi	r18, 0xE8	; 232
     8b0:	33 e0       	ldi	r19, 0x03	; 3
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     8ba:	f2 2e       	mov	r15, r18
     8bc:	e3 2e       	mov	r14, r19
     8be:	d4 2e       	mov	r13, r20
     8c0:	c5 2e       	mov	r12, r21
     8c2:	20 93 f6 03 	sts	0x03F6, r18
     8c6:	30 93 f7 03 	sts	0x03F7, r19
     8ca:	40 93 f8 03 	sts	0x03F8, r20
     8ce:	50 93 f9 03 	sts	0x03F9, r21
			  snprintf(outputbuffer,11,"%ld.%01ld Watts", watts/1000, (watts%1000) / 100);
     8d2:	ad b7       	in	r26, 0x3d	; 61
     8d4:	be b7       	in	r27, 0x3e	; 62
     8d6:	1e 97       	sbiw	r26, 0x0e	; 14
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	be bf       	out	0x3e, r27	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	ad bf       	out	0x3d, r26	; 61
     8e2:	0d b7       	in	r16, 0x3d	; 61
     8e4:	1e b7       	in	r17, 0x3e	; 62
     8e6:	0f 5f       	subi	r16, 0xFF	; 255
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	dc 93       	st	X, r29
     8ee:	ce 93       	st	-X, r28
     8f0:	11 97       	sbiw	r26, 0x01	; 1
     8f2:	8b e0       	ldi	r24, 0x0B	; 11
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	f8 01       	movw	r30, r16
     8f8:	93 83       	std	Z+3, r25	; 0x03
     8fa:	82 83       	std	Z+2, r24	; 0x02
     8fc:	85 e3       	ldi	r24, 0x35	; 53
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	95 83       	std	Z+5, r25	; 0x05
     902:	84 83       	std	Z+4, r24	; 0x04
     904:	62 2f       	mov	r22, r18
     906:	73 2f       	mov	r23, r19
     908:	84 2f       	mov	r24, r20
     90a:	95 2f       	mov	r25, r21
     90c:	28 ee       	ldi	r18, 0xE8	; 232
     90e:	33 e0       	ldi	r19, 0x03	; 3
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     918:	d8 01       	movw	r26, r16
     91a:	16 96       	adiw	r26, 0x06	; 6
     91c:	2d 93       	st	X+, r18
     91e:	3d 93       	st	X+, r19
     920:	4d 93       	st	X+, r20
     922:	5c 93       	st	X, r21
     924:	19 97       	sbiw	r26, 0x09	; 9
     926:	6f 2d       	mov	r22, r15
     928:	7e 2d       	mov	r23, r14
     92a:	8d 2d       	mov	r24, r13
     92c:	9c 2d       	mov	r25, r12
     92e:	28 ee       	ldi	r18, 0xE8	; 232
     930:	33 e0       	ldi	r19, 0x03	; 3
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     93a:	24 e6       	ldi	r18, 0x64	; 100
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     946:	f8 01       	movw	r30, r16
     948:	22 87       	std	Z+10, r18	; 0x0a
     94a:	33 87       	std	Z+11, r19	; 0x0b
     94c:	44 87       	std	Z+12, r20	; 0x0c
     94e:	55 87       	std	Z+13, r21	; 0x0d
     950:	0e 94 82 0b 	call	0x1704	; 0x1704 <snprintf>
     954:	8d b7       	in	r24, 0x3d	; 61
     956:	9e b7       	in	r25, 0x3e	; 62
     958:	0e 96       	adiw	r24, 0x0e	; 14
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	9e bf       	out	0x3e, r25	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	8d bf       	out	0x3d, r24	; 61
		  }

		  gotoXY(6,3);
     964:	86 e0       	ldi	r24, 0x06	; 6
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	63 e0       	ldi	r22, 0x03	; 3
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString((char*)"           ");
     970:	8b e1       	ldi	r24, 0x1B	; 27
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		  gotoXY(6,3);
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString(outputbuffer);
     984:	92 e1       	ldi	r25, 0x12	; 18
     986:	a9 2e       	mov	r10, r25
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	b9 2e       	mov	r11, r25
     98c:	c5 01       	movw	r24, r10
     98e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

		  snprintf(outputbuffer,12,"%ld.%02ld Volts", volt_sensor.voltage/1000, ((volt_sensor.voltage)%1000) / 10);
     992:	c0 90 ca 04 	lds	r12, 0x04CA
     996:	d0 90 cb 04 	lds	r13, 0x04CB
     99a:	e0 90 cc 04 	lds	r14, 0x04CC
     99e:	f0 90 cd 04 	lds	r15, 0x04CD
     9a2:	ad b7       	in	r26, 0x3d	; 61
     9a4:	be b7       	in	r27, 0x3e	; 62
     9a6:	1e 97       	sbiw	r26, 0x0e	; 14
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	be bf       	out	0x3e, r27	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	ad bf       	out	0x3d, r26	; 61
     9b2:	0d b7       	in	r16, 0x3d	; 61
     9b4:	1e b7       	in	r17, 0x3e	; 62
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	12 96       	adiw	r26, 0x02	; 2
     9bc:	bc 92       	st	X, r11
     9be:	ae 92       	st	-X, r10
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	8c e0       	ldi	r24, 0x0C	; 12
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	f8 01       	movw	r30, r16
     9c8:	93 83       	std	Z+3, r25	; 0x03
     9ca:	82 83       	std	Z+2, r24	; 0x02
     9cc:	85 e4       	ldi	r24, 0x45	; 69
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	95 83       	std	Z+5, r25	; 0x05
     9d2:	84 83       	std	Z+4, r24	; 0x04
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	28 ee       	ldi	r18, 0xE8	; 232
     9da:	33 e0       	ldi	r19, 0x03	; 3
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     9e4:	d8 01       	movw	r26, r16
     9e6:	16 96       	adiw	r26, 0x06	; 6
     9e8:	2d 93       	st	X+, r18
     9ea:	3d 93       	st	X+, r19
     9ec:	4d 93       	st	X+, r20
     9ee:	5c 93       	st	X, r21
     9f0:	19 97       	sbiw	r26, 0x09	; 9
     9f2:	c7 01       	movw	r24, r14
     9f4:	b6 01       	movw	r22, r12
     9f6:	28 ee       	ldi	r18, 0xE8	; 232
     9f8:	33 e0       	ldi	r19, 0x03	; 3
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     a0e:	f8 01       	movw	r30, r16
     a10:	22 87       	std	Z+10, r18	; 0x0a
     a12:	33 87       	std	Z+11, r19	; 0x0b
     a14:	44 87       	std	Z+12, r20	; 0x0c
     a16:	55 87       	std	Z+13, r21	; 0x0d
     a18:	0e 94 82 0b 	call	0x1704	; 0x1704 <snprintf>
		  gotoXY(6,5);
     a1c:	8d b7       	in	r24, 0x3d	; 61
     a1e:	9e b7       	in	r25, 0x3e	; 62
     a20:	0e 96       	adiw	r24, 0x0e	; 14
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	9e bf       	out	0x3e, r25	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	8d bf       	out	0x3d, r24	; 61
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	65 e0       	ldi	r22, 0x05	; 5
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString((char*)"           ");
     a38:	8b e1       	ldi	r24, 0x1B	; 27
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		  gotoXY(6,5);
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	65 e0       	ldi	r22, 0x05	; 5
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString(outputbuffer);
     a4c:	c5 01       	movw	r24, r10
     a4e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		}
		if(current_time >= post_to_serial_clock){
     a52:	80 91 0a 04 	lds	r24, 0x040A
     a56:	90 91 0b 04 	lds	r25, 0x040B
     a5a:	a0 91 0c 04 	lds	r26, 0x040C
     a5e:	b0 91 0d 04 	lds	r27, 0x040D
     a62:	28 16       	cp	r2, r24
     a64:	39 06       	cpc	r3, r25
     a66:	4a 06       	cpc	r4, r26
     a68:	5b 06       	cpc	r5, r27
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	cc c0       	rjmp	.+408    	; 0xc06 <__stack+0x307>
			post_to_serial_clock = current_time + post_to_serial_period;
     a6e:	80 91 fe 01 	lds	r24, 0x01FE
     a72:	90 91 ff 01 	lds	r25, 0x01FF
     a76:	aa 27       	eor	r26, r26
     a78:	97 fd       	sbrc	r25, 7
     a7a:	a0 95       	com	r26
     a7c:	ba 2f       	mov	r27, r26
     a7e:	82 0d       	add	r24, r2
     a80:	93 1d       	adc	r25, r3
     a82:	a4 1d       	adc	r26, r4
     a84:	b5 1d       	adc	r27, r5
     a86:	80 93 0a 04 	sts	0x040A, r24
     a8a:	90 93 0b 04 	sts	0x040B, r25
     a8e:	a0 93 0c 04 	sts	0x040C, r26
     a92:	b0 93 0d 04 	sts	0x040D, r27
//			Serial.write(tach_enc.hertz / 1000);
//			Serial.write(".");
//			Serial.write(tach_enc.hertz % 1000);
			sprintf(outputbuffer, "<r>%lu.%03lu\t%ld.%03ld\t%d\t%ld\t%ld.%03ld\t%ld</r>\n", current_time/1000,
					current_time % 1000, (60*tach_enc.hertz)/1000, ((60*tach_enc.hertz) % 1000)/10,current_sensor.current, current_sensor.sense_cts,
					volt_sensor.voltage / 1000, volt_sensor.voltage % 1000, volt_sensor.sense_cts);
     a96:	60 91 9e 04 	lds	r22, 0x049E
     a9a:	70 91 9f 04 	lds	r23, 0x049F
     a9e:	80 91 a0 04 	lds	r24, 0x04A0
     aa2:	90 91 a1 04 	lds	r25, 0x04A1
     aa6:	2c e3       	ldi	r18, 0x3C	; 60
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
     ab6:	80 90 ca 04 	lds	r8, 0x04CA
     aba:	90 90 cb 04 	lds	r9, 0x04CB
     abe:	a0 90 cc 04 	lds	r10, 0x04CC
     ac2:	b0 90 cd 04 	lds	r11, 0x04CD
     ac6:	ad b7       	in	r26, 0x3d	; 61
     ac8:	be b7       	in	r27, 0x3e	; 62
     aca:	96 97       	sbiw	r26, 0x26	; 38
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	be bf       	out	0x3e, r27	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	ad bf       	out	0x3d, r26	; 61
     ad6:	0d b7       	in	r16, 0x3d	; 61
     ad8:	1e b7       	in	r17, 0x3e	; 62
     ada:	0f 5f       	subi	r16, 0xFF	; 255
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	82 e1       	ldi	r24, 0x12	; 18
     ae0:	68 2e       	mov	r6, r24
     ae2:	84 e0       	ldi	r24, 0x04	; 4
     ae4:	78 2e       	mov	r7, r24
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	7c 92       	st	X, r7
     aea:	6e 92       	st	-X, r6
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	85 e5       	ldi	r24, 0x55	; 85
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	f8 01       	movw	r30, r16
     af4:	93 83       	std	Z+3, r25	; 0x03
     af6:	82 83       	std	Z+2, r24	; 0x02
     af8:	c2 01       	movw	r24, r4
     afa:	b1 01       	movw	r22, r2
     afc:	28 ee       	ldi	r18, 0xE8	; 232
     afe:	33 e0       	ldi	r19, 0x03	; 3
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__udivmodsi4>
     b08:	d8 01       	movw	r26, r16
     b0a:	14 96       	adiw	r26, 0x04	; 4
     b0c:	2d 93       	st	X+, r18
     b0e:	3d 93       	st	X+, r19
     b10:	4d 93       	st	X+, r20
     b12:	5c 93       	st	X, r21
     b14:	17 97       	sbiw	r26, 0x07	; 7
     b16:	c2 01       	movw	r24, r4
     b18:	b1 01       	movw	r22, r2
     b1a:	28 ee       	ldi	r18, 0xE8	; 232
     b1c:	33 e0       	ldi	r19, 0x03	; 3
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__udivmodsi4>
     b26:	f8 01       	movw	r30, r16
     b28:	60 87       	std	Z+8, r22	; 0x08
     b2a:	71 87       	std	Z+9, r23	; 0x09
     b2c:	82 87       	std	Z+10, r24	; 0x0a
     b2e:	93 87       	std	Z+11, r25	; 0x0b
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
     b34:	28 ee       	ldi	r18, 0xE8	; 232
     b36:	33 e0       	ldi	r19, 0x03	; 3
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     b40:	d8 01       	movw	r26, r16
     b42:	1c 96       	adiw	r26, 0x0c	; 12
     b44:	2d 93       	st	X+, r18
     b46:	3d 93       	st	X+, r19
     b48:	4d 93       	st	X+, r20
     b4a:	5c 93       	st	X, r21
     b4c:	1f 97       	sbiw	r26, 0x0f	; 15
     b4e:	c7 01       	movw	r24, r14
     b50:	b6 01       	movw	r22, r12
     b52:	28 ee       	ldi	r18, 0xE8	; 232
     b54:	33 e0       	ldi	r19, 0x03	; 3
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     b5e:	2a e0       	ldi	r18, 0x0A	; 10
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     b6a:	f8 01       	movw	r30, r16
     b6c:	20 8b       	std	Z+16, r18	; 0x10
     b6e:	31 8b       	std	Z+17, r19	; 0x11
     b70:	42 8b       	std	Z+18, r20	; 0x12
     b72:	53 8b       	std	Z+19, r21	; 0x13
     b74:	80 91 be 04 	lds	r24, 0x04BE
     b78:	90 91 bf 04 	lds	r25, 0x04BF
     b7c:	95 8b       	std	Z+21, r25	; 0x15
     b7e:	84 8b       	std	Z+20, r24	; 0x14
     b80:	80 91 b4 04 	lds	r24, 0x04B4
     b84:	90 91 b5 04 	lds	r25, 0x04B5
     b88:	a0 91 b6 04 	lds	r26, 0x04B6
     b8c:	b0 91 b7 04 	lds	r27, 0x04B7
     b90:	86 8b       	std	Z+22, r24	; 0x16
     b92:	97 8b       	std	Z+23, r25	; 0x17
     b94:	a0 8f       	std	Z+24, r26	; 0x18
     b96:	b1 8f       	std	Z+25, r27	; 0x19
     b98:	c5 01       	movw	r24, r10
     b9a:	b4 01       	movw	r22, r8
     b9c:	28 ee       	ldi	r18, 0xE8	; 232
     b9e:	33 e0       	ldi	r19, 0x03	; 3
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     ba8:	d8 01       	movw	r26, r16
     baa:	5a 96       	adiw	r26, 0x1a	; 26
     bac:	2d 93       	st	X+, r18
     bae:	3d 93       	st	X+, r19
     bb0:	4d 93       	st	X+, r20
     bb2:	5c 93       	st	X, r21
     bb4:	5d 97       	sbiw	r26, 0x1d	; 29
     bb6:	c5 01       	movw	r24, r10
     bb8:	b4 01       	movw	r22, r8
     bba:	28 ee       	ldi	r18, 0xE8	; 232
     bbc:	33 e0       	ldi	r19, 0x03	; 3
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     bc6:	f8 01       	movw	r30, r16
     bc8:	66 8f       	std	Z+30, r22	; 0x1e
     bca:	77 8f       	std	Z+31, r23	; 0x1f
     bcc:	80 a3       	std	Z+32, r24	; 0x20
     bce:	91 a3       	std	Z+33, r25	; 0x21
     bd0:	80 91 c2 04 	lds	r24, 0x04C2
     bd4:	90 91 c3 04 	lds	r25, 0x04C3
     bd8:	a0 91 c4 04 	lds	r26, 0x04C4
     bdc:	b0 91 c5 04 	lds	r27, 0x04C5
     be0:	82 a3       	std	Z+34, r24	; 0x22
     be2:	93 a3       	std	Z+35, r25	; 0x23
     be4:	a4 a3       	std	Z+36, r26	; 0x24
     be6:	b5 a3       	std	Z+37, r27	; 0x25
     be8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <sprintf>
			Serial.write(outputbuffer);
     bec:	8d b7       	in	r24, 0x3d	; 61
     bee:	9e b7       	in	r25, 0x3e	; 62
     bf0:	86 96       	adiw	r24, 0x26	; 38
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	9e bf       	out	0x3e, r25	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	8d bf       	out	0x3d, r24	; 61
     bfc:	86 e5       	ldi	r24, 0x56	; 86
     bfe:	95 e0       	ldi	r25, 0x05	; 5
     c00:	b3 01       	movw	r22, r6
     c02:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN5Print5writeEPKc>
		}
  }
}
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	ef 90       	pop	r14
     c12:	df 90       	pop	r13
     c14:	cf 90       	pop	r12
     c16:	bf 90       	pop	r11
     c18:	af 90       	pop	r10
     c1a:	9f 90       	pop	r9
     c1c:	8f 90       	pop	r8
     c1e:	7f 90       	pop	r7
     c20:	6f 90       	pop	r6
     c22:	5f 90       	pop	r5
     c24:	4f 90       	pop	r4
     c26:	3f 90       	pop	r3
     c28:	2f 90       	pop	r2
     c2a:	08 95       	ret

00000c2c <setup>:
void gotoXY(int x, int y) {
  LcdWrite(0, 0x80 | x);  // Column.
  LcdWrite(0, 0x40 | y);  // Row.  ?
}

void setup() {
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
	Serial.begin(115200);
     c30:	06 e5       	ldi	r16, 0x56	; 86
     c32:	15 e0       	ldi	r17, 0x05	; 5
     c34:	c8 01       	movw	r24, r16
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	52 ec       	ldi	r21, 0xC2	; 194
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN14HardwareSerial5beginEm>
	Serial.write("<h>time\tspeed\tcurrent\tcurrent_sense\tvoltage\tvoltage_sense</h>\n");
     c42:	c8 01       	movw	r24, r16
     c44:	66 e8       	ldi	r22, 0x86	; 134
     c46:	71 e0       	ldi	r23, 0x01	; 1
     c48:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN5Print5writeEPKc>
	Serial.write("<u>ms\trpm\tmA\tcounts\tvolts\tcts</u>\n");
     c4c:	c8 01       	movw	r24, r16
     c4e:	65 ec       	ldi	r22, 0xC5	; 197
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN5Print5writeEPKc>
  pinMode(LED_PWM_PIN, OUTPUT);
     c56:	8b e0       	ldi	r24, 0x0B	; 11
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(VOLT_PIN, INPUT);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(INTERRUPTER_PIN, INPUT);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>
  pinMode(LED_PIN, OUTPUT);
     c6e:	8d e0       	ldi	r24, 0x0D	; 13
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <pinMode>

  LcdInitialize();
     c76:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z13LcdInitializev>
  gotoXY(0,0);
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
  LcdClear();
     c86:	0e 94 91 02 	call	0x522	; 0x522 <_Z8LcdClearv>
  LcdString((char*)"Current:");
     c8a:	88 ee       	ldi	r24, 0xE8	; 232
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

  gotoXY(0,2);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	62 e0       	ldi	r22, 0x02	; 2
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
  LcdString((char*)"Speed:");
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

  gotoXY(0,4);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	64 e0       	ldi	r22, 0x04	; 4
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
  LcdString((char*)"Voltage:");
     cb2:	81 ef       	ldi	r24, 0xF1	; 241
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

  blink_clock = millis();
     cba:	0e 94 7f 09 	call	0x12fe	; 0x12fe <millis>
     cbe:	60 93 fa 03 	sts	0x03FA, r22
     cc2:	70 93 fb 03 	sts	0x03FB, r23
     cc6:	80 93 fc 03 	sts	0x03FC, r24
     cca:	90 93 fd 03 	sts	0x03FD, r25

  tach_enc.max_hertz = 5;
     cce:	25 e0       	ldi	r18, 0x05	; 5
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	30 93 9d 04 	sts	0x049D, r19
     cd6:	20 93 9c 04 	sts	0x049C, r18
  tach_enc.max_period = 5000;
     cda:	88 e8       	ldi	r24, 0x88	; 136
     cdc:	93 e1       	ldi	r25, 0x13	; 19
     cde:	90 93 ab 04 	sts	0x04AB, r25
     ce2:	80 93 aa 04 	sts	0x04AA, r24
  tach_enc.pin_num = INTERRUPTER_PIN;
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	90 93 a3 04 	sts	0x04A3, r25
     cee:	80 93 a2 04 	sts	0x04A2, r24
  tach_enc.debounce_min = 5;
     cf2:	30 93 95 04 	sts	0x0495, r19
     cf6:	20 93 94 04 	sts	0x0494, r18
  tach_enc.alpha = 800;
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	80 93 ac 04 	sts	0x04AC, r24
     d06:	90 93 ad 04 	sts	0x04AD, r25
     d0a:	a0 93 ae 04 	sts	0x04AE, r26
     d0e:	b0 93 af 04 	sts	0x04AF, r27
  tach_enc.cts_per_rev = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	90 93 a7 04 	sts	0x04A7, r25
     d1a:	80 93 a6 04 	sts	0x04A6, r24
  tach_enc.hertz = 0;
     d1e:	10 92 9e 04 	sts	0x049E, r1
     d22:	10 92 9f 04 	sts	0x049F, r1
     d26:	10 92 a0 04 	sts	0x04A0, r1
     d2a:	10 92 a1 04 	sts	0x04A1, r1
//  pulser.step_period_up = pulser.pulse_up_period / impulse_num_samples;
//  pulser.step_period_down = pulser.pulse_down_period / impulse_num_samples;
//  pulser.index = 0;
//  pulser.offset_time = 0; // start pulse at beginning of each carrier period

  volt_sensor.max_volts = 68000; // mV at sensor saturation (depends on pot adj)
     d2e:	80 ea       	ldi	r24, 0xA0	; 160
     d30:	99 e0       	ldi	r25, 0x09	; 9
     d32:	a1 e0       	ldi	r26, 0x01	; 1
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	80 93 c6 04 	sts	0x04C6, r24
     d3a:	90 93 c7 04 	sts	0x04C7, r25
     d3e:	a0 93 c8 04 	sts	0x04C8, r26
     d42:	b0 93 c9 04 	sts	0x04C9, r27

//  init_impulse(impulse_array, impulse_num_samples, 255);


}
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     d4c:	08 95       	ret

00000d4e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     d66:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     d6a:	20 91 0e 05 	lds	r18, 0x050E
     d6e:	30 91 0f 05 	lds	r19, 0x050F
     d72:	2f 5f       	subi	r18, 0xFF	; 255
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	2f 73       	andi	r18, 0x3F	; 63
     d78:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     d7a:	80 91 10 05 	lds	r24, 0x0510
     d7e:	90 91 11 05 	lds	r25, 0x0511
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	59 f0       	breq	.+22     	; 0xd9e <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
     d88:	e0 91 0e 05 	lds	r30, 0x050E
     d8c:	f0 91 0f 05 	lds	r31, 0x050F
     d90:	e2 53       	subi	r30, 0x32	; 50
     d92:	fb 4f       	sbci	r31, 0xFB	; 251
     d94:	40 83       	st	Z, r20
    buffer->head = i;
     d96:	30 93 0f 05 	sts	0x050F, r19
     d9a:	20 93 0e 05 	sts	0x050E, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     db6:	e0 91 62 05 	lds	r30, 0x0562
     dba:	f0 91 63 05 	lds	r31, 0x0563
     dbe:	e0 5c       	subi	r30, 0xC0	; 192
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	81 91       	ld	r24, Z+
     dc4:	91 91       	ld	r25, Z+
     dc6:	20 81       	ld	r18, Z
     dc8:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     dca:	82 1b       	sub	r24, r18
     dcc:	93 0b       	sbc	r25, r19
     dce:	8f 73       	andi	r24, 0x3F	; 63
     dd0:	90 70       	andi	r25, 0x00	; 0
     dd2:	89 2b       	or	r24, r25
     dd4:	11 f0       	breq	.+4      	; 0xdda <_Z14serialEventRunv+0x24>
     dd6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_Z11serialEventv>
     dda:	08 95       	ret

00000ddc <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     dfe:	20 91 52 05 	lds	r18, 0x0552
     e02:	30 91 53 05 	lds	r19, 0x0553
     e06:	80 91 54 05 	lds	r24, 0x0554
     e0a:	90 91 55 05 	lds	r25, 0x0555
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	31 f4       	brne	.+12     	; 0xe20 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     e14:	80 91 c1 00 	lds	r24, 0x00C1
     e18:	8f 7d       	andi	r24, 0xDF	; 223
     e1a:	80 93 c1 00 	sts	0x00C1, r24
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     e20:	e0 91 54 05 	lds	r30, 0x0554
     e24:	f0 91 55 05 	lds	r31, 0x0555
     e28:	ee 5e       	subi	r30, 0xEE	; 238
     e2a:	fa 4f       	sbci	r31, 0xFA	; 250
     e2c:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     e2e:	80 91 54 05 	lds	r24, 0x0554
     e32:	90 91 55 05 	lds	r25, 0x0555
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	60 e4       	ldi	r22, 0x40	; 64
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodhi4>
     e40:	90 93 55 05 	sts	0x0555, r25
     e44:	80 93 54 05 	sts	0x0554, r24
	
  #if defined(UDR0)
    UDR0 = c;
     e48:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	bf 91       	pop	r27
     e52:	af 91       	pop	r26
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	7f 91       	pop	r23
     e5a:	6f 91       	pop	r22
     e5c:	5f 91       	pop	r21
     e5e:	4f 91       	pop	r20
     e60:	3f 91       	pop	r19
     e62:	2f 91       	pop	r18
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
     e82:	7a 01       	movw	r14, r20
     e84:	8b 01       	movw	r16, r22
     e86:	dd 24       	eor	r13, r13
     e88:	40 30       	cpi	r20, 0x00	; 0
     e8a:	81 ee       	ldi	r24, 0xE1	; 225
     e8c:	58 07       	cpc	r21, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	68 07       	cpc	r22, r24
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	78 07       	cpc	r23, r24
     e96:	11 f0       	breq	.+4      	; 0xe9c <_ZN14HardwareSerial5beginEm+0x2e>
     e98:	dd 24       	eor	r13, r13
     e9a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	a9 2e       	mov	r10, r25
     ea0:	b1 2c       	mov	r11, r1
     ea2:	ec 89       	ldd	r30, Y+20	; 0x14
     ea4:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     ea6:	dd 20       	and	r13, r13
     ea8:	69 f0       	breq	.+26     	; 0xec4 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     eaa:	c5 01       	movw	r24, r10
     eac:	0e 8c       	ldd	r0, Y+30	; 0x1e
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <_ZN14HardwareSerial5beginEm+0x46>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <_ZN14HardwareSerial5beginEm+0x42>
     eb8:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	79 e0       	ldi	r23, 0x09	; 9
     ebe:	8d e3       	ldi	r24, 0x3D	; 61
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	05 c0       	rjmp	.+10     	; 0xece <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     ec4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ec6:	60 e8       	ldi	r22, 0x80	; 128
     ec8:	74 e8       	ldi	r23, 0x84	; 132
     eca:	8e e1       	ldi	r24, 0x1E	; 30
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a8 01       	movw	r20, r16
     ed0:	97 01       	movw	r18, r14
     ed2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__udivmodsi4>
     ed6:	21 50       	subi	r18, 0x01	; 1
     ed8:	30 40       	sbci	r19, 0x00	; 0
     eda:	40 40       	sbci	r20, 0x00	; 0
     edc:	50 40       	sbci	r21, 0x00	; 0
     ede:	56 95       	lsr	r21
     ee0:	47 95       	ror	r20
     ee2:	37 95       	ror	r19
     ee4:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     ee6:	80 e1       	ldi	r24, 0x10	; 16
     ee8:	20 30       	cpi	r18, 0x00	; 0
     eea:	38 07       	cpc	r19, r24
     eec:	20 f0       	brcs	.+8      	; 0xef6 <_ZN14HardwareSerial5beginEm+0x88>
     eee:	dd 20       	and	r13, r13
     ef0:	11 f0       	breq	.+4      	; 0xef6 <_ZN14HardwareSerial5beginEm+0x88>
     ef2:	dd 24       	eor	r13, r13
     ef4:	d6 cf       	rjmp	.-84     	; 0xea2 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     ef6:	e8 89       	ldd	r30, Y+16	; 0x10
     ef8:	f9 89       	ldd	r31, Y+17	; 0x11
     efa:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     efc:	ea 89       	ldd	r30, Y+18	; 0x12
     efe:	fb 89       	ldd	r31, Y+19	; 0x13
     f00:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     f02:	ee 89       	ldd	r30, Y+22	; 0x16
     f04:	ff 89       	ldd	r31, Y+23	; 0x17
     f06:	40 81       	ld	r20, Z
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	c9 01       	movw	r24, r18
     f0e:	0a 8c       	ldd	r0, Y+26	; 0x1a
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <_ZN14HardwareSerial5beginEm+0xa8>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <_ZN14HardwareSerial5beginEm+0xa4>
     f1a:	48 2b       	or	r20, r24
     f1c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     f1e:	ee 89       	ldd	r30, Y+22	; 0x16
     f20:	ff 89       	ldd	r31, Y+23	; 0x17
     f22:	40 81       	ld	r20, Z
     f24:	c9 01       	movw	r24, r18
     f26:	0b 8c       	ldd	r0, Y+27	; 0x1b
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <_ZN14HardwareSerial5beginEm+0xc0>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <_ZN14HardwareSerial5beginEm+0xbc>
     f32:	48 2b       	or	r20, r24
     f34:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     f36:	ee 89       	ldd	r30, Y+22	; 0x16
     f38:	ff 89       	ldd	r31, Y+23	; 0x17
     f3a:	40 81       	ld	r20, Z
     f3c:	c9 01       	movw	r24, r18
     f3e:	0c 8c       	ldd	r0, Y+28	; 0x1c
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <_ZN14HardwareSerial5beginEm+0xd8>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <_ZN14HardwareSerial5beginEm+0xd4>
     f4a:	48 2b       	or	r20, r24
     f4c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     f4e:	ee 89       	ldd	r30, Y+22	; 0x16
     f50:	ff 89       	ldd	r31, Y+23	; 0x17
     f52:	80 81       	ld	r24, Z
     f54:	0d 8c       	ldd	r0, Y+29	; 0x1d
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <_ZN14HardwareSerial5beginEm+0xee>
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <_ZN14HardwareSerial5beginEm+0xea>
     f60:	20 95       	com	r18
     f62:	28 23       	and	r18, r24
     f64:	20 83       	st	Z, r18
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	08 95       	ret

00000f7a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     f7a:	dc 01       	movw	r26, r24
     f7c:	1c 96       	adiw	r26, 0x0c	; 12
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	1d 97       	sbiw	r26, 0x0d	; 13
     f84:	e0 5c       	subi	r30, 0xC0	; 192
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	21 91       	ld	r18, Z+
     f8a:	31 91       	ld	r19, Z+
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	28 1b       	sub	r18, r24
     f92:	39 0b       	sbc	r19, r25
     f94:	2f 73       	andi	r18, 0x3F	; 63
     f96:	30 70       	andi	r19, 0x00	; 0
}
     f98:	c9 01       	movw	r24, r18
     f9a:	08 95       	ret

00000f9c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     f9c:	dc 01       	movw	r26, r24
     f9e:	1c 96       	adiw	r26, 0x0c	; 12
     fa0:	ed 91       	ld	r30, X+
     fa2:	fc 91       	ld	r31, X
     fa4:	1d 97       	sbiw	r26, 0x0d	; 13
     fa6:	e0 5c       	subi	r30, 0xC0	; 192
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	20 81       	ld	r18, Z
     fac:	31 81       	ldd	r19, Z+1	; 0x01
     fae:	e0 54       	subi	r30, 0x40	; 64
     fb0:	f0 40       	sbci	r31, 0x00	; 0
     fb2:	df 01       	movw	r26, r30
     fb4:	ae 5b       	subi	r26, 0xBE	; 190
     fb6:	bf 4f       	sbci	r27, 0xFF	; 255
     fb8:	8d 91       	ld	r24, X+
     fba:	9c 91       	ld	r25, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	19 f4       	brne	.+6      	; 0xfca <_ZN14HardwareSerial4peekEv+0x2e>
     fc4:	2f ef       	ldi	r18, 0xFF	; 255
     fc6:	3f ef       	ldi	r19, 0xFF	; 255
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	e8 0f       	add	r30, r24
     fd0:	f9 1f       	adc	r31, r25
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     fd8:	c9 01       	movw	r24, r18
     fda:	08 95       	ret

00000fdc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     fdc:	dc 01       	movw	r26, r24
     fde:	1c 96       	adiw	r26, 0x0c	; 12
     fe0:	ed 91       	ld	r30, X+
     fe2:	fc 91       	ld	r31, X
     fe4:	1d 97       	sbiw	r26, 0x0d	; 13
     fe6:	e0 5c       	subi	r30, 0xC0	; 192
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	20 81       	ld	r18, Z
     fec:	31 81       	ldd	r19, Z+1	; 0x01
     fee:	e0 54       	subi	r30, 0x40	; 64
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	df 01       	movw	r26, r30
     ff4:	ae 5b       	subi	r26, 0xBE	; 190
     ff6:	bf 4f       	sbci	r27, 0xFF	; 255
     ff8:	8d 91       	ld	r24, X+
     ffa:	9c 91       	ld	r25, X
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	28 17       	cp	r18, r24
    1000:	39 07       	cpc	r19, r25
    1002:	19 f4       	brne	.+6      	; 0x100a <_ZN14HardwareSerial4readEv+0x2e>
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	10 c0       	rjmp	.+32     	; 0x102a <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	e8 0f       	add	r30, r24
    1012:	f9 1f       	adc	r31, r25
    1014:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	11 97       	sbiw	r26, 0x01	; 1
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	8f 73       	andi	r24, 0x3F	; 63
    1020:	90 70       	andi	r25, 0x00	; 0
    1022:	11 96       	adiw	r26, 0x01	; 1
    1024:	9c 93       	st	X, r25
    1026:	8e 93       	st	-X, r24
    return c;
    1028:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    102a:	c9 01       	movw	r24, r18
    102c:	08 95       	ret

0000102e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    102e:	fc 01       	movw	r30, r24
    1030:	86 85       	ldd	r24, Z+14	; 0x0e
    1032:	97 85       	ldd	r25, Z+15	; 0x0f
    1034:	dc 01       	movw	r26, r24
    1036:	a0 5c       	subi	r26, 0xC0	; 192
    1038:	bf 4f       	sbci	r27, 0xFF	; 255
    103a:	fc 01       	movw	r30, r24
    103c:	ee 5b       	subi	r30, 0xBE	; 190
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	2d 91       	ld	r18, X+
    1042:	3c 91       	ld	r19, X
    1044:	11 97       	sbiw	r26, 0x01	; 1
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	c1 f7       	brne	.-16     	; 0x1040 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    1050:	08 95       	ret

00001052 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    105a:	ee 85       	ldd	r30, Y+14	; 0x0e
    105c:	ff 85       	ldd	r31, Y+15	; 0x0f
    105e:	e0 5c       	subi	r30, 0xC0	; 192
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	e0 54       	subi	r30, 0x40	; 64
    1068:	f0 40       	sbci	r31, 0x00	; 0
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	60 e4       	ldi	r22, 0x40	; 64
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodhi4>
    1074:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1076:	df 01       	movw	r26, r30
    1078:	ae 5b       	subi	r26, 0xBE	; 190
    107a:	bf 4f       	sbci	r27, 0xFF	; 255
    107c:	8d 91       	ld	r24, X+
    107e:	9c 91       	ld	r25, X
    1080:	11 97       	sbiw	r26, 0x01	; 1
    1082:	28 17       	cp	r18, r24
    1084:	39 07       	cpc	r19, r25
    1086:	d1 f3       	breq	.-12     	; 0x107c <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1088:	e0 5c       	subi	r30, 0xC0	; 192
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	e0 54       	subi	r30, 0x40	; 64
    1092:	f0 40       	sbci	r31, 0x00	; 0
    1094:	e8 0f       	add	r30, r24
    1096:	f9 1f       	adc	r31, r25
    1098:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    109a:	ee 85       	ldd	r30, Y+14	; 0x0e
    109c:	ff 85       	ldd	r31, Y+15	; 0x0f
    109e:	e0 5c       	subi	r30, 0xC0	; 192
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	31 83       	std	Z+1, r19	; 0x01
    10a4:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    10a6:	ee 89       	ldd	r30, Y+22	; 0x16
    10a8:	ff 89       	ldd	r31, Y+23	; 0x17
    10aa:	20 81       	ld	r18, Z
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <_ZN14HardwareSerial5writeEh+0x66>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <_ZN14HardwareSerial5writeEh+0x62>
    10bc:	28 2b       	or	r18, r24
    10be:	20 83       	st	Z, r18
  
  return 1;
}
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    10ca:	10 92 59 05 	sts	0x0559, r1
    10ce:	10 92 58 05 	sts	0x0558, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    10d2:	88 ee       	ldi	r24, 0xE8	; 232
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	80 93 5a 05 	sts	0x055A, r24
    10de:	90 93 5b 05 	sts	0x055B, r25
    10e2:	a0 93 5c 05 	sts	0x055C, r26
    10e6:	b0 93 5d 05 	sts	0x055D, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    10ea:	89 ee       	ldi	r24, 0xE9	; 233
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	90 93 57 05 	sts	0x0557, r25
    10f2:	80 93 56 05 	sts	0x0556, r24
{
  _rx_buffer = rx_buffer;
    10f6:	8e ec       	ldi	r24, 0xCE	; 206
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	90 93 63 05 	sts	0x0563, r25
    10fe:	80 93 62 05 	sts	0x0562, r24
  _tx_buffer = tx_buffer;
    1102:	82 e1       	ldi	r24, 0x12	; 18
    1104:	95 e0       	ldi	r25, 0x05	; 5
    1106:	90 93 65 05 	sts	0x0565, r25
    110a:	80 93 64 05 	sts	0x0564, r24
  _ubrrh = ubrrh;
    110e:	85 ec       	ldi	r24, 0xC5	; 197
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	90 93 67 05 	sts	0x0567, r25
    1116:	80 93 66 05 	sts	0x0566, r24
  _ubrrl = ubrrl;
    111a:	84 ec       	ldi	r24, 0xC4	; 196
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 69 05 	sts	0x0569, r25
    1122:	80 93 68 05 	sts	0x0568, r24
  _ucsra = ucsra;
    1126:	80 ec       	ldi	r24, 0xC0	; 192
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 6b 05 	sts	0x056B, r25
    112e:	80 93 6a 05 	sts	0x056A, r24
  _ucsrb = ucsrb;
    1132:	81 ec       	ldi	r24, 0xC1	; 193
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	90 93 6d 05 	sts	0x056D, r25
    113a:	80 93 6c 05 	sts	0x056C, r24
  _udr = udr;
    113e:	86 ec       	ldi	r24, 0xC6	; 198
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	90 93 6f 05 	sts	0x056F, r25
    1146:	80 93 6e 05 	sts	0x056E, r24
  _rxen = rxen;
    114a:	84 e0       	ldi	r24, 0x04	; 4
    114c:	80 93 70 05 	sts	0x0570, r24
  _txen = txen;
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	80 93 71 05 	sts	0x0571, r24
  _rxcie = rxcie;
    1156:	87 e0       	ldi	r24, 0x07	; 7
    1158:	80 93 72 05 	sts	0x0572, r24
  _udrie = udrie;
    115c:	85 e0       	ldi	r24, 0x05	; 5
    115e:	80 93 73 05 	sts	0x0573, r24
  _u2x = u2x;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 74 05 	sts	0x0574, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1168:	08 95       	ret

0000116a <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	7c 01       	movw	r14, r24
    117c:	6b 01       	movw	r12, r22
    117e:	8a 01       	movw	r16, r20
    1180:	c0 e0       	ldi	r28, 0x00	; 0
    1182:	d0 e0       	ldi	r29, 0x00	; 0
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1186:	d6 01       	movw	r26, r12
    1188:	6d 91       	ld	r22, X+
    118a:	6d 01       	movw	r12, r26
    118c:	d7 01       	movw	r26, r14
    118e:	ed 91       	ld	r30, X+
    1190:	fc 91       	ld	r31, X
    1192:	01 90       	ld	r0, Z+
    1194:	f0 81       	ld	r31, Z
    1196:	e0 2d       	mov	r30, r0
    1198:	c7 01       	movw	r24, r14
    119a:	09 95       	icall
    119c:	c8 0f       	add	r28, r24
    119e:	d9 1f       	adc	r29, r25
    11a0:	01 50       	subi	r16, 0x01	; 1
    11a2:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    11a4:	01 15       	cp	r16, r1
    11a6:	11 05       	cpc	r17, r1
    11a8:	71 f7       	brne	.-36     	; 0x1186 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    11aa:	ce 01       	movw	r24, r28
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	08 95       	ret

000011be <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    11be:	2f 92       	push	r2
    11c0:	3f 92       	push	r3
    11c2:	4f 92       	push	r4
    11c4:	5f 92       	push	r5
    11c6:	6f 92       	push	r6
    11c8:	7f 92       	push	r7
    11ca:	8f 92       	push	r8
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	3b 01       	movw	r6, r22
    11e8:	4c 01       	movw	r8, r24
    11ea:	19 01       	movw	r2, r18
    11ec:	2a 01       	movw	r4, r20
    11ee:	6d 89       	ldd	r22, Y+21	; 0x15
    11f0:	7e 89       	ldd	r23, Y+22	; 0x16
    11f2:	8f 89       	ldd	r24, Y+23	; 0x17
    11f4:	98 8d       	ldd	r25, Y+24	; 0x18
    11f6:	6a 19       	sub	r22, r10
    11f8:	7b 09       	sbc	r23, r11
    11fa:	8c 09       	sbc	r24, r12
    11fc:	9d 09       	sbc	r25, r13
    11fe:	62 1a       	sub	r6, r18
    1200:	73 0a       	sbc	r7, r19
    1202:	84 0a       	sbc	r8, r20
    1204:	95 0a       	sbc	r9, r21
    1206:	a4 01       	movw	r20, r8
    1208:	93 01       	movw	r18, r6
    120a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsi3>
    120e:	e2 18       	sub	r14, r2
    1210:	f3 08       	sbc	r15, r3
    1212:	04 09       	sbc	r16, r4
    1214:	15 09       	sbc	r17, r5
    1216:	a8 01       	movw	r20, r16
    1218:	97 01       	movw	r18, r14
    121a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
    121e:	2a 0d       	add	r18, r10
    1220:	3b 1d       	adc	r19, r11
    1222:	4c 1d       	adc	r20, r12
    1224:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    1226:	b9 01       	movw	r22, r18
    1228:	ca 01       	movw	r24, r20
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	9f 90       	pop	r9
    1240:	8f 90       	pop	r8
    1242:	7f 90       	pop	r7
    1244:	6f 90       	pop	r6
    1246:	5f 90       	pop	r5
    1248:	4f 90       	pop	r4
    124a:	3f 90       	pop	r3
    124c:	2f 90       	pop	r2
    124e:	08 95       	ret

00001250 <main>:
#include <Arduino.h>

int main(void)
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
{
	init();
    1254:	0e 94 8d 09 	call	0x131a	; 0x131a <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    1258:	0e 94 16 06 	call	0xc2c	; 0xc2c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    125c:	cb ed       	ldi	r28, 0xDB	; 219
    125e:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1260:	0e 94 db 02 	call	0x5b6	; 0x5b6 <loop>
		if (serialEventRun) serialEventRun();
    1264:	20 97       	sbiw	r28, 0x00	; 0
    1266:	e1 f3       	breq	.-8      	; 0x1260 <main+0x10>
    1268:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_Z14serialEventRunv>
    126c:	f9 cf       	rjmp	.-14     	; 0x1260 <main+0x10>

0000126e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1284:	80 91 79 05 	lds	r24, 0x0579
    1288:	90 91 7a 05 	lds	r25, 0x057A
    128c:	a0 91 7b 05 	lds	r26, 0x057B
    1290:	b0 91 7c 05 	lds	r27, 0x057C
	unsigned char f = timer0_fract;
    1294:	30 91 7d 05 	lds	r19, 0x057D

	m += MILLIS_INC;
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    129e:	23 2f       	mov	r18, r19
    12a0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    12a2:	2d 37       	cpi	r18, 0x7D	; 125
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <__vector_16+0x40>
		f -= FRACT_MAX;
    12a6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	a1 1d       	adc	r26, r1
    12ac:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    12ae:	20 93 7d 05 	sts	0x057D, r18
	timer0_millis = m;
    12b2:	80 93 79 05 	sts	0x0579, r24
    12b6:	90 93 7a 05 	sts	0x057A, r25
    12ba:	a0 93 7b 05 	sts	0x057B, r26
    12be:	b0 93 7c 05 	sts	0x057C, r27
	timer0_overflow_count++;
    12c2:	80 91 75 05 	lds	r24, 0x0575
    12c6:	90 91 76 05 	lds	r25, 0x0576
    12ca:	a0 91 77 05 	lds	r26, 0x0577
    12ce:	b0 91 78 05 	lds	r27, 0x0578
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	a1 1d       	adc	r26, r1
    12d6:	b1 1d       	adc	r27, r1
    12d8:	80 93 75 05 	sts	0x0575, r24
    12dc:	90 93 76 05 	sts	0x0576, r25
    12e0:	a0 93 77 05 	sts	0x0577, r26
    12e4:	b0 93 78 05 	sts	0x0578, r27
}
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	3f 91       	pop	r19
    12f2:	2f 91       	pop	r18
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0f 90       	pop	r0
    12fa:	1f 90       	pop	r1
    12fc:	18 95       	reti

000012fe <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    12fe:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1300:	f8 94       	cli
	m = timer0_millis;
    1302:	20 91 79 05 	lds	r18, 0x0579
    1306:	30 91 7a 05 	lds	r19, 0x057A
    130a:	40 91 7b 05 	lds	r20, 0x057B
    130e:	50 91 7c 05 	lds	r21, 0x057C
	SREG = oldSREG;
    1312:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1314:	b9 01       	movw	r22, r18
    1316:	ca 01       	movw	r24, r20
    1318:	08 95       	ret

0000131a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    131a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    131c:	84 b5       	in	r24, 0x24	; 36
    131e:	82 60       	ori	r24, 0x02	; 2
    1320:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1322:	84 b5       	in	r24, 0x24	; 36
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1328:	85 b5       	in	r24, 0x25	; 37
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    132e:	85 b5       	in	r24, 0x25	; 37
    1330:	81 60       	ori	r24, 0x01	; 1
    1332:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1334:	ee e6       	ldi	r30, 0x6E	; 110
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	81 60       	ori	r24, 0x01	; 1
    133c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    133e:	e1 e8       	ldi	r30, 0x81	; 129
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1344:	80 81       	ld	r24, Z
    1346:	82 60       	ori	r24, 0x02	; 2
    1348:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    134a:	80 81       	ld	r24, Z
    134c:	81 60       	ori	r24, 0x01	; 1
    134e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1350:	e0 e8       	ldi	r30, 0x80	; 128
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    135a:	e1 eb       	ldi	r30, 0xB1	; 177
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	84 60       	ori	r24, 0x04	; 4
    1362:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1364:	e0 eb       	ldi	r30, 0xB0	; 176
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    136e:	ea e7       	ldi	r30, 0x7A	; 122
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	84 60       	ori	r24, 0x04	; 4
    1376:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1378:	80 81       	ld	r24, Z
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    137e:	80 81       	ld	r24, Z
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1384:	80 81       	ld	r24, Z
    1386:	80 68       	ori	r24, 0x80	; 128
    1388:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    138a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    138e:	08 95       	ret

00001390 <analogRead>:

int analogRead(uint8_t pin)
{
    1390:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1392:	8e 30       	cpi	r24, 0x0E	; 14
    1394:	08 f0       	brcs	.+2      	; 0x1398 <analogRead+0x8>
    1396:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1398:	97 70       	andi	r25, 0x07	; 7
    139a:	80 91 04 02 	lds	r24, 0x0204
    139e:	82 95       	swap	r24
    13a0:	88 0f       	add	r24, r24
    13a2:	88 0f       	add	r24, r24
    13a4:	80 7c       	andi	r24, 0xC0	; 192
    13a6:	89 2b       	or	r24, r25
    13a8:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    13ac:	80 91 7a 00 	lds	r24, 0x007A
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    13b6:	80 91 7a 00 	lds	r24, 0x007A
    13ba:	86 fd       	sbrc	r24, 6
    13bc:	fc cf       	rjmp	.-8      	; 0x13b6 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    13be:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    13c2:	40 91 79 00 	lds	r20, 0x0079
    13c6:	94 2f       	mov	r25, r20
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	28 2b       	or	r18, r24
    13ce:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    13d0:	c9 01       	movw	r24, r18
    13d2:	08 95       	ret

000013d4 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    13d4:	48 2f       	mov	r20, r24
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	ca 01       	movw	r24, r20
    13da:	86 56       	subi	r24, 0x66	; 102
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	fc 01       	movw	r30, r24
    13e0:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    13e2:	4a 57       	subi	r20, 0x7A	; 122
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	fa 01       	movw	r30, r20
    13e8:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    13ea:	88 23       	and	r24, r24
    13ec:	c1 f0       	breq	.+48     	; 0x141e <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13ee:	e8 2f       	mov	r30, r24
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e8 59       	subi	r30, 0x98	; 152
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	a5 91       	lpm	r26, Z+
    13fc:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    13fe:	66 23       	and	r22, r22
    1400:	41 f4       	brne	.+16     	; 0x1412 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1402:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1404:	f8 94       	cli
		*reg &= ~bit;
    1406:	8c 91       	ld	r24, X
    1408:	20 95       	com	r18
    140a:	82 23       	and	r24, r18
    140c:	8c 93       	st	X, r24
		SREG = oldSREG;
    140e:	9f bf       	out	0x3f, r25	; 63
    1410:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1412:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1414:	f8 94       	cli
		*reg |= bit;
    1416:	8c 91       	ld	r24, X
    1418:	82 2b       	or	r24, r18
    141a:	8c 93       	st	X, r24
		SREG = oldSREG;
    141c:	9f bf       	out	0x3f, r25	; 63
    141e:	08 95       	ret

00001420 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1420:	48 2f       	mov	r20, r24
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	ca 01       	movw	r24, r20
    1426:	82 55       	subi	r24, 0x52	; 82
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	fc 01       	movw	r30, r24
    142c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    142e:	ca 01       	movw	r24, r20
    1430:	86 56       	subi	r24, 0x66	; 102
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	fc 01       	movw	r30, r24
    1436:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1438:	4a 57       	subi	r20, 0x7A	; 122
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	fa 01       	movw	r30, r20
    143e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1440:	33 23       	and	r19, r19
    1442:	09 f4       	brne	.+2      	; 0x1446 <digitalWrite+0x26>
    1444:	40 c0       	rjmp	.+128    	; 0x14c6 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1446:	22 23       	and	r18, r18
    1448:	51 f1       	breq	.+84     	; 0x149e <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    144a:	23 30       	cpi	r18, 0x03	; 3
    144c:	71 f0       	breq	.+28     	; 0x146a <digitalWrite+0x4a>
    144e:	24 30       	cpi	r18, 0x04	; 4
    1450:	28 f4       	brcc	.+10     	; 0x145c <digitalWrite+0x3c>
    1452:	21 30       	cpi	r18, 0x01	; 1
    1454:	a1 f0       	breq	.+40     	; 0x147e <digitalWrite+0x5e>
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	11 f5       	brne	.+68     	; 0x149e <digitalWrite+0x7e>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <digitalWrite+0x64>
    145c:	26 30       	cpi	r18, 0x06	; 6
    145e:	b1 f0       	breq	.+44     	; 0x148c <digitalWrite+0x6c>
    1460:	27 30       	cpi	r18, 0x07	; 7
    1462:	c1 f0       	breq	.+48     	; 0x1494 <digitalWrite+0x74>
    1464:	24 30       	cpi	r18, 0x04	; 4
    1466:	d9 f4       	brne	.+54     	; 0x149e <digitalWrite+0x7e>
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    146a:	80 91 80 00 	lds	r24, 0x0080
    146e:	8f 77       	andi	r24, 0x7F	; 127
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1472:	80 91 80 00 	lds	r24, 0x0080
    1476:	8f 7d       	andi	r24, 0xDF	; 223
    1478:	80 93 80 00 	sts	0x0080, r24
    147c:	10 c0       	rjmp	.+32     	; 0x149e <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    147e:	84 b5       	in	r24, 0x24	; 36
    1480:	8f 77       	andi	r24, 0x7F	; 127
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1484:	84 b5       	in	r24, 0x24	; 36
    1486:	8f 7d       	andi	r24, 0xDF	; 223
    1488:	84 bd       	out	0x24, r24	; 36
    148a:	09 c0       	rjmp	.+18     	; 0x149e <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    148c:	80 91 b0 00 	lds	r24, 0x00B0
    1490:	8f 77       	andi	r24, 0x7F	; 127
    1492:	03 c0       	rjmp	.+6      	; 0x149a <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1494:	80 91 b0 00 	lds	r24, 0x00B0
    1498:	8f 7d       	andi	r24, 0xDF	; 223
    149a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    149e:	e3 2f       	mov	r30, r19
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	ee 58       	subi	r30, 0x8E	; 142
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	a5 91       	lpm	r26, Z+
    14ac:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    14ae:	2f b7       	in	r18, 0x3f	; 63
	cli();
    14b0:	f8 94       	cli

	if (val == LOW) {
    14b2:	66 23       	and	r22, r22
    14b4:	21 f4       	brne	.+8      	; 0x14be <digitalWrite+0x9e>
		*out &= ~bit;
    14b6:	8c 91       	ld	r24, X
    14b8:	90 95       	com	r25
    14ba:	89 23       	and	r24, r25
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    14be:	8c 91       	ld	r24, X
    14c0:	89 2b       	or	r24, r25
    14c2:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    14c4:	2f bf       	out	0x3f, r18	; 63
    14c6:	08 95       	ret

000014c8 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    14c8:	68 2f       	mov	r22, r24
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	cb 01       	movw	r24, r22
    14ce:	82 55       	subi	r24, 0x52	; 82
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	fc 01       	movw	r30, r24
    14d4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    14d6:	cb 01       	movw	r24, r22
    14d8:	86 56       	subi	r24, 0x66	; 102
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	fc 01       	movw	r30, r24
    14de:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    14e0:	6a 57       	subi	r22, 0x7A	; 122
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	fb 01       	movw	r30, r22
    14e6:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    14e8:	99 23       	and	r25, r25
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <digitalRead+0x2a>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3c c0       	rjmp	.+120    	; 0x156a <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    14f2:	22 23       	and	r18, r18
    14f4:	51 f1       	breq	.+84     	; 0x154a <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    14f6:	23 30       	cpi	r18, 0x03	; 3
    14f8:	71 f0       	breq	.+28     	; 0x1516 <digitalRead+0x4e>
    14fa:	24 30       	cpi	r18, 0x04	; 4
    14fc:	28 f4       	brcc	.+10     	; 0x1508 <digitalRead+0x40>
    14fe:	21 30       	cpi	r18, 0x01	; 1
    1500:	a1 f0       	breq	.+40     	; 0x152a <digitalRead+0x62>
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	11 f5       	brne	.+68     	; 0x154a <digitalRead+0x82>
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <digitalRead+0x68>
    1508:	26 30       	cpi	r18, 0x06	; 6
    150a:	b1 f0       	breq	.+44     	; 0x1538 <digitalRead+0x70>
    150c:	27 30       	cpi	r18, 0x07	; 7
    150e:	c1 f0       	breq	.+48     	; 0x1540 <digitalRead+0x78>
    1510:	24 30       	cpi	r18, 0x04	; 4
    1512:	d9 f4       	brne	.+54     	; 0x154a <digitalRead+0x82>
    1514:	04 c0       	rjmp	.+8      	; 0x151e <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1516:	80 91 80 00 	lds	r24, 0x0080
    151a:	8f 77       	andi	r24, 0x7F	; 127
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    151e:	80 91 80 00 	lds	r24, 0x0080
    1522:	8f 7d       	andi	r24, 0xDF	; 223
    1524:	80 93 80 00 	sts	0x0080, r24
    1528:	10 c0       	rjmp	.+32     	; 0x154a <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    152a:	84 b5       	in	r24, 0x24	; 36
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1530:	84 b5       	in	r24, 0x24	; 36
    1532:	8f 7d       	andi	r24, 0xDF	; 223
    1534:	84 bd       	out	0x24, r24	; 36
    1536:	09 c0       	rjmp	.+18     	; 0x154a <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1538:	80 91 b0 00 	lds	r24, 0x00B0
    153c:	8f 77       	andi	r24, 0x7F	; 127
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1540:	80 91 b0 00 	lds	r24, 0x00B0
    1544:	8f 7d       	andi	r24, 0xDF	; 223
    1546:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    154a:	89 2f       	mov	r24, r25
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	84 58       	subi	r24, 0x84	; 132
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	fc 01       	movw	r30, r24
    1558:	a5 91       	lpm	r26, Z+
    155a:	b4 91       	lpm	r27, Z+
    155c:	8c 91       	ld	r24, X
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	84 23       	and	r24, r20
    1564:	11 f0       	breq	.+4      	; 0x156a <digitalRead+0xa2>
    1566:	21 e0       	ldi	r18, 0x01	; 1
    1568:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    156a:	c9 01       	movw	r24, r18
    156c:	08 95       	ret

0000156e <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	e8 2e       	mov	r14, r24
    1582:	f6 2e       	mov	r15, r22
    1584:	b4 2e       	mov	r11, r20
    1586:	c7 e0       	ldi	r28, 0x07	; 7
    1588:	d0 e0       	ldi	r29, 0x00	; 0
    158a:	02 2f       	mov	r16, r18
    158c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    158e:	87 e0       	ldi	r24, 0x07	; 7
    1590:	c8 2e       	mov	r12, r24
    1592:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1594:	bb 20       	and	r11, r11
    1596:	59 f4       	brne	.+22     	; 0x15ae <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1598:	b6 01       	movw	r22, r12
    159a:	6c 1b       	sub	r22, r28
    159c:	7d 0b       	sbc	r23, r29
    159e:	c8 01       	movw	r24, r16
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <shiftOut+0x38>
    15a2:	95 95       	asr	r25
    15a4:	87 95       	ror	r24
    15a6:	6a 95       	dec	r22
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <shiftOut+0x34>
    15aa:	bc 01       	movw	r22, r24
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    15ae:	b8 01       	movw	r22, r16
    15b0:	0c 2e       	mov	r0, r28
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <shiftOut+0x4a>
    15b4:	75 95       	asr	r23
    15b6:	67 95       	ror	r22
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <shiftOut+0x46>
    15bc:	61 70       	andi	r22, 0x01	; 1
    15be:	8e 2d       	mov	r24, r14
    15c0:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    15c4:	8f 2d       	mov	r24, r15
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    15cc:	8f 2d       	mov	r24, r15
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	0e 94 10 0a 	call	0x1420	; 0x1420 <digitalWrite>
    15d4:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    15d6:	9f ef       	ldi	r25, 0xFF	; 255
    15d8:	cf 3f       	cpi	r28, 0xFF	; 255
    15da:	d9 07       	cpc	r29, r25
    15dc:	d9 f6       	brne	.-74     	; 0x1594 <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	bf 90       	pop	r11
    15f0:	08 95       	ret

000015f2 <__mulsi3>:
    15f2:	62 9f       	mul	r22, r18
    15f4:	d0 01       	movw	r26, r0
    15f6:	73 9f       	mul	r23, r19
    15f8:	f0 01       	movw	r30, r0
    15fa:	82 9f       	mul	r24, r18
    15fc:	e0 0d       	add	r30, r0
    15fe:	f1 1d       	adc	r31, r1
    1600:	64 9f       	mul	r22, r20
    1602:	e0 0d       	add	r30, r0
    1604:	f1 1d       	adc	r31, r1
    1606:	92 9f       	mul	r25, r18
    1608:	f0 0d       	add	r31, r0
    160a:	83 9f       	mul	r24, r19
    160c:	f0 0d       	add	r31, r0
    160e:	74 9f       	mul	r23, r20
    1610:	f0 0d       	add	r31, r0
    1612:	65 9f       	mul	r22, r21
    1614:	f0 0d       	add	r31, r0
    1616:	99 27       	eor	r25, r25
    1618:	72 9f       	mul	r23, r18
    161a:	b0 0d       	add	r27, r0
    161c:	e1 1d       	adc	r30, r1
    161e:	f9 1f       	adc	r31, r25
    1620:	63 9f       	mul	r22, r19
    1622:	b0 0d       	add	r27, r0
    1624:	e1 1d       	adc	r30, r1
    1626:	f9 1f       	adc	r31, r25
    1628:	bd 01       	movw	r22, r26
    162a:	cf 01       	movw	r24, r30
    162c:	11 24       	eor	r1, r1
    162e:	08 95       	ret

00001630 <__divmodhi4>:
    1630:	97 fb       	bst	r25, 7
    1632:	09 2e       	mov	r0, r25
    1634:	07 26       	eor	r0, r23
    1636:	0a d0       	rcall	.+20     	; 0x164c <__divmodhi4_neg1>
    1638:	77 fd       	sbrc	r23, 7
    163a:	04 d0       	rcall	.+8      	; 0x1644 <__divmodhi4_neg2>
    163c:	49 d0       	rcall	.+146    	; 0x16d0 <__udivmodhi4>
    163e:	06 d0       	rcall	.+12     	; 0x164c <__divmodhi4_neg1>
    1640:	00 20       	and	r0, r0
    1642:	1a f4       	brpl	.+6      	; 0x164a <__divmodhi4_exit>

00001644 <__divmodhi4_neg2>:
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255

0000164a <__divmodhi4_exit>:
    164a:	08 95       	ret

0000164c <__divmodhi4_neg1>:
    164c:	f6 f7       	brtc	.-4      	; 0x164a <__divmodhi4_exit>
    164e:	90 95       	com	r25
    1650:	81 95       	neg	r24
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	08 95       	ret

00001656 <__udivmodsi4>:
    1656:	a1 e2       	ldi	r26, 0x21	; 33
    1658:	1a 2e       	mov	r1, r26
    165a:	aa 1b       	sub	r26, r26
    165c:	bb 1b       	sub	r27, r27
    165e:	fd 01       	movw	r30, r26
    1660:	0d c0       	rjmp	.+26     	; 0x167c <__udivmodsi4_ep>

00001662 <__udivmodsi4_loop>:
    1662:	aa 1f       	adc	r26, r26
    1664:	bb 1f       	adc	r27, r27
    1666:	ee 1f       	adc	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	a2 17       	cp	r26, r18
    166c:	b3 07       	cpc	r27, r19
    166e:	e4 07       	cpc	r30, r20
    1670:	f5 07       	cpc	r31, r21
    1672:	20 f0       	brcs	.+8      	; 0x167c <__udivmodsi4_ep>
    1674:	a2 1b       	sub	r26, r18
    1676:	b3 0b       	sbc	r27, r19
    1678:	e4 0b       	sbc	r30, r20
    167a:	f5 0b       	sbc	r31, r21

0000167c <__udivmodsi4_ep>:
    167c:	66 1f       	adc	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	88 1f       	adc	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	1a 94       	dec	r1
    1686:	69 f7       	brne	.-38     	; 0x1662 <__udivmodsi4_loop>
    1688:	60 95       	com	r22
    168a:	70 95       	com	r23
    168c:	80 95       	com	r24
    168e:	90 95       	com	r25
    1690:	9b 01       	movw	r18, r22
    1692:	ac 01       	movw	r20, r24
    1694:	bd 01       	movw	r22, r26
    1696:	cf 01       	movw	r24, r30
    1698:	08 95       	ret

0000169a <__divmodsi4>:
    169a:	97 fb       	bst	r25, 7
    169c:	09 2e       	mov	r0, r25
    169e:	05 26       	eor	r0, r21
    16a0:	0e d0       	rcall	.+28     	; 0x16be <__divmodsi4_neg1>
    16a2:	57 fd       	sbrc	r21, 7
    16a4:	04 d0       	rcall	.+8      	; 0x16ae <__divmodsi4_neg2>
    16a6:	d7 df       	rcall	.-82     	; 0x1656 <__udivmodsi4>
    16a8:	0a d0       	rcall	.+20     	; 0x16be <__divmodsi4_neg1>
    16aa:	00 1c       	adc	r0, r0
    16ac:	38 f4       	brcc	.+14     	; 0x16bc <__divmodsi4_exit>

000016ae <__divmodsi4_neg2>:
    16ae:	50 95       	com	r21
    16b0:	40 95       	com	r20
    16b2:	30 95       	com	r19
    16b4:	21 95       	neg	r18
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	4f 4f       	sbci	r20, 0xFF	; 255
    16ba:	5f 4f       	sbci	r21, 0xFF	; 255

000016bc <__divmodsi4_exit>:
    16bc:	08 95       	ret

000016be <__divmodsi4_neg1>:
    16be:	f6 f7       	brtc	.-4      	; 0x16bc <__divmodsi4_exit>
    16c0:	90 95       	com	r25
    16c2:	80 95       	com	r24
    16c4:	70 95       	com	r23
    16c6:	61 95       	neg	r22
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	08 95       	ret

000016d0 <__udivmodhi4>:
    16d0:	aa 1b       	sub	r26, r26
    16d2:	bb 1b       	sub	r27, r27
    16d4:	51 e1       	ldi	r21, 0x11	; 17
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <__udivmodhi4_ep>

000016d8 <__udivmodhi4_loop>:
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	a6 17       	cp	r26, r22
    16de:	b7 07       	cpc	r27, r23
    16e0:	10 f0       	brcs	.+4      	; 0x16e6 <__udivmodhi4_ep>
    16e2:	a6 1b       	sub	r26, r22
    16e4:	b7 0b       	sbc	r27, r23

000016e6 <__udivmodhi4_ep>:
    16e6:	88 1f       	adc	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	5a 95       	dec	r21
    16ec:	a9 f7       	brne	.-22     	; 0x16d8 <__udivmodhi4_loop>
    16ee:	80 95       	com	r24
    16f0:	90 95       	com	r25
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	08 95       	ret

000016f8 <__tablejump2__>:
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31

000016fc <__tablejump__>:
    16fc:	05 90       	lpm	r0, Z+
    16fe:	f4 91       	lpm	r31, Z+
    1700:	e0 2d       	mov	r30, r0
    1702:	09 94       	ijmp

00001704 <snprintf>:
    1704:	ae e0       	ldi	r26, 0x0E	; 14
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e8       	ldi	r30, 0x88	; 136
    170a:	fb e0       	ldi	r31, 0x0B	; 11
    170c:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__prologue_saves__+0x1c>
    1710:	0d 89       	ldd	r16, Y+21	; 0x15
    1712:	1e 89       	ldd	r17, Y+22	; 0x16
    1714:	8f 89       	ldd	r24, Y+23	; 0x17
    1716:	98 8d       	ldd	r25, Y+24	; 0x18
    1718:	97 ff       	sbrs	r25, 7
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <snprintf+0x1c>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e8       	ldi	r25, 0x80	; 128
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	1a 83       	std	Y+2, r17	; 0x02
    1728:	09 83       	std	Y+1, r16	; 0x01
    172a:	86 e0       	ldi	r24, 0x06	; 6
    172c:	8c 83       	std	Y+4, r24	; 0x04
    172e:	9e 01       	movw	r18, r28
    1730:	25 5e       	subi	r18, 0xE5	; 229
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	ce 01       	movw	r24, r28
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	69 8d       	ldd	r22, Y+25	; 0x19
    173a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173c:	a9 01       	movw	r20, r18
    173e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <vfprintf>
    1742:	4d 81       	ldd	r20, Y+5	; 0x05
    1744:	5e 81       	ldd	r21, Y+6	; 0x06
    1746:	57 fd       	sbrc	r21, 7
    1748:	0a c0       	rjmp	.+20     	; 0x175e <snprintf+0x5a>
    174a:	2f 81       	ldd	r18, Y+7	; 0x07
    174c:	38 85       	ldd	r19, Y+8	; 0x08
    174e:	42 17       	cp	r20, r18
    1750:	53 07       	cpc	r21, r19
    1752:	0c f4       	brge	.+2      	; 0x1756 <snprintf+0x52>
    1754:	9a 01       	movw	r18, r20
    1756:	02 0f       	add	r16, r18
    1758:	13 1f       	adc	r17, r19
    175a:	f8 01       	movw	r30, r16
    175c:	10 82       	st	Z, r1
    175e:	2e 96       	adiw	r28, 0x0e	; 14
    1760:	e4 e0       	ldi	r30, 0x04	; 4
    1762:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__epilogue_restores__+0x1c>

00001766 <sprintf>:
    1766:	ae e0       	ldi	r26, 0x0E	; 14
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e9 eb       	ldi	r30, 0xB9	; 185
    176c:	fb e0       	ldi	r31, 0x0B	; 11
    176e:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__prologue_saves__+0x1c>
    1772:	0d 89       	ldd	r16, Y+21	; 0x15
    1774:	1e 89       	ldd	r17, Y+22	; 0x16
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	8c 83       	std	Y+4, r24	; 0x04
    177a:	1a 83       	std	Y+2, r17	; 0x02
    177c:	09 83       	std	Y+1, r16	; 0x01
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	9f e7       	ldi	r25, 0x7F	; 127
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
    1786:	9e 01       	movw	r18, r28
    1788:	27 5e       	subi	r18, 0xE7	; 231
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	6f 89       	ldd	r22, Y+23	; 0x17
    1792:	78 8d       	ldd	r23, Y+24	; 0x18
    1794:	a9 01       	movw	r20, r18
    1796:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <vfprintf>
    179a:	2f 81       	ldd	r18, Y+7	; 0x07
    179c:	38 85       	ldd	r19, Y+8	; 0x08
    179e:	02 0f       	add	r16, r18
    17a0:	13 1f       	adc	r17, r19
    17a2:	f8 01       	movw	r30, r16
    17a4:	10 82       	st	Z, r1
    17a6:	2e 96       	adiw	r28, 0x0e	; 14
    17a8:	e4 e0       	ldi	r30, 0x04	; 4
    17aa:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__epilogue_restores__+0x1c>

000017ae <vfprintf>:
    17ae:	ab e0       	ldi	r26, 0x0B	; 11
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ed ed       	ldi	r30, 0xDD	; 221
    17b4:	fb e0       	ldi	r31, 0x0B	; 11
    17b6:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__prologue_saves__>
    17ba:	3c 01       	movw	r6, r24
    17bc:	2b 01       	movw	r4, r22
    17be:	5a 01       	movw	r10, r20
    17c0:	fc 01       	movw	r30, r24
    17c2:	17 82       	std	Z+7, r1	; 0x07
    17c4:	16 82       	std	Z+6, r1	; 0x06
    17c6:	83 81       	ldd	r24, Z+3	; 0x03
    17c8:	81 fd       	sbrc	r24, 1
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <vfprintf+0x24>
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	7f ef       	ldi	r23, 0xFF	; 255
    17d0:	c6 c1       	rjmp	.+908    	; 0x1b5e <vfprintf+0x3b0>
    17d2:	9a e0       	ldi	r25, 0x0A	; 10
    17d4:	89 2e       	mov	r8, r25
    17d6:	1e 01       	movw	r2, r28
    17d8:	08 94       	sec
    17da:	21 1c       	adc	r2, r1
    17dc:	31 1c       	adc	r3, r1
    17de:	f3 01       	movw	r30, r6
    17e0:	23 81       	ldd	r18, Z+3	; 0x03
    17e2:	f2 01       	movw	r30, r4
    17e4:	23 fd       	sbrc	r18, 3
    17e6:	85 91       	lpm	r24, Z+
    17e8:	23 ff       	sbrs	r18, 3
    17ea:	81 91       	ld	r24, Z+
    17ec:	2f 01       	movw	r4, r30
    17ee:	88 23       	and	r24, r24
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <vfprintf+0x46>
    17f2:	b2 c1       	rjmp	.+868    	; 0x1b58 <vfprintf+0x3aa>
    17f4:	85 32       	cpi	r24, 0x25	; 37
    17f6:	39 f4       	brne	.+14     	; 0x1806 <vfprintf+0x58>
    17f8:	23 fd       	sbrc	r18, 3
    17fa:	85 91       	lpm	r24, Z+
    17fc:	23 ff       	sbrs	r18, 3
    17fe:	81 91       	ld	r24, Z+
    1800:	2f 01       	movw	r4, r30
    1802:	85 32       	cpi	r24, 0x25	; 37
    1804:	29 f4       	brne	.+10     	; 0x1810 <vfprintf+0x62>
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	b3 01       	movw	r22, r6
    180a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    180e:	e7 cf       	rjmp	.-50     	; 0x17de <vfprintf+0x30>
    1810:	98 2f       	mov	r25, r24
    1812:	ff 24       	eor	r15, r15
    1814:	ee 24       	eor	r14, r14
    1816:	99 24       	eor	r9, r9
    1818:	ff e1       	ldi	r31, 0x1F	; 31
    181a:	ff 15       	cp	r31, r15
    181c:	d0 f0       	brcs	.+52     	; 0x1852 <vfprintf+0xa4>
    181e:	9b 32       	cpi	r25, 0x2B	; 43
    1820:	69 f0       	breq	.+26     	; 0x183c <vfprintf+0x8e>
    1822:	9c 32       	cpi	r25, 0x2C	; 44
    1824:	28 f4       	brcc	.+10     	; 0x1830 <vfprintf+0x82>
    1826:	90 32       	cpi	r25, 0x20	; 32
    1828:	59 f0       	breq	.+22     	; 0x1840 <vfprintf+0x92>
    182a:	93 32       	cpi	r25, 0x23	; 35
    182c:	91 f4       	brne	.+36     	; 0x1852 <vfprintf+0xa4>
    182e:	0e c0       	rjmp	.+28     	; 0x184c <vfprintf+0x9e>
    1830:	9d 32       	cpi	r25, 0x2D	; 45
    1832:	49 f0       	breq	.+18     	; 0x1846 <vfprintf+0x98>
    1834:	90 33       	cpi	r25, 0x30	; 48
    1836:	69 f4       	brne	.+26     	; 0x1852 <vfprintf+0xa4>
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	24 c0       	rjmp	.+72     	; 0x1884 <vfprintf+0xd6>
    183c:	52 e0       	ldi	r21, 0x02	; 2
    183e:	f5 2a       	or	r15, r21
    1840:	84 e0       	ldi	r24, 0x04	; 4
    1842:	f8 2a       	or	r15, r24
    1844:	28 c0       	rjmp	.+80     	; 0x1896 <vfprintf+0xe8>
    1846:	98 e0       	ldi	r25, 0x08	; 8
    1848:	f9 2a       	or	r15, r25
    184a:	25 c0       	rjmp	.+74     	; 0x1896 <vfprintf+0xe8>
    184c:	e0 e1       	ldi	r30, 0x10	; 16
    184e:	fe 2a       	or	r15, r30
    1850:	22 c0       	rjmp	.+68     	; 0x1896 <vfprintf+0xe8>
    1852:	f7 fc       	sbrc	r15, 7
    1854:	29 c0       	rjmp	.+82     	; 0x18a8 <vfprintf+0xfa>
    1856:	89 2f       	mov	r24, r25
    1858:	80 53       	subi	r24, 0x30	; 48
    185a:	8a 30       	cpi	r24, 0x0A	; 10
    185c:	70 f4       	brcc	.+28     	; 0x187a <vfprintf+0xcc>
    185e:	f6 fe       	sbrs	r15, 6
    1860:	05 c0       	rjmp	.+10     	; 0x186c <vfprintf+0xbe>
    1862:	98 9c       	mul	r9, r8
    1864:	90 2c       	mov	r9, r0
    1866:	11 24       	eor	r1, r1
    1868:	98 0e       	add	r9, r24
    186a:	15 c0       	rjmp	.+42     	; 0x1896 <vfprintf+0xe8>
    186c:	e8 9c       	mul	r14, r8
    186e:	e0 2c       	mov	r14, r0
    1870:	11 24       	eor	r1, r1
    1872:	e8 0e       	add	r14, r24
    1874:	f0 e2       	ldi	r31, 0x20	; 32
    1876:	ff 2a       	or	r15, r31
    1878:	0e c0       	rjmp	.+28     	; 0x1896 <vfprintf+0xe8>
    187a:	9e 32       	cpi	r25, 0x2E	; 46
    187c:	29 f4       	brne	.+10     	; 0x1888 <vfprintf+0xda>
    187e:	f6 fc       	sbrc	r15, 6
    1880:	6b c1       	rjmp	.+726    	; 0x1b58 <vfprintf+0x3aa>
    1882:	40 e4       	ldi	r20, 0x40	; 64
    1884:	f4 2a       	or	r15, r20
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <vfprintf+0xe8>
    1888:	9c 36       	cpi	r25, 0x6C	; 108
    188a:	19 f4       	brne	.+6      	; 0x1892 <vfprintf+0xe4>
    188c:	50 e8       	ldi	r21, 0x80	; 128
    188e:	f5 2a       	or	r15, r21
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <vfprintf+0xe8>
    1892:	98 36       	cpi	r25, 0x68	; 104
    1894:	49 f4       	brne	.+18     	; 0x18a8 <vfprintf+0xfa>
    1896:	f2 01       	movw	r30, r4
    1898:	23 fd       	sbrc	r18, 3
    189a:	95 91       	lpm	r25, Z+
    189c:	23 ff       	sbrs	r18, 3
    189e:	91 91       	ld	r25, Z+
    18a0:	2f 01       	movw	r4, r30
    18a2:	99 23       	and	r25, r25
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <vfprintf+0xfa>
    18a6:	b8 cf       	rjmp	.-144    	; 0x1818 <vfprintf+0x6a>
    18a8:	89 2f       	mov	r24, r25
    18aa:	85 54       	subi	r24, 0x45	; 69
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	18 f0       	brcs	.+6      	; 0x18b6 <vfprintf+0x108>
    18b0:	80 52       	subi	r24, 0x20	; 32
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	38 f4       	brcc	.+14     	; 0x18c4 <vfprintf+0x116>
    18b6:	44 e0       	ldi	r20, 0x04	; 4
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	a4 0e       	add	r10, r20
    18bc:	b5 1e       	adc	r11, r21
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	59 83       	std	Y+1, r21	; 0x01
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <vfprintf+0x134>
    18c4:	93 36       	cpi	r25, 0x63	; 99
    18c6:	31 f0       	breq	.+12     	; 0x18d4 <vfprintf+0x126>
    18c8:	93 37       	cpi	r25, 0x73	; 115
    18ca:	79 f0       	breq	.+30     	; 0x18ea <vfprintf+0x13c>
    18cc:	93 35       	cpi	r25, 0x53	; 83
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <vfprintf+0x124>
    18d0:	56 c0       	rjmp	.+172    	; 0x197e <vfprintf+0x1d0>
    18d2:	20 c0       	rjmp	.+64     	; 0x1914 <vfprintf+0x166>
    18d4:	f5 01       	movw	r30, r10
    18d6:	80 81       	ld	r24, Z
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	42 e0       	ldi	r20, 0x02	; 2
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	a4 0e       	add	r10, r20
    18e0:	b5 1e       	adc	r11, r21
    18e2:	61 01       	movw	r12, r2
    18e4:	01 e0       	ldi	r16, 0x01	; 1
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	12 c0       	rjmp	.+36     	; 0x190e <vfprintf+0x160>
    18ea:	f5 01       	movw	r30, r10
    18ec:	c0 80       	ld	r12, Z
    18ee:	d1 80       	ldd	r13, Z+1	; 0x01
    18f0:	f6 fc       	sbrc	r15, 6
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <vfprintf+0x14c>
    18f4:	6f ef       	ldi	r22, 0xFF	; 255
    18f6:	7f ef       	ldi	r23, 0xFF	; 255
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x150>
    18fa:	69 2d       	mov	r22, r9
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	42 e0       	ldi	r20, 0x02	; 2
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	a4 0e       	add	r10, r20
    1904:	b5 1e       	adc	r11, r21
    1906:	c6 01       	movw	r24, r12
    1908:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <strnlen>
    190c:	8c 01       	movw	r16, r24
    190e:	5f e7       	ldi	r21, 0x7F	; 127
    1910:	f5 22       	and	r15, r21
    1912:	14 c0       	rjmp	.+40     	; 0x193c <vfprintf+0x18e>
    1914:	f5 01       	movw	r30, r10
    1916:	c0 80       	ld	r12, Z
    1918:	d1 80       	ldd	r13, Z+1	; 0x01
    191a:	f6 fc       	sbrc	r15, 6
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x176>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x17a>
    1924:	69 2d       	mov	r22, r9
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	42 e0       	ldi	r20, 0x02	; 2
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	a4 0e       	add	r10, r20
    192e:	b5 1e       	adc	r11, r21
    1930:	c6 01       	movw	r24, r12
    1932:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <strnlen_P>
    1936:	8c 01       	movw	r16, r24
    1938:	50 e8       	ldi	r21, 0x80	; 128
    193a:	f5 2a       	or	r15, r21
    193c:	f3 fe       	sbrs	r15, 3
    193e:	07 c0       	rjmp	.+14     	; 0x194e <vfprintf+0x1a0>
    1940:	1a c0       	rjmp	.+52     	; 0x1976 <vfprintf+0x1c8>
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	b3 01       	movw	r22, r6
    1948:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    194c:	ea 94       	dec	r14
    194e:	8e 2d       	mov	r24, r14
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	08 17       	cp	r16, r24
    1954:	19 07       	cpc	r17, r25
    1956:	a8 f3       	brcs	.-22     	; 0x1942 <vfprintf+0x194>
    1958:	0e c0       	rjmp	.+28     	; 0x1976 <vfprintf+0x1c8>
    195a:	f6 01       	movw	r30, r12
    195c:	f7 fc       	sbrc	r15, 7
    195e:	85 91       	lpm	r24, Z+
    1960:	f7 fe       	sbrs	r15, 7
    1962:	81 91       	ld	r24, Z+
    1964:	6f 01       	movw	r12, r30
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	b3 01       	movw	r22, r6
    196a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    196e:	e1 10       	cpse	r14, r1
    1970:	ea 94       	dec	r14
    1972:	01 50       	subi	r16, 0x01	; 1
    1974:	10 40       	sbci	r17, 0x00	; 0
    1976:	01 15       	cp	r16, r1
    1978:	11 05       	cpc	r17, r1
    197a:	79 f7       	brne	.-34     	; 0x195a <vfprintf+0x1ac>
    197c:	ea c0       	rjmp	.+468    	; 0x1b52 <vfprintf+0x3a4>
    197e:	94 36       	cpi	r25, 0x64	; 100
    1980:	11 f0       	breq	.+4      	; 0x1986 <vfprintf+0x1d8>
    1982:	99 36       	cpi	r25, 0x69	; 105
    1984:	69 f5       	brne	.+90     	; 0x19e0 <vfprintf+0x232>
    1986:	f7 fe       	sbrs	r15, 7
    1988:	08 c0       	rjmp	.+16     	; 0x199a <vfprintf+0x1ec>
    198a:	f5 01       	movw	r30, r10
    198c:	20 81       	ld	r18, Z
    198e:	31 81       	ldd	r19, Z+1	; 0x01
    1990:	42 81       	ldd	r20, Z+2	; 0x02
    1992:	53 81       	ldd	r21, Z+3	; 0x03
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0a c0       	rjmp	.+20     	; 0x19ae <vfprintf+0x200>
    199a:	f5 01       	movw	r30, r10
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	9c 01       	movw	r18, r24
    19a2:	44 27       	eor	r20, r20
    19a4:	37 fd       	sbrc	r19, 7
    19a6:	40 95       	com	r20
    19a8:	54 2f       	mov	r21, r20
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a8 0e       	add	r10, r24
    19b0:	b9 1e       	adc	r11, r25
    19b2:	9f e6       	ldi	r25, 0x6F	; 111
    19b4:	f9 22       	and	r15, r25
    19b6:	57 ff       	sbrs	r21, 7
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <vfprintf+0x21e>
    19ba:	50 95       	com	r21
    19bc:	40 95       	com	r20
    19be:	30 95       	com	r19
    19c0:	21 95       	neg	r18
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	4f 4f       	sbci	r20, 0xFF	; 255
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	e0 e8       	ldi	r30, 0x80	; 128
    19ca:	fe 2a       	or	r15, r30
    19cc:	ca 01       	movw	r24, r20
    19ce:	b9 01       	movw	r22, r18
    19d0:	a1 01       	movw	r20, r2
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__ultoa_invert>
    19da:	d8 2e       	mov	r13, r24
    19dc:	d2 18       	sub	r13, r2
    19de:	40 c0       	rjmp	.+128    	; 0x1a60 <vfprintf+0x2b2>
    19e0:	95 37       	cpi	r25, 0x75	; 117
    19e2:	29 f4       	brne	.+10     	; 0x19ee <vfprintf+0x240>
    19e4:	1f 2d       	mov	r17, r15
    19e6:	1f 7e       	andi	r17, 0xEF	; 239
    19e8:	2a e0       	ldi	r18, 0x0A	; 10
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	1d c0       	rjmp	.+58     	; 0x1a28 <vfprintf+0x27a>
    19ee:	1f 2d       	mov	r17, r15
    19f0:	19 7f       	andi	r17, 0xF9	; 249
    19f2:	9f 36       	cpi	r25, 0x6F	; 111
    19f4:	61 f0       	breq	.+24     	; 0x1a0e <vfprintf+0x260>
    19f6:	90 37       	cpi	r25, 0x70	; 112
    19f8:	20 f4       	brcc	.+8      	; 0x1a02 <vfprintf+0x254>
    19fa:	98 35       	cpi	r25, 0x58	; 88
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <vfprintf+0x252>
    19fe:	ac c0       	rjmp	.+344    	; 0x1b58 <vfprintf+0x3aa>
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <vfprintf+0x272>
    1a02:	90 37       	cpi	r25, 0x70	; 112
    1a04:	39 f0       	breq	.+14     	; 0x1a14 <vfprintf+0x266>
    1a06:	98 37       	cpi	r25, 0x78	; 120
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <vfprintf+0x25e>
    1a0a:	a6 c0       	rjmp	.+332    	; 0x1b58 <vfprintf+0x3aa>
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <vfprintf+0x268>
    1a0e:	28 e0       	ldi	r18, 0x08	; 8
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <vfprintf+0x27a>
    1a14:	10 61       	ori	r17, 0x10	; 16
    1a16:	14 fd       	sbrc	r17, 4
    1a18:	14 60       	ori	r17, 0x04	; 4
    1a1a:	20 e1       	ldi	r18, 0x10	; 16
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <vfprintf+0x27a>
    1a20:	14 fd       	sbrc	r17, 4
    1a22:	16 60       	ori	r17, 0x06	; 6
    1a24:	20 e1       	ldi	r18, 0x10	; 16
    1a26:	32 e0       	ldi	r19, 0x02	; 2
    1a28:	17 ff       	sbrs	r17, 7
    1a2a:	08 c0       	rjmp	.+16     	; 0x1a3c <vfprintf+0x28e>
    1a2c:	f5 01       	movw	r30, r10
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	44 e0       	ldi	r20, 0x04	; 4
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <vfprintf+0x29e>
    1a3c:	f5 01       	movw	r30, r10
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	bc 01       	movw	r22, r24
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	a4 0e       	add	r10, r20
    1a4e:	b5 1e       	adc	r11, r21
    1a50:	a1 01       	movw	r20, r2
    1a52:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__ultoa_invert>
    1a56:	d8 2e       	mov	r13, r24
    1a58:	d2 18       	sub	r13, r2
    1a5a:	8f e7       	ldi	r24, 0x7F	; 127
    1a5c:	f8 2e       	mov	r15, r24
    1a5e:	f1 22       	and	r15, r17
    1a60:	f6 fe       	sbrs	r15, 6
    1a62:	0b c0       	rjmp	.+22     	; 0x1a7a <vfprintf+0x2cc>
    1a64:	5e ef       	ldi	r21, 0xFE	; 254
    1a66:	f5 22       	and	r15, r21
    1a68:	d9 14       	cp	r13, r9
    1a6a:	38 f4       	brcc	.+14     	; 0x1a7a <vfprintf+0x2cc>
    1a6c:	f4 fe       	sbrs	r15, 4
    1a6e:	07 c0       	rjmp	.+14     	; 0x1a7e <vfprintf+0x2d0>
    1a70:	f2 fc       	sbrc	r15, 2
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <vfprintf+0x2d0>
    1a74:	8f ee       	ldi	r24, 0xEF	; 239
    1a76:	f8 22       	and	r15, r24
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfprintf+0x2d0>
    1a7a:	1d 2d       	mov	r17, r13
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <vfprintf+0x2d2>
    1a7e:	19 2d       	mov	r17, r9
    1a80:	f4 fe       	sbrs	r15, 4
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <vfprintf+0x2f0>
    1a84:	fe 01       	movw	r30, r28
    1a86:	ed 0d       	add	r30, r13
    1a88:	f1 1d       	adc	r31, r1
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 33       	cpi	r24, 0x30	; 48
    1a8e:	19 f4       	brne	.+6      	; 0x1a96 <vfprintf+0x2e8>
    1a90:	99 ee       	ldi	r25, 0xE9	; 233
    1a92:	f9 22       	and	r15, r25
    1a94:	08 c0       	rjmp	.+16     	; 0x1aa6 <vfprintf+0x2f8>
    1a96:	1f 5f       	subi	r17, 0xFF	; 255
    1a98:	f2 fe       	sbrs	r15, 2
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <vfprintf+0x2f8>
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <vfprintf+0x2f6>
    1a9e:	8f 2d       	mov	r24, r15
    1aa0:	86 78       	andi	r24, 0x86	; 134
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <vfprintf+0x2f8>
    1aa4:	1f 5f       	subi	r17, 0xFF	; 255
    1aa6:	0f 2d       	mov	r16, r15
    1aa8:	f3 fc       	sbrc	r15, 3
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <vfprintf+0x326>
    1aac:	f0 fe       	sbrs	r15, 0
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <vfprintf+0x320>
    1ab0:	1e 15       	cp	r17, r14
    1ab2:	10 f0       	brcs	.+4      	; 0x1ab8 <vfprintf+0x30a>
    1ab4:	9d 2c       	mov	r9, r13
    1ab6:	0b c0       	rjmp	.+22     	; 0x1ace <vfprintf+0x320>
    1ab8:	9d 2c       	mov	r9, r13
    1aba:	9e 0c       	add	r9, r14
    1abc:	91 1a       	sub	r9, r17
    1abe:	1e 2d       	mov	r17, r14
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <vfprintf+0x320>
    1ac2:	80 e2       	ldi	r24, 0x20	; 32
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	b3 01       	movw	r22, r6
    1ac8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    1acc:	1f 5f       	subi	r17, 0xFF	; 255
    1ace:	1e 15       	cp	r17, r14
    1ad0:	c0 f3       	brcs	.-16     	; 0x1ac2 <vfprintf+0x314>
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <vfprintf+0x32e>
    1ad4:	1e 15       	cp	r17, r14
    1ad6:	10 f4       	brcc	.+4      	; 0x1adc <vfprintf+0x32e>
    1ad8:	e1 1a       	sub	r14, r17
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <vfprintf+0x330>
    1adc:	ee 24       	eor	r14, r14
    1ade:	04 ff       	sbrs	r16, 4
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <vfprintf+0x352>
    1ae2:	80 e3       	ldi	r24, 0x30	; 48
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	b3 01       	movw	r22, r6
    1ae8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    1aec:	02 ff       	sbrs	r16, 2
    1aee:	1d c0       	rjmp	.+58     	; 0x1b2a <vfprintf+0x37c>
    1af0:	01 fd       	sbrc	r16, 1
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <vfprintf+0x34c>
    1af4:	88 e7       	ldi	r24, 0x78	; 120
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e c0       	rjmp	.+28     	; 0x1b16 <vfprintf+0x368>
    1afa:	88 e5       	ldi	r24, 0x58	; 88
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <vfprintf+0x368>
    1b00:	80 2f       	mov	r24, r16
    1b02:	86 78       	andi	r24, 0x86	; 134
    1b04:	91 f0       	breq	.+36     	; 0x1b2a <vfprintf+0x37c>
    1b06:	01 ff       	sbrs	r16, 1
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <vfprintf+0x360>
    1b0a:	8b e2       	ldi	r24, 0x2B	; 43
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <vfprintf+0x362>
    1b0e:	80 e2       	ldi	r24, 0x20	; 32
    1b10:	f7 fc       	sbrc	r15, 7
    1b12:	8d e2       	ldi	r24, 0x2D	; 45
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	b3 01       	movw	r22, r6
    1b18:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <vfprintf+0x37c>
    1b1e:	80 e3       	ldi	r24, 0x30	; 48
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	b3 01       	movw	r22, r6
    1b24:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    1b28:	9a 94       	dec	r9
    1b2a:	d9 14       	cp	r13, r9
    1b2c:	c0 f3       	brcs	.-16     	; 0x1b1e <vfprintf+0x370>
    1b2e:	da 94       	dec	r13
    1b30:	f1 01       	movw	r30, r2
    1b32:	ed 0d       	add	r30, r13
    1b34:	f1 1d       	adc	r31, r1
    1b36:	80 81       	ld	r24, Z
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	b3 01       	movw	r22, r6
    1b3c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    1b40:	dd 20       	and	r13, r13
    1b42:	a9 f7       	brne	.-22     	; 0x1b2e <vfprintf+0x380>
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <vfprintf+0x3a4>
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	b3 01       	movw	r22, r6
    1b4c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fputc>
    1b50:	ea 94       	dec	r14
    1b52:	ee 20       	and	r14, r14
    1b54:	c1 f7       	brne	.-16     	; 0x1b46 <vfprintf+0x398>
    1b56:	43 ce       	rjmp	.-890    	; 0x17de <vfprintf+0x30>
    1b58:	f3 01       	movw	r30, r6
    1b5a:	66 81       	ldd	r22, Z+6	; 0x06
    1b5c:	77 81       	ldd	r23, Z+7	; 0x07
    1b5e:	cb 01       	movw	r24, r22
    1b60:	2b 96       	adiw	r28, 0x0b	; 11
    1b62:	e2 e1       	ldi	r30, 0x12	; 18
    1b64:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__epilogue_restores__>

00001b68 <strnlen_P>:
    1b68:	fc 01       	movw	r30, r24
    1b6a:	05 90       	lpm	r0, Z+
    1b6c:	61 50       	subi	r22, 0x01	; 1
    1b6e:	70 40       	sbci	r23, 0x00	; 0
    1b70:	01 10       	cpse	r0, r1
    1b72:	d8 f7       	brcc	.-10     	; 0x1b6a <strnlen_P+0x2>
    1b74:	80 95       	com	r24
    1b76:	90 95       	com	r25
    1b78:	8e 0f       	add	r24, r30
    1b7a:	9f 1f       	adc	r25, r31
    1b7c:	08 95       	ret

00001b7e <strnlen>:
    1b7e:	fc 01       	movw	r30, r24
    1b80:	61 50       	subi	r22, 0x01	; 1
    1b82:	70 40       	sbci	r23, 0x00	; 0
    1b84:	01 90       	ld	r0, Z+
    1b86:	01 10       	cpse	r0, r1
    1b88:	d8 f7       	brcc	.-10     	; 0x1b80 <strnlen+0x2>
    1b8a:	80 95       	com	r24
    1b8c:	90 95       	com	r25
    1b8e:	8e 0f       	add	r24, r30
    1b90:	9f 1f       	adc	r25, r31
    1b92:	08 95       	ret

00001b94 <fputc>:
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	8c 01       	movw	r16, r24
    1b9e:	eb 01       	movw	r28, r22
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	81 ff       	sbrs	r24, 1
    1ba4:	1b c0       	rjmp	.+54     	; 0x1bdc <fputc+0x48>
    1ba6:	82 ff       	sbrs	r24, 2
    1ba8:	0d c0       	rjmp	.+26     	; 0x1bc4 <fputc+0x30>
    1baa:	2e 81       	ldd	r18, Y+6	; 0x06
    1bac:	3f 81       	ldd	r19, Y+7	; 0x07
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	64 f4       	brge	.+24     	; 0x1bd0 <fputc+0x3c>
    1bb8:	e8 81       	ld	r30, Y
    1bba:	f9 81       	ldd	r31, Y+1	; 0x01
    1bbc:	01 93       	st	Z+, r16
    1bbe:	f9 83       	std	Y+1, r31	; 0x01
    1bc0:	e8 83       	st	Y, r30
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <fputc+0x3c>
    1bc4:	e8 85       	ldd	r30, Y+8	; 0x08
    1bc6:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc8:	80 2f       	mov	r24, r16
    1bca:	09 95       	icall
    1bcc:	89 2b       	or	r24, r25
    1bce:	31 f4       	brne	.+12     	; 0x1bdc <fputc+0x48>
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	9f 83       	std	Y+7, r25	; 0x07
    1bd8:	8e 83       	std	Y+6, r24	; 0x06
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <fputc+0x4c>
    1bdc:	0f ef       	ldi	r16, 0xFF	; 255
    1bde:	1f ef       	ldi	r17, 0xFF	; 255
    1be0:	c8 01       	movw	r24, r16
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <__ultoa_invert>:
    1bec:	fa 01       	movw	r30, r20
    1bee:	aa 27       	eor	r26, r26
    1bf0:	28 30       	cpi	r18, 0x08	; 8
    1bf2:	51 f1       	breq	.+84     	; 0x1c48 <__ultoa_invert+0x5c>
    1bf4:	20 31       	cpi	r18, 0x10	; 16
    1bf6:	81 f1       	breq	.+96     	; 0x1c58 <__ultoa_invert+0x6c>
    1bf8:	e8 94       	clt
    1bfa:	6f 93       	push	r22
    1bfc:	6e 7f       	andi	r22, 0xFE	; 254
    1bfe:	6e 5f       	subi	r22, 0xFE	; 254
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	8f 4f       	sbci	r24, 0xFF	; 255
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	af 4f       	sbci	r26, 0xFF	; 255
    1c08:	b1 e0       	ldi	r27, 0x01	; 1
    1c0a:	3e d0       	rcall	.+124    	; 0x1c88 <__ultoa_invert+0x9c>
    1c0c:	b4 e0       	ldi	r27, 0x04	; 4
    1c0e:	3c d0       	rcall	.+120    	; 0x1c88 <__ultoa_invert+0x9c>
    1c10:	67 0f       	add	r22, r23
    1c12:	78 1f       	adc	r23, r24
    1c14:	89 1f       	adc	r24, r25
    1c16:	9a 1f       	adc	r25, r26
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	68 0f       	add	r22, r24
    1c1c:	79 1f       	adc	r23, r25
    1c1e:	8a 1f       	adc	r24, r26
    1c20:	91 1d       	adc	r25, r1
    1c22:	a1 1d       	adc	r26, r1
    1c24:	6a 0f       	add	r22, r26
    1c26:	71 1d       	adc	r23, r1
    1c28:	81 1d       	adc	r24, r1
    1c2a:	91 1d       	adc	r25, r1
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	20 d0       	rcall	.+64     	; 0x1c70 <__ultoa_invert+0x84>
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <__ultoa_invert+0x48>
    1c32:	68 94       	set
    1c34:	3f 91       	pop	r19
    1c36:	2a e0       	ldi	r18, 0x0A	; 10
    1c38:	26 9f       	mul	r18, r22
    1c3a:	11 24       	eor	r1, r1
    1c3c:	30 19       	sub	r19, r0
    1c3e:	30 5d       	subi	r19, 0xD0	; 208
    1c40:	31 93       	st	Z+, r19
    1c42:	de f6       	brtc	.-74     	; 0x1bfa <__ultoa_invert+0xe>
    1c44:	cf 01       	movw	r24, r30
    1c46:	08 95       	ret
    1c48:	46 2f       	mov	r20, r22
    1c4a:	47 70       	andi	r20, 0x07	; 7
    1c4c:	40 5d       	subi	r20, 0xD0	; 208
    1c4e:	41 93       	st	Z+, r20
    1c50:	b3 e0       	ldi	r27, 0x03	; 3
    1c52:	0f d0       	rcall	.+30     	; 0x1c72 <__ultoa_invert+0x86>
    1c54:	c9 f7       	brne	.-14     	; 0x1c48 <__ultoa_invert+0x5c>
    1c56:	f6 cf       	rjmp	.-20     	; 0x1c44 <__ultoa_invert+0x58>
    1c58:	46 2f       	mov	r20, r22
    1c5a:	4f 70       	andi	r20, 0x0F	; 15
    1c5c:	40 5d       	subi	r20, 0xD0	; 208
    1c5e:	4a 33       	cpi	r20, 0x3A	; 58
    1c60:	18 f0       	brcs	.+6      	; 0x1c68 <__ultoa_invert+0x7c>
    1c62:	49 5d       	subi	r20, 0xD9	; 217
    1c64:	31 fd       	sbrc	r19, 1
    1c66:	40 52       	subi	r20, 0x20	; 32
    1c68:	41 93       	st	Z+, r20
    1c6a:	02 d0       	rcall	.+4      	; 0x1c70 <__ultoa_invert+0x84>
    1c6c:	a9 f7       	brne	.-22     	; 0x1c58 <__ultoa_invert+0x6c>
    1c6e:	ea cf       	rjmp	.-44     	; 0x1c44 <__ultoa_invert+0x58>
    1c70:	b4 e0       	ldi	r27, 0x04	; 4
    1c72:	a6 95       	lsr	r26
    1c74:	97 95       	ror	r25
    1c76:	87 95       	ror	r24
    1c78:	77 95       	ror	r23
    1c7a:	67 95       	ror	r22
    1c7c:	ba 95       	dec	r27
    1c7e:	c9 f7       	brne	.-14     	; 0x1c72 <__ultoa_invert+0x86>
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	61 05       	cpc	r22, r1
    1c84:	71 05       	cpc	r23, r1
    1c86:	08 95       	ret
    1c88:	9b 01       	movw	r18, r22
    1c8a:	ac 01       	movw	r20, r24
    1c8c:	0a 2e       	mov	r0, r26
    1c8e:	06 94       	lsr	r0
    1c90:	57 95       	ror	r21
    1c92:	47 95       	ror	r20
    1c94:	37 95       	ror	r19
    1c96:	27 95       	ror	r18
    1c98:	ba 95       	dec	r27
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__ultoa_invert+0xa2>
    1c9c:	62 0f       	add	r22, r18
    1c9e:	73 1f       	adc	r23, r19
    1ca0:	84 1f       	adc	r24, r20
    1ca2:	95 1f       	adc	r25, r21
    1ca4:	a0 1d       	adc	r26, r0
    1ca6:	08 95       	ret

00001ca8 <__prologue_saves__>:
    1ca8:	2f 92       	push	r2
    1caa:	3f 92       	push	r3
    1cac:	4f 92       	push	r4
    1cae:	5f 92       	push	r5
    1cb0:	6f 92       	push	r6
    1cb2:	7f 92       	push	r7
    1cb4:	8f 92       	push	r8
    1cb6:	9f 92       	push	r9
    1cb8:	af 92       	push	r10
    1cba:	bf 92       	push	r11
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	ca 1b       	sub	r28, r26
    1cd2:	db 0b       	sbc	r29, r27
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	09 94       	ijmp

00001ce0 <__epilogue_restores__>:
    1ce0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ce2:	39 88       	ldd	r3, Y+17	; 0x11
    1ce4:	48 88       	ldd	r4, Y+16	; 0x10
    1ce6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ce8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cf0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cf2:	b9 84       	ldd	r11, Y+9	; 0x09
    1cf4:	c8 84       	ldd	r12, Y+8	; 0x08
    1cf6:	df 80       	ldd	r13, Y+7	; 0x07
    1cf8:	ee 80       	ldd	r14, Y+6	; 0x06
    1cfa:	fd 80       	ldd	r15, Y+5	; 0x05
    1cfc:	0c 81       	ldd	r16, Y+4	; 0x04
    1cfe:	1b 81       	ldd	r17, Y+3	; 0x03
    1d00:	aa 81       	ldd	r26, Y+2	; 0x02
    1d02:	b9 81       	ldd	r27, Y+1	; 0x01
    1d04:	ce 0f       	add	r28, r30
    1d06:	d1 1d       	adc	r29, r1
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	ed 01       	movw	r28, r26
    1d14:	08 95       	ret

00001d16 <_exit>:
    1d16:	f8 94       	cli

00001d18 <__stop_program>:
    1d18:	ff cf       	rjmp	.-2      	; 0x1d18 <__stop_program>
