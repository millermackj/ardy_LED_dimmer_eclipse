
ardy_Current_Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  00001e4a  00001ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  008003cc  008003cc  000021aa  2**0
                  ALLOC
  3 .stab         00003bac  00000000  00000000  000021ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001164  00000000  00000000  00005d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000708  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000112c  00000000  00000000  000075c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000070fa  00000000  00000000  000086f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ae6  00000000  00000000  0000f7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000048a0  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bd0  00000000  00000000  00015b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002099  00000000  00000000  00016740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000045c1  00000000  00000000  000187d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a8  00000000  00000000  0001cd9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// interrupt called when tachometer pin goes from HIGH to LOW
void encoder_interrupt(){
	tach_enc.pin_state = 1;
}

void poll_encoder(long unsigned int current_time, encoder_struct* encoder){
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       4:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_1>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_2>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__vector_18>
      4c:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	44 08       	sbc	r4, r4

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ea e4       	ldi	r30, 0x4A	; 74
      d8:	fe e1       	ldi	r31, 0x1E	; 30
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	ac 3c       	cpi	r26, 0xCC	; 204
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	15 e0       	ldi	r17, 0x05	; 5
      e8:	ac ec       	ldi	r26, 0xCC	; 204
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 36       	cpi	r26, 0x64	; 100
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__tablejump__>

00000106 <.do_global_ctors_start>:
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
     10c:	0e 94 84 09 	call	0x1308	; 0x1308 <main>
     110:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z17encoder_interruptv>:
//
//}

// interrupt called when tachometer pin goes from HIGH to LOW
void encoder_interrupt(){
	tach_enc.pin_state = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 71 04 	sts	0x0471, r25
     120:	80 93 70 04 	sts	0x0470, r24
}
     124:	08 95       	ret

00000126 <_Z14calculate_tachmP14encoder_struct>:
  	}
  }
  encoder->last_state = encoder->pin_state;
}

void calculate_tach(long unsigned int current_time, encoder_struct* tach_enc){
     126:	ef 92       	push	r14
     128:	ff 92       	push	r15
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	8b 01       	movw	r16, r22
     134:	9c 01       	movw	r18, r24
     136:	ea 01       	movw	r28, r20
	if(tach_enc->last_period != 0){
     138:	4a 89       	ldd	r20, Y+18	; 0x12
     13a:	5b 89       	ldd	r21, Y+19	; 0x13
     13c:	41 15       	cp	r20, r1
     13e:	51 05       	cpc	r21, r1
     140:	09 f4       	brne	.+2      	; 0x144 <_Z14calculate_tachmP14encoder_struct+0x1e>
     142:	4b c0       	rjmp	.+150    	; 0x1da <_Z14calculate_tachmP14encoder_struct+0xb4>
		if((current_time - tach_enc->startTime) > tach_enc->max_period){
     144:	8e 81       	ldd	r24, Y+6	; 0x06
     146:	9f 81       	ldd	r25, Y+7	; 0x07
     148:	a8 85       	ldd	r26, Y+8	; 0x08
     14a:	b9 85       	ldd	r27, Y+9	; 0x09
     14c:	78 01       	movw	r14, r16
     14e:	89 01       	movw	r16, r18
     150:	e8 1a       	sub	r14, r24
     152:	f9 0a       	sbc	r15, r25
     154:	0a 0b       	sbc	r16, r26
     156:	1b 0b       	sbc	r17, r27
     158:	88 8d       	ldd	r24, Y+24	; 0x18
     15a:	99 8d       	ldd	r25, Y+25	; 0x19
     15c:	a0 e0       	ldi	r26, 0x00	; 0
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8e 15       	cp	r24, r14
     162:	9f 05       	cpc	r25, r15
     164:	a0 07       	cpc	r26, r16
     166:	b1 07       	cpc	r27, r17
     168:	28 f4       	brcc	.+10     	; 0x174 <_Z14calculate_tachmP14encoder_struct+0x4e>
			tach_enc->hertz = 0;
     16a:	1c 86       	std	Y+12, r1	; 0x0c
     16c:	1d 86       	std	Y+13, r1	; 0x0d
     16e:	1e 86       	std	Y+14, r1	; 0x0e
     170:	1f 86       	std	Y+15, r1	; 0x0f
     172:	33 c0       	rjmp	.+102    	; 0x1da <_Z14calculate_tachmP14encoder_struct+0xb4>
		}
		else if((current_time - tach_enc->startTime) > tach_enc->last_period)
     174:	ca 01       	movw	r24, r20
     176:	aa 27       	eor	r26, r26
     178:	97 fd       	sbrc	r25, 7
     17a:	a0 95       	com	r26
     17c:	ba 2f       	mov	r27, r26
     17e:	6c 89       	ldd	r22, Y+20	; 0x14
     180:	7d 89       	ldd	r23, Y+21	; 0x15
     182:	8e 15       	cp	r24, r14
     184:	9f 05       	cpc	r25, r15
     186:	a0 07       	cpc	r26, r16
     188:	b1 07       	cpc	r27, r17
     18a:	90 f4       	brcc	.+36     	; 0x1b0 <_Z14calculate_tachmP14encoder_struct+0x8a>
			tach_enc->hertz = (1000L*1000L)/((current_time - tach_enc->startTime)*tach_enc->cts_per_rev);
     18c:	9b 01       	movw	r18, r22
     18e:	44 27       	eor	r20, r20
     190:	37 fd       	sbrc	r19, 7
     192:	40 95       	com	r20
     194:	54 2f       	mov	r21, r20
     196:	c8 01       	movw	r24, r16
     198:	b7 01       	movw	r22, r14
     19a:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     19e:	9b 01       	movw	r18, r22
     1a0:	ac 01       	movw	r20, r24
     1a2:	60 e4       	ldi	r22, 0x40	; 64
     1a4:	72 e4       	ldi	r23, 0x42	; 66
     1a6:	8f e0       	ldi	r24, 0x0F	; 15
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__udivmodsi4>
     1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <_Z14calculate_tachmP14encoder_struct+0xac>
		else{
			tach_enc->hertz = (1000L*1000L)/(tach_enc->last_period*tach_enc->cts_per_rev);
     1b0:	46 9f       	mul	r20, r22
     1b2:	90 01       	movw	r18, r0
     1b4:	47 9f       	mul	r20, r23
     1b6:	30 0d       	add	r19, r0
     1b8:	56 9f       	mul	r21, r22
     1ba:	30 0d       	add	r19, r0
     1bc:	11 24       	eor	r1, r1
     1be:	44 27       	eor	r20, r20
     1c0:	37 fd       	sbrc	r19, 7
     1c2:	40 95       	com	r20
     1c4:	54 2f       	mov	r21, r20
     1c6:	60 e4       	ldi	r22, 0x40	; 64
     1c8:	72 e4       	ldi	r23, 0x42	; 66
     1ca:	8f e0       	ldi	r24, 0x0F	; 15
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     1d2:	2c 87       	std	Y+12, r18	; 0x0c
     1d4:	3d 87       	std	Y+13, r19	; 0x0d
     1d6:	4e 87       	std	Y+14, r20	; 0x0e
     1d8:	5f 87       	std	Y+15, r21	; 0x0f
		}
	}
}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <_Z10pollButtonP13button_struct>:
void calculate_voltage(volt_sensor_struct* volt_sensor){
	volt_sensor->sense_cts = ((long int)(volt_sensor->sense_cts*800L) + (long int)((analogRead(VOLT_PIN))*200L))/1000L;
	volt_sensor->voltage = map(volt_sensor->sense_cts, 0, 1023, 0, volt_sensor->max_volts);
}

int pollButton(button_struct* button) {
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	ec 01       	movw	r28, r24

	int returnVal = 0; // default value means button was not down long enough to consider it a press
	int newState = digitalRead(button->button_pin); // poll for button state
     1ee:	88 81       	ld	r24, Y
     1f0:	0e 94 20 0b 	call	0x1640	; 0x1640 <digitalRead>
     1f4:	9c 01       	movw	r18, r24

	if (button->button_state != newState) { // only proceed if there is a change of state
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	9b 81       	ldd	r25, Y+3	; 0x03
     1fa:	82 17       	cp	r24, r18
     1fc:	93 07       	cpc	r25, r19
     1fe:	b1 f1       	breq	.+108    	; 0x26c <_Z10pollButtonP13button_struct+0x84>
		button->button_state = newState;
     200:	3b 83       	std	Y+3, r19	; 0x03
     202:	2a 83       	std	Y+2, r18	; 0x02
		if (newState == btnDown) { //the button has just been pressed down so start timing
     204:	21 30       	cpi	r18, 0x01	; 1
     206:	31 05       	cpc	r19, r1
     208:	39 f4       	brne	.+14     	; 0x218 <_Z10pollButtonP13button_struct+0x30>
			button->timeOfPress = millis();
     20a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <millis>
     20e:	6c 83       	std	Y+4, r22	; 0x04
     210:	7d 83       	std	Y+5, r23	; 0x05
     212:	8e 83       	std	Y+6, r24	; 0x06
     214:	9f 83       	std	Y+7, r25	; 0x07
     216:	2a c0       	rjmp	.+84     	; 0x26c <_Z10pollButtonP13button_struct+0x84>
		}

		else { // otherwise the button has just let up so decide what to do
			long unsigned pressDuration = millis() - button->timeOfPress; // length of time button has been down
     218:	0e 94 db 09 	call	0x13b6	; 0x13b6 <millis>
     21c:	9b 01       	movw	r18, r22
     21e:	ac 01       	movw	r20, r24
     220:	8c 81       	ldd	r24, Y+4	; 0x04
     222:	9d 81       	ldd	r25, Y+5	; 0x05
     224:	ae 81       	ldd	r26, Y+6	; 0x06
     226:	bf 81       	ldd	r27, Y+7	; 0x07
     228:	28 1b       	sub	r18, r24
     22a:	39 0b       	sbc	r19, r25
     22c:	4a 0b       	sbc	r20, r26
     22e:	5b 0b       	sbc	r21, r27

			if (pressDuration >= xlongPress)
     230:	20 3d       	cpi	r18, 0xD0	; 208
     232:	87 e0       	ldi	r24, 0x07	; 7
     234:	38 07       	cpc	r19, r24
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	48 07       	cpc	r20, r24
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	58 07       	cpc	r21, r24
     23e:	18 f0       	brcs	.+6      	; 0x246 <_Z10pollButtonP13button_struct+0x5e>
     240:	20 ed       	ldi	r18, 0xD0	; 208
     242:	37 e0       	ldi	r19, 0x07	; 7
     244:	15 c0       	rjmp	.+42     	; 0x270 <_Z10pollButtonP13button_struct+0x88>
				returnVal = xlongPress;
			else if (pressDuration >= longPress) // if button is pressed for long time, return that info
     246:	28 3e       	cpi	r18, 0xE8	; 232
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	38 07       	cpc	r19, r24
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	48 07       	cpc	r20, r24
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	58 07       	cpc	r21, r24
     254:	18 f0       	brcs	.+6      	; 0x25c <_Z10pollButtonP13button_struct+0x74>
     256:	28 ee       	ldi	r18, 0xE8	; 232
     258:	33 e0       	ldi	r19, 0x03	; 3
     25a:	0a c0       	rjmp	.+20     	; 0x270 <_Z10pollButtonP13button_struct+0x88>
				returnVal = longPress;
			else if (pressDuration >= shortPress)
     25c:	24 31       	cpi	r18, 0x14	; 20
     25e:	31 05       	cpc	r19, r1
     260:	41 05       	cpc	r20, r1
     262:	51 05       	cpc	r21, r1
     264:	18 f0       	brcs	.+6      	; 0x26c <_Z10pollButtonP13button_struct+0x84>
     266:	24 e1       	ldi	r18, 0x14	; 20
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <_Z10pollButtonP13button_struct+0x88>
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
				returnVal = shortPress;
		}
	}

	return returnVal;
}
     270:	c9 01       	movw	r24, r18
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <_Z17calculate_voltageP18volt_sensor_struct>:
void calculate_current(current_sensor_struct* current_sense){
	current_sense->sense_cts = ((long int)(current_sense->sense_cts*800L) + (long int)((analogRead(CURRENT_PIN)-9)*200L))/1000L;
	current_sense->current = (int)map(current_sense->sense_cts, 0, 1023, -25000, 25000);
}

void calculate_voltage(volt_sensor_struct* volt_sensor){
     278:	8f 92       	push	r8
     27a:	9f 92       	push	r9
     27c:	af 92       	push	r10
     27e:	bf 92       	push	r11
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	4c 01       	movw	r8, r24
	volt_sensor->sense_cts = ((long int)(volt_sensor->sense_cts*800L) + (long int)((analogRead(VOLT_PIN))*200L))/1000L;
     28e:	fc 01       	movw	r30, r24
     290:	62 81       	ldd	r22, Z+2	; 0x02
     292:	73 81       	ldd	r23, Z+3	; 0x03
     294:	84 81       	ldd	r24, Z+4	; 0x04
     296:	95 81       	ldd	r25, Z+5	; 0x05
     298:	20 e2       	ldi	r18, 0x20	; 32
     29a:	33 e0       	ldi	r19, 0x03	; 3
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     2a4:	7b 01       	movw	r14, r22
     2a6:	8c 01       	movw	r16, r24
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 24 0a 	call	0x1448	; 0x1448 <analogRead>
     2ae:	aa 27       	eor	r26, r26
     2b0:	97 fd       	sbrc	r25, 7
     2b2:	a0 95       	com	r26
     2b4:	ba 2f       	mov	r27, r26
     2b6:	bc 01       	movw	r22, r24
     2b8:	cd 01       	movw	r24, r26
     2ba:	28 ec       	ldi	r18, 0xC8	; 200
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     2c6:	6e 0d       	add	r22, r14
     2c8:	7f 1d       	adc	r23, r15
     2ca:	80 1f       	adc	r24, r16
     2cc:	91 1f       	adc	r25, r17
     2ce:	28 ee       	ldi	r18, 0xE8	; 232
     2d0:	33 e0       	ldi	r19, 0x03	; 3
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     2da:	ca 01       	movw	r24, r20
     2dc:	f4 01       	movw	r30, r8
     2de:	22 83       	std	Z+2, r18	; 0x02
     2e0:	33 83       	std	Z+3, r19	; 0x03
     2e2:	44 83       	std	Z+4, r20	; 0x04
     2e4:	95 83       	std	Z+5, r25	; 0x05
	volt_sensor->voltage = map(volt_sensor->sense_cts, 0, 1023, 0, volt_sensor->max_volts);
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <_Z17calculate_voltageP18volt_sensor_struct+0x70>
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <_Z17calculate_voltageP18volt_sensor_struct+0x72>
     2ea:	46 81       	ldd	r20, Z+6	; 0x06
     2ec:	57 81       	ldd	r21, Z+7	; 0x07
     2ee:	60 85       	ldd	r22, Z+8	; 0x08
     2f0:	71 85       	ldd	r23, Z+9	; 0x09
     2f2:	ed b7       	in	r30, 0x3d	; 61
     2f4:	fe b7       	in	r31, 0x3e	; 62
     2f6:	41 83       	std	Z+1, r20	; 0x01
     2f8:	52 83       	std	Z+2, r21	; 0x02
     2fa:	63 83       	std	Z+3, r22	; 0x03
     2fc:	74 83       	std	Z+4, r23	; 0x04
     2fe:	b9 01       	movw	r22, r18
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	ef ef       	ldi	r30, 0xFF	; 255
     30a:	ee 2e       	mov	r14, r30
     30c:	e3 e0       	ldi	r30, 0x03	; 3
     30e:	fe 2e       	mov	r15, r30
     310:	01 2d       	mov	r16, r1
     312:	11 2d       	mov	r17, r1
     314:	aa 24       	eor	r10, r10
     316:	bb 24       	eor	r11, r11
     318:	65 01       	movw	r12, r10
     31a:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z3maplllll>
     31e:	f4 01       	movw	r30, r8
     320:	62 87       	std	Z+10, r22	; 0x0a
     322:	73 87       	std	Z+11, r23	; 0x0b
     324:	84 87       	std	Z+12, r24	; 0x0c
     326:	95 87       	std	Z+13, r25	; 0x0d
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
}
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	bf 90       	pop	r11
     33e:	af 90       	pop	r10
     340:	9f 90       	pop	r9
     342:	8f 90       	pop	r8
     344:	08 95       	ret

00000346 <_Z17calculate_currentP21current_sensor_struct>:
			tach_enc->hertz = (1000L*1000L)/(tach_enc->last_period*tach_enc->cts_per_rev);
		}
	}
}

void calculate_current(current_sensor_struct* current_sense){
     346:	8f 92       	push	r8
     348:	9f 92       	push	r9
     34a:	af 92       	push	r10
     34c:	bf 92       	push	r11
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	4c 01       	movw	r8, r24
	current_sense->sense_cts = ((long int)(current_sense->sense_cts*800L) + (long int)((analogRead(CURRENT_PIN)-9)*200L))/1000L;
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	0e 94 24 0a 	call	0x1448	; 0x1448 <analogRead>
     362:	5c 01       	movw	r10, r24
     364:	d4 01       	movw	r26, r8
     366:	14 96       	adiw	r26, 0x04	; 4
     368:	6d 91       	ld	r22, X+
     36a:	7d 91       	ld	r23, X+
     36c:	8d 91       	ld	r24, X+
     36e:	9c 91       	ld	r25, X
     370:	17 97       	sbiw	r26, 0x07	; 7
     372:	20 e2       	ldi	r18, 0x20	; 32
     374:	33 e0       	ldi	r19, 0x03	; 3
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     37e:	7b 01       	movw	r14, r22
     380:	8c 01       	movw	r16, r24
     382:	88 ef       	ldi	r24, 0xF8	; 248
     384:	98 ef       	ldi	r25, 0xF8	; 248
     386:	af ef       	ldi	r26, 0xFF	; 255
     388:	bf ef       	ldi	r27, 0xFF	; 255
     38a:	e8 0e       	add	r14, r24
     38c:	f9 1e       	adc	r15, r25
     38e:	0a 1f       	adc	r16, r26
     390:	1b 1f       	adc	r17, r27
     392:	cc 24       	eor	r12, r12
     394:	b7 fc       	sbrc	r11, 7
     396:	c0 94       	com	r12
     398:	dc 2c       	mov	r13, r12
     39a:	c6 01       	movw	r24, r12
     39c:	b5 01       	movw	r22, r10
     39e:	28 ec       	ldi	r18, 0xC8	; 200
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     3aa:	e6 0e       	add	r14, r22
     3ac:	f7 1e       	adc	r15, r23
     3ae:	08 1f       	adc	r16, r24
     3b0:	19 1f       	adc	r17, r25
     3b2:	c8 01       	movw	r24, r16
     3b4:	b7 01       	movw	r22, r14
     3b6:	28 ee       	ldi	r18, 0xE8	; 232
     3b8:	33 e0       	ldi	r19, 0x03	; 3
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     3c2:	ca 01       	movw	r24, r20
     3c4:	d4 01       	movw	r26, r8
     3c6:	14 96       	adiw	r26, 0x04	; 4
     3c8:	2c 93       	st	X, r18
     3ca:	14 97       	sbiw	r26, 0x04	; 4
     3cc:	15 96       	adiw	r26, 0x05	; 5
     3ce:	3c 93       	st	X, r19
     3d0:	15 97       	sbiw	r26, 0x05	; 5
     3d2:	16 96       	adiw	r26, 0x06	; 6
     3d4:	4c 93       	st	X, r20
     3d6:	16 97       	sbiw	r26, 0x06	; 6
     3d8:	17 96       	adiw	r26, 0x07	; 7
     3da:	9c 93       	st	X, r25
	current_sense->current = (int)map(current_sense->sense_cts, 0, 1023, -25000, 25000);
     3dc:	00 d0       	rcall	.+0      	; 0x3de <_Z17calculate_currentP21current_sensor_struct+0x98>
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <_Z17calculate_currentP21current_sensor_struct+0x9a>
     3e0:	48 ea       	ldi	r20, 0xA8	; 168
     3e2:	51 e6       	ldi	r21, 0x61	; 97
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	41 83       	std	Z+1, r20	; 0x01
     3ee:	52 83       	std	Z+2, r21	; 0x02
     3f0:	63 83       	std	Z+3, r22	; 0x03
     3f2:	74 83       	std	Z+4, r23	; 0x04
     3f4:	b9 01       	movw	r22, r18
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	af ef       	ldi	r26, 0xFF	; 255
     400:	ea 2e       	mov	r14, r26
     402:	a3 e0       	ldi	r26, 0x03	; 3
     404:	fa 2e       	mov	r15, r26
     406:	01 2d       	mov	r16, r1
     408:	11 2d       	mov	r17, r1
     40a:	f8 e5       	ldi	r31, 0x58	; 88
     40c:	af 2e       	mov	r10, r31
     40e:	fe e9       	ldi	r31, 0x9E	; 158
     410:	bf 2e       	mov	r11, r31
     412:	ff ef       	ldi	r31, 0xFF	; 255
     414:	cf 2e       	mov	r12, r31
     416:	ff ef       	ldi	r31, 0xFF	; 255
     418:	df 2e       	mov	r13, r31
     41a:	0e 94 3b 09 	call	0x1276	; 0x1276 <_Z3maplllll>
     41e:	d4 01       	movw	r26, r8
     420:	1f 96       	adiw	r26, 0x0f	; 15
     422:	7c 93       	st	X, r23
     424:	6e 93       	st	-X, r22
     426:	1e 97       	sbiw	r26, 0x0e	; 14
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
}
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	cf 90       	pop	r12
     43c:	bf 90       	pop	r11
     43e:	af 90       	pop	r10
     440:	9f 90       	pop	r9
     442:	8f 90       	pop	r8
     444:	08 95       	ret

00000446 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	db 01       	movw	r26, r22
     44c:	0d 90       	ld	r0, X+
     44e:	00 20       	and	r0, r0
     450:	e9 f7       	brne	.-6      	; 0x44c <_ZN5Print5writeEPKc+0x6>
     452:	11 97       	sbiw	r26, 0x01	; 1
     454:	a6 1b       	sub	r26, r22
     456:	b7 0b       	sbc	r27, r23
     458:	ec 01       	movw	r28, r24
     45a:	e8 81       	ld	r30, Y
     45c:	f9 81       	ldd	r31, Y+1	; 0x01
     45e:	02 80       	ldd	r0, Z+2	; 0x02
     460:	f3 81       	ldd	r31, Z+3	; 0x03
     462:	e0 2d       	mov	r30, r0
     464:	ad 01       	movw	r20, r26
     466:	09 95       	icall
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_Z8LcdWritehh>:
  {
    LcdCharacter(*characters++);
  }
}

void LcdWrite(byte dc, byte data)
     46e:	1f 93       	push	r17
     470:	98 2f       	mov	r25, r24
     472:	16 2f       	mov	r17, r22
{
  digitalWrite(PIN_DC, dc);
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	69 2f       	mov	r22, r25
     478:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
  digitalWrite(PIN_SCE, LOW);
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
     484:	87 e0       	ldi	r24, 0x07	; 7
     486:	68 e0       	ldi	r22, 0x08	; 8
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	21 2f       	mov	r18, r17
     48c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <shiftOut>
  digitalWrite(PIN_SCE, HIGH);
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
}
     498:	1f 91       	pop	r17
     49a:	08 95       	ret

0000049c <_Z6gotoXYii>:

void gotoXY(int x, int y) {
     49c:	1f 93       	push	r17
     49e:	16 2f       	mov	r17, r22
  LcdWrite(0, 0x80 | x);  // Column.
     4a0:	68 2f       	mov	r22, r24
     4a2:	60 68       	ori	r22, 0x80	; 128
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(0, 0x40 | y);  // Row.  ?
     4aa:	10 64       	ori	r17, 0x40	; 64
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	61 2f       	mov	r22, r17
     4b0:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
}
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <_Z13LcdInitializev>:
  }
}

void LcdInitialize(void)
{
  pinMode(PIN_SCE, OUTPUT);
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(PIN_RESET, OUTPUT);
     4c0:	85 e0       	ldi	r24, 0x05	; 5
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(PIN_DC, OUTPUT);
     4c8:	86 e0       	ldi	r24, 0x06	; 6
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(PIN_SDIN, OUTPUT);
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(PIN_SCLK, OUTPUT);
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  digitalWrite(PIN_RESET, LOW);
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
  digitalWrite(PIN_RESET, HIGH);
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	61 e2       	ldi	r22, 0x21	; 33
     4f4:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast).
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	61 eb       	ldi	r22, 0xB1	; 177
     4fc:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	64 e0       	ldi	r22, 0x04	; 4
     504:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	64 e1       	ldi	r22, 0x14	; 20
     50c:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	6c e0       	ldi	r22, 0x0C	; 12
     514:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x20 );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	60 e2       	ldi	r22, 0x20	; 32
     51c:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x0C );
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	6c e0       	ldi	r22, 0x0C	; 12
     524:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
}
     528:	08 95       	ret

0000052a <_Z8LcdClearv>:
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void)
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	c0 e0       	ldi	r28, 0x00	; 0
     530:	d0 e0       	ldi	r29, 0x00	; 0
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void)
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
     53a:	21 96       	adiw	r28, 0x01	; 1
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	c8 3f       	cpi	r28, 0xF8	; 248
     540:	d8 07       	cpc	r29, r24
     542:	b9 f7       	brne	.-18     	; 0x532 <_Z8LcdClearv+0x8>
  {
    LcdWrite(LCD_D, 0x00);
  }
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <_Z12LcdCharacterc>:
encoder_struct tach_enc;
current_sensor_struct current_sensor;
volt_sensor_struct volt_sensor;
button_struct button;

void LcdCharacter(char character)
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	18 2f       	mov	r17, r24
{
  LcdWrite(LCD_D, 0x00);
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
     55c:	81 2f       	mov	r24, r17
     55e:	99 27       	eor	r25, r25
     560:	87 fd       	sbrc	r24, 7
     562:	90 95       	com	r25
     564:	80 97       	sbiw	r24, 0x20	; 32
     566:	ec 01       	movw	r28, r24
     568:	cc 0f       	add	r28, r28
     56a:	dd 1f       	adc	r29, r29
     56c:	cc 0f       	add	r28, r28
     56e:	dd 1f       	adc	r29, r29
     570:	c8 0f       	add	r28, r24
     572:	d9 1f       	adc	r29, r25
     574:	c4 52       	subi	r28, 0x24	; 36
     576:	de 4f       	sbci	r29, 0xFE	; 254
  for (int index = 0; index < 5; index++)
     578:	85 e0       	ldi	r24, 0x05	; 5
     57a:	18 02       	muls	r17, r24
     57c:	80 01       	movw	r16, r0
     57e:	11 24       	eor	r1, r1
     580:	0f 5b       	subi	r16, 0xBF	; 191
     582:	1e 4f       	sbci	r17, 0xFE	; 254
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	69 91       	ld	r22, Y+
     588:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
button_struct button;

void LcdCharacter(char character)
{
  LcdWrite(LCD_D, 0x00);
  for (int index = 0; index < 5; index++)
     58c:	c0 17       	cp	r28, r16
     58e:	d1 07       	cpc	r29, r17
     590:	c9 f7       	brne	.-14     	; 0x584 <_Z12LcdCharacterc+0x3a>
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	0e 94 37 02 	call	0x46e	; 0x46e <_Z8LcdWritehh>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <_Z9LcdStringPc>:
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
  LcdWrite(LCD_C, 0x20 );
  LcdWrite(LCD_C, 0x0C );
}

void LcdString(char *characters)
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <_Z9LcdStringPc+0xe>
{
  while (*characters)
  {
    LcdCharacter(*characters++);
     5ac:	21 96       	adiw	r28, 0x01	; 1
     5ae:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z12LcdCharacterc>
  LcdWrite(LCD_C, 0x0C );
}

void LcdString(char *characters)
{
  while (*characters)
     5b2:	88 81       	ld	r24, Y
     5b4:	88 23       	and	r24, r24
     5b6:	d1 f7       	brne	.-12     	; 0x5ac <_Z9LcdStringPc+0x8>
  {
    LcdCharacter(*characters++);
  }
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <loop>:
	}

	return returnVal;
}

void loop() {
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
	long unsigned int current_time = millis();
     5da:	0e 94 db 09 	call	0x13b6	; 0x13b6 <millis>
     5de:	3b 01       	movw	r6, r22
     5e0:	4c 01       	movw	r8, r24
  if(current_time >= sample_clock){
     5e2:	80 91 d8 03 	lds	r24, 0x03D8
     5e6:	90 91 d9 03 	lds	r25, 0x03D9
     5ea:	a0 91 da 03 	lds	r26, 0x03DA
     5ee:	b0 91 db 03 	lds	r27, 0x03DB
     5f2:	68 16       	cp	r6, r24
     5f4:	79 06       	cpc	r7, r25
     5f6:	8a 06       	cpc	r8, r26
     5f8:	9b 06       	cpc	r9, r27
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <loop+0x40>
     5fc:	d2 c2       	rjmp	.+1444   	; 0xba2 <__stack+0x2a3>
  	// reset sampling clock
  	sample_clock += SAMPLE_PERIOD;
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	a1 1d       	adc	r26, r1
     602:	b1 1d       	adc	r27, r1
     604:	80 93 d8 03 	sts	0x03D8, r24
     608:	90 93 d9 03 	sts	0x03D9, r25
     60c:	a0 93 da 03 	sts	0x03DA, r26
     610:	b0 93 db 03 	sts	0x03DB, r27
//    step_pulser(current_time, &pulser);

    // poll the tachometer encoder
    //poll_encoder(current_time, &tach_enc);

    if (pollButton(&button) >= shortPress){
     614:	88 ea       	ldi	r24, 0xA8	; 168
     616:	94 e0       	ldi	r25, 0x04	; 4
     618:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z10pollButtonP13button_struct>
     61c:	44 97       	sbiw	r24, 0x14	; 20
     61e:	a0 f0       	brcs	.+40     	; 0x648 <loop+0x8a>
    	backlight_clock = current_time + backlight_period;
     620:	80 91 d5 01 	lds	r24, 0x01D5
     624:	90 91 d6 01 	lds	r25, 0x01D6
     628:	aa 27       	eor	r26, r26
     62a:	97 fd       	sbrc	r25, 7
     62c:	a0 95       	com	r26
     62e:	ba 2f       	mov	r27, r26
     630:	86 0d       	add	r24, r6
     632:	97 1d       	adc	r25, r7
     634:	a8 1d       	adc	r26, r8
     636:	b9 1d       	adc	r27, r9
     638:	80 93 c9 01 	sts	0x01C9, r24
     63c:	90 93 ca 01 	sts	0x01CA, r25
     640:	a0 93 cb 01 	sts	0x01CB, r26
     644:	b0 93 cc 01 	sts	0x01CC, r27
    }

    if(current_time >= update_tach_clock){
     648:	80 91 e8 03 	lds	r24, 0x03E8
     64c:	90 91 e9 03 	lds	r25, 0x03E9
     650:	a0 91 ea 03 	lds	r26, 0x03EA
     654:	b0 91 eb 03 	lds	r27, 0x03EB
     658:	68 16       	cp	r6, r24
     65a:	79 06       	cpc	r7, r25
     65c:	8a 06       	cpc	r8, r26
     65e:	9b 06       	cpc	r9, r27
     660:	c8 f1       	brcs	.+114    	; 0x6d4 <loop+0x116>
    	update_tach_clock = current_time + update_tach_period;
     662:	80 91 d7 01 	lds	r24, 0x01D7
     666:	90 91 d8 01 	lds	r25, 0x01D8
     66a:	aa 27       	eor	r26, r26
     66c:	97 fd       	sbrc	r25, 7
     66e:	a0 95       	com	r26
     670:	ba 2f       	mov	r27, r26
     672:	86 0d       	add	r24, r6
     674:	97 1d       	adc	r25, r7
     676:	a8 1d       	adc	r26, r8
     678:	b9 1d       	adc	r27, r9
     67a:	80 93 e8 03 	sts	0x03E8, r24
     67e:	90 93 e9 03 	sts	0x03E9, r25
     682:	a0 93 ea 03 	sts	0x03EA, r26
     686:	b0 93 eb 03 	sts	0x03EB, r27
    	// check if tachometer interrupt has been fired
    	if(tach_enc.pin_state){
     68a:	80 91 70 04 	lds	r24, 0x0470
     68e:	90 91 71 04 	lds	r25, 0x0471
     692:	89 2b       	or	r24, r25
     694:	b9 f0       	breq	.+46     	; 0x6c4 <loop+0x106>
    		tach_enc.pin_state = 0;
     696:	10 92 71 04 	sts	0x0471, r1
     69a:	10 92 70 04 	sts	0x0470, r1
    		tach_enc.last_period = (current_time - tach_enc.startTime);
     69e:	80 91 72 04 	lds	r24, 0x0472
     6a2:	90 91 73 04 	lds	r25, 0x0473
     6a6:	93 01       	movw	r18, r6
     6a8:	28 1b       	sub	r18, r24
     6aa:	39 0b       	sbc	r19, r25
     6ac:	30 93 7f 04 	sts	0x047F, r19
     6b0:	20 93 7e 04 	sts	0x047E, r18
    		tach_enc.startTime = current_time;
     6b4:	60 92 72 04 	sts	0x0472, r6
     6b8:	70 92 73 04 	sts	0x0473, r7
     6bc:	80 92 74 04 	sts	0x0474, r8
     6c0:	90 92 75 04 	sts	0x0475, r9
    	}
    	digitalWrite(LED_PIN, digitalRead(tach_enc.pin_num));
     6c4:	80 91 7c 04 	lds	r24, 0x047C
     6c8:	0e 94 20 0b 	call	0x1640	; 0x1640 <digitalRead>
     6cc:	68 2f       	mov	r22, r24
     6ce:	8d e0       	ldi	r24, 0x0D	; 13
     6d0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
    }

		if(current_time >= calc_tach_clock){
     6d4:	80 91 d4 03 	lds	r24, 0x03D4
     6d8:	90 91 d5 03 	lds	r25, 0x03D5
     6dc:	a0 91 d6 03 	lds	r26, 0x03D6
     6e0:	b0 91 d7 03 	lds	r27, 0x03D7
     6e4:	68 16       	cp	r6, r24
     6e6:	79 06       	cpc	r7, r25
     6e8:	8a 06       	cpc	r8, r26
     6ea:	9b 06       	cpc	r9, r27
     6ec:	d0 f0       	brcs	.+52     	; 0x722 <loop+0x164>
			calc_tach_clock = current_time + calc_tach_period;
     6ee:	80 91 cf 01 	lds	r24, 0x01CF
     6f2:	90 91 d0 01 	lds	r25, 0x01D0
     6f6:	aa 27       	eor	r26, r26
     6f8:	97 fd       	sbrc	r25, 7
     6fa:	a0 95       	com	r26
     6fc:	ba 2f       	mov	r27, r26
     6fe:	86 0d       	add	r24, r6
     700:	97 1d       	adc	r25, r7
     702:	a8 1d       	adc	r26, r8
     704:	b9 1d       	adc	r27, r9
     706:	80 93 d4 03 	sts	0x03D4, r24
     70a:	90 93 d5 03 	sts	0x03D5, r25
     70e:	a0 93 d6 03 	sts	0x03D6, r26
     712:	b0 93 d7 03 	sts	0x03D7, r27
			calculate_tach(current_time, &tach_enc);
     716:	c4 01       	movw	r24, r8
     718:	b3 01       	movw	r22, r6
     71a:	4c e6       	ldi	r20, 0x6C	; 108
     71c:	54 e0       	ldi	r21, 0x04	; 4
     71e:	0e 94 93 00 	call	0x126	; 0x126 <_Z14calculate_tachmP14encoder_struct>
		}

		if(current_time >= calc_current_clock){
     722:	80 91 dc 03 	lds	r24, 0x03DC
     726:	90 91 dd 03 	lds	r25, 0x03DD
     72a:	a0 91 de 03 	lds	r26, 0x03DE
     72e:	b0 91 df 03 	lds	r27, 0x03DF
     732:	68 16       	cp	r6, r24
     734:	79 06       	cpc	r7, r25
     736:	8a 06       	cpc	r8, r26
     738:	9b 06       	cpc	r9, r27
     73a:	e0 f0       	brcs	.+56     	; 0x774 <loop+0x1b6>
			calc_current_clock = current_time + calc_current_period;
     73c:	80 91 d1 01 	lds	r24, 0x01D1
     740:	90 91 d2 01 	lds	r25, 0x01D2
     744:	aa 27       	eor	r26, r26
     746:	97 fd       	sbrc	r25, 7
     748:	a0 95       	com	r26
     74a:	ba 2f       	mov	r27, r26
     74c:	86 0d       	add	r24, r6
     74e:	97 1d       	adc	r25, r7
     750:	a8 1d       	adc	r26, r8
     752:	b9 1d       	adc	r27, r9
     754:	80 93 dc 03 	sts	0x03DC, r24
     758:	90 93 dd 03 	sts	0x03DD, r25
     75c:	a0 93 de 03 	sts	0x03DE, r26
     760:	b0 93 df 03 	sts	0x03DF, r27
			calculate_current(&current_sensor);
     764:	8a e8       	ldi	r24, 0x8A	; 138
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 a3 01 	call	0x346	; 0x346 <_Z17calculate_currentP21current_sensor_struct>
			calculate_voltage(&volt_sensor);
     76c:	8a e9       	ldi	r24, 0x9A	; 154
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17calculate_voltageP18volt_sensor_struct>
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }

		if(current_time >= toggle_display_clock){
     774:	80 91 e4 03 	lds	r24, 0x03E4
     778:	90 91 e5 03 	lds	r25, 0x03E5
     77c:	a0 91 e6 03 	lds	r26, 0x03E6
     780:	b0 91 e7 03 	lds	r27, 0x03E7
     784:	68 16       	cp	r6, r24
     786:	79 06       	cpc	r7, r25
     788:	8a 06       	cpc	r8, r26
     78a:	9b 06       	cpc	r9, r27
     78c:	c0 f1       	brcs	.+112    	; 0x7fe <loop+0x240>
			toggle_display_clock = current_time + toggle_display_period;
     78e:	80 91 d3 01 	lds	r24, 0x01D3
     792:	90 91 d4 01 	lds	r25, 0x01D4
     796:	aa 27       	eor	r26, r26
     798:	97 fd       	sbrc	r25, 7
     79a:	a0 95       	com	r26
     79c:	ba 2f       	mov	r27, r26
     79e:	86 0d       	add	r24, r6
     7a0:	97 1d       	adc	r25, r7
     7a2:	a8 1d       	adc	r26, r8
     7a4:	b9 1d       	adc	r27, r9
     7a6:	80 93 e4 03 	sts	0x03E4, r24
     7aa:	90 93 e5 03 	sts	0x03E5, r25
     7ae:	a0 93 e6 03 	sts	0x03E6, r26
     7b2:	b0 93 e7 03 	sts	0x03E7, r27
			toggle_display = !toggle_display;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	80 91 d9 01 	lds	r24, 0x01D9
     7be:	90 91 da 01 	lds	r25, 0x01DA
     7c2:	89 2b       	or	r24, r25
     7c4:	11 f4       	brne	.+4      	; 0x7ca <loop+0x20c>
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	30 93 da 01 	sts	0x01DA, r19
     7ce:	20 93 d9 01 	sts	0x01D9, r18
		  gotoXY(0,2);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	62 e0       	ldi	r22, 0x02	; 2
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  if(toggle_display == SHOW_RPM)
     7de:	80 91 d9 01 	lds	r24, 0x01D9
     7e2:	90 91 da 01 	lds	r25, 0x01DA
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <loop+0x234>
		  	LcdString((char*)"Speed:");
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <loop+0x23c>
		  else if(toggle_display == SHOW_WATTS)
     7f2:	89 2b       	or	r24, r25
     7f4:	21 f4       	brne	.+8      	; 0x7fe <loop+0x240>
		  	LcdString((char*)"Power:");
     7f6:	87 e0       	ldi	r24, 0x07	; 7
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>
		}

		if(current_time >= update_display_clock){
     7fe:	80 91 e0 03 	lds	r24, 0x03E0
     802:	90 91 e1 03 	lds	r25, 0x03E1
     806:	a0 91 e2 03 	lds	r26, 0x03E2
     80a:	b0 91 e3 03 	lds	r27, 0x03E3
     80e:	68 16       	cp	r6, r24
     810:	79 06       	cpc	r7, r25
     812:	8a 06       	cpc	r8, r26
     814:	9b 06       	cpc	r9, r27
     816:	08 f4       	brcc	.+2      	; 0x81a <loop+0x25c>
     818:	ae c1       	rjmp	.+860    	; 0xb76 <__stack+0x277>

			update_display_clock = current_time + update_display_period;
     81a:	80 91 cd 01 	lds	r24, 0x01CD
     81e:	90 91 ce 01 	lds	r25, 0x01CE
     822:	aa 27       	eor	r26, r26
     824:	97 fd       	sbrc	r25, 7
     826:	a0 95       	com	r26
     828:	ba 2f       	mov	r27, r26
     82a:	86 0d       	add	r24, r6
     82c:	97 1d       	adc	r25, r7
     82e:	a8 1d       	adc	r26, r8
     830:	b9 1d       	adc	r27, r9
     832:	80 93 e0 03 	sts	0x03E0, r24
     836:	90 93 e1 03 	sts	0x03E1, r25
     83a:	a0 93 e2 03 	sts	0x03E2, r26
     83e:	b0 93 e3 03 	sts	0x03E3, r27
		  snprintf(outputbuffer, 11,"%d.%02d Amps", (current_sensor.current)/1000,
		  		((abs(current_sensor.current) % 1000) / 10));
     842:	40 91 98 04 	lds	r20, 0x0498
     846:	e0 91 99 04 	lds	r30, 0x0499
     84a:	8d b7       	in	r24, 0x3d	; 61
     84c:	9e b7       	in	r25, 0x3e	; 62
     84e:	0a 97       	sbiw	r24, 0x0a	; 10
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	9e bf       	out	0x3e, r25	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	8d bf       	out	0x3d, r24	; 61
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	21 96       	adiw	r28, 0x01	; 1
     860:	8c ee       	ldi	r24, 0xEC	; 236
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	ad b7       	in	r26, 0x3d	; 61
     866:	be b7       	in	r27, 0x3e	; 62
     868:	12 96       	adiw	r26, 0x02	; 2
     86a:	9c 93       	st	X, r25
     86c:	8e 93       	st	-X, r24
     86e:	11 97       	sbiw	r26, 0x01	; 1
     870:	8b e0       	ldi	r24, 0x0B	; 11
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9b 83       	std	Y+3, r25	; 0x03
     876:	8a 83       	std	Y+2, r24	; 0x02
     878:	8e e0       	ldi	r24, 0x0E	; 14
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	9d 83       	std	Y+5, r25	; 0x05
     87e:	8c 83       	std	Y+4, r24	; 0x04
     880:	84 2f       	mov	r24, r20
     882:	9e 2f       	mov	r25, r30
     884:	68 ee       	ldi	r22, 0xE8	; 232
     886:	73 e0       	ldi	r23, 0x03	; 3
     888:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
     88c:	7f 83       	std	Y+7, r23	; 0x07
     88e:	6e 83       	std	Y+6, r22	; 0x06
     890:	24 2f       	mov	r18, r20
     892:	3e 2f       	mov	r19, r30
     894:	c9 01       	movw	r24, r18
     896:	97 ff       	sbrs	r25, 7
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <loop+0x2e2>
     89a:	90 95       	com	r25
     89c:	81 95       	neg	r24
     89e:	9f 4f       	sbci	r25, 0xFF	; 255
     8a0:	68 ee       	ldi	r22, 0xE8	; 232
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
     8a8:	6a e0       	ldi	r22, 0x0A	; 10
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
     8b0:	79 87       	std	Y+9, r23	; 0x09
     8b2:	68 87       	std	Y+8, r22	; 0x08
     8b4:	0e 94 3e 0c 	call	0x187c	; 0x187c <snprintf>

		  gotoXY(6,1);
     8b8:	ed b7       	in	r30, 0x3d	; 61
     8ba:	fe b7       	in	r31, 0x3e	; 62
     8bc:	3a 96       	adiw	r30, 0x0a	; 10
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	fe bf       	out	0x3e, r31	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	ed bf       	out	0x3d, r30	; 61
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  LcdString((char*)"           ");
     8d4:	8b e1       	ldi	r24, 0x1B	; 27
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>
		  gotoXY(6,1);
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  LcdString(outputbuffer);
     8e8:	cc ee       	ldi	r28, 0xEC	; 236
     8ea:	d3 e0       	ldi	r29, 0x03	; 3
     8ec:	ce 01       	movw	r24, r28
     8ee:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>


		  if(toggle_display == SHOW_RPM){
     8f2:	80 91 d9 01 	lds	r24, 0x01D9
     8f6:	90 91 da 01 	lds	r25, 0x01DA
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	91 05       	cpc	r25, r1
     8fe:	f1 f5       	brne	.+124    	; 0x97c <__stack+0x7d>
			  snprintf(outputbuffer,11,"%ld.%01ld RPM", (60*tach_enc.hertz)/1000, ((60*tach_enc.hertz)%1000) / 100);
     900:	60 91 78 04 	lds	r22, 0x0478
     904:	70 91 79 04 	lds	r23, 0x0479
     908:	80 91 7a 04 	lds	r24, 0x047A
     90c:	90 91 7b 04 	lds	r25, 0x047B
     910:	2c e3       	ldi	r18, 0x3C	; 60
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     91c:	6b 01       	movw	r12, r22
     91e:	7c 01       	movw	r14, r24
     920:	2d b7       	in	r18, 0x3d	; 61
     922:	3e b7       	in	r19, 0x3e	; 62
     924:	2e 50       	subi	r18, 0x0E	; 14
     926:	30 40       	sbci	r19, 0x00	; 0
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	3e bf       	out	0x3e, r19	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	2d bf       	out	0x3d, r18	; 61
     932:	0d b7       	in	r16, 0x3d	; 61
     934:	1e b7       	in	r17, 0x3e	; 62
     936:	0f 5f       	subi	r16, 0xFF	; 255
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	ad b7       	in	r26, 0x3d	; 61
     93c:	be b7       	in	r27, 0x3e	; 62
     93e:	12 96       	adiw	r26, 0x02	; 2
     940:	dc 93       	st	X, r29
     942:	ce 93       	st	-X, r28
     944:	11 97       	sbiw	r26, 0x01	; 1
     946:	8b e0       	ldi	r24, 0x0B	; 11
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	f8 01       	movw	r30, r16
     94c:	93 83       	std	Z+3, r25	; 0x03
     94e:	82 83       	std	Z+2, r24	; 0x02
     950:	87 e2       	ldi	r24, 0x27	; 39
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	95 83       	std	Z+5, r25	; 0x05
     956:	84 83       	std	Z+4, r24	; 0x04
     958:	c7 01       	movw	r24, r14
     95a:	b6 01       	movw	r22, r12
     95c:	28 ee       	ldi	r18, 0xE8	; 232
     95e:	33 e0       	ldi	r19, 0x03	; 3
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     968:	d8 01       	movw	r26, r16
     96a:	16 96       	adiw	r26, 0x06	; 6
     96c:	2d 93       	st	X+, r18
     96e:	3d 93       	st	X+, r19
     970:	4d 93       	st	X+, r20
     972:	5c 93       	st	X, r21
     974:	19 97       	sbiw	r26, 0x09	; 9
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	67 c0       	rjmp	.+206    	; 0xa4a <__stack+0x14b>
		  }

		  else if(toggle_display == SHOW_WATTS){
     97c:	89 2b       	or	r24, r25
     97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x83>
     980:	80 c0       	rjmp	.+256    	; 0xa82 <__stack+0x183>
		  	watts = abs(current_sensor.current * volt_sensor.voltage) / 1000;
     982:	60 91 98 04 	lds	r22, 0x0498
     986:	70 91 99 04 	lds	r23, 0x0499
     98a:	88 27       	eor	r24, r24
     98c:	77 fd       	sbrc	r23, 7
     98e:	80 95       	com	r24
     990:	98 2f       	mov	r25, r24
     992:	20 91 a4 04 	lds	r18, 0x04A4
     996:	30 91 a5 04 	lds	r19, 0x04A5
     99a:	40 91 a6 04 	lds	r20, 0x04A6
     99e:	50 91 a7 04 	lds	r21, 0x04A7
     9a2:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
     9a6:	ac 01       	movw	r20, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	da 01       	movw	r26, r20
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	97 ff       	sbrs	r25, 7
     9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__stack+0xc3>
     9b4:	90 95       	com	r25
     9b6:	80 95       	com	r24
     9b8:	70 95       	com	r23
     9ba:	61 95       	neg	r22
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	8f 4f       	sbci	r24, 0xFF	; 255
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	28 ee       	ldi	r18, 0xE8	; 232
     9c4:	33 e0       	ldi	r19, 0x03	; 3
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     9ce:	f2 2e       	mov	r15, r18
     9d0:	e3 2e       	mov	r14, r19
     9d2:	d4 2e       	mov	r13, r20
     9d4:	c5 2e       	mov	r12, r21
     9d6:	20 93 cc 03 	sts	0x03CC, r18
     9da:	30 93 cd 03 	sts	0x03CD, r19
     9de:	40 93 ce 03 	sts	0x03CE, r20
     9e2:	50 93 cf 03 	sts	0x03CF, r21
			  snprintf(outputbuffer,11,"%ld.%01ld Watts", watts/1000, (watts%1000) / 100);
     9e6:	8d b7       	in	r24, 0x3d	; 61
     9e8:	9e b7       	in	r25, 0x3e	; 62
     9ea:	0e 97       	sbiw	r24, 0x0e	; 14
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	9e bf       	out	0x3e, r25	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	8d bf       	out	0x3d, r24	; 61
     9f6:	0d b7       	in	r16, 0x3d	; 61
     9f8:	1e b7       	in	r17, 0x3e	; 62
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	8c ee       	ldi	r24, 0xEC	; 236
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	ad b7       	in	r26, 0x3d	; 61
     a04:	be b7       	in	r27, 0x3e	; 62
     a06:	12 96       	adiw	r26, 0x02	; 2
     a08:	9c 93       	st	X, r25
     a0a:	8e 93       	st	-X, r24
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	8b e0       	ldi	r24, 0x0B	; 11
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	f8 01       	movw	r30, r16
     a14:	93 83       	std	Z+3, r25	; 0x03
     a16:	82 83       	std	Z+2, r24	; 0x02
     a18:	85 e3       	ldi	r24, 0x35	; 53
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	95 83       	std	Z+5, r25	; 0x05
     a1e:	84 83       	std	Z+4, r24	; 0x04
     a20:	62 2f       	mov	r22, r18
     a22:	73 2f       	mov	r23, r19
     a24:	84 2f       	mov	r24, r20
     a26:	95 2f       	mov	r25, r21
     a28:	28 ee       	ldi	r18, 0xE8	; 232
     a2a:	33 e0       	ldi	r19, 0x03	; 3
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     a34:	d8 01       	movw	r26, r16
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	2d 93       	st	X+, r18
     a3a:	3d 93       	st	X+, r19
     a3c:	4d 93       	st	X+, r20
     a3e:	5c 93       	st	X, r21
     a40:	19 97       	sbiw	r26, 0x09	; 9
     a42:	6f 2d       	mov	r22, r15
     a44:	7e 2d       	mov	r23, r14
     a46:	8d 2d       	mov	r24, r13
     a48:	9c 2d       	mov	r25, r12
     a4a:	28 ee       	ldi	r18, 0xE8	; 232
     a4c:	33 e0       	ldi	r19, 0x03	; 3
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     a56:	24 e6       	ldi	r18, 0x64	; 100
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     a62:	f8 01       	movw	r30, r16
     a64:	22 87       	std	Z+10, r18	; 0x0a
     a66:	33 87       	std	Z+11, r19	; 0x0b
     a68:	44 87       	std	Z+12, r20	; 0x0c
     a6a:	55 87       	std	Z+13, r21	; 0x0d
     a6c:	0e 94 3e 0c 	call	0x187c	; 0x187c <snprintf>
     a70:	2d b7       	in	r18, 0x3d	; 61
     a72:	3e b7       	in	r19, 0x3e	; 62
     a74:	22 5f       	subi	r18, 0xF2	; 242
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	3e bf       	out	0x3e, r19	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	2d bf       	out	0x3d, r18	; 61
		  }

		  gotoXY(6,3);
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	63 e0       	ldi	r22, 0x03	; 3
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  LcdString((char*)"           ");
     a8e:	8b e1       	ldi	r24, 0x1B	; 27
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>
		  gotoXY(6,3);
     a96:	86 e0       	ldi	r24, 0x06	; 6
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	63 e0       	ldi	r22, 0x03	; 3
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  LcdString(outputbuffer);
     aa2:	1c ee       	ldi	r17, 0xEC	; 236
     aa4:	a1 2e       	mov	r10, r17
     aa6:	13 e0       	ldi	r17, 0x03	; 3
     aa8:	b1 2e       	mov	r11, r17
     aaa:	c5 01       	movw	r24, r10
     aac:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>

		  snprintf(outputbuffer,12,"%ld.%02ld Volts", volt_sensor.voltage/1000, ((volt_sensor.voltage)%1000) / 10);
     ab0:	c0 90 a4 04 	lds	r12, 0x04A4
     ab4:	d0 90 a5 04 	lds	r13, 0x04A5
     ab8:	e0 90 a6 04 	lds	r14, 0x04A6
     abc:	f0 90 a7 04 	lds	r15, 0x04A7
     ac0:	8d b7       	in	r24, 0x3d	; 61
     ac2:	9e b7       	in	r25, 0x3e	; 62
     ac4:	0e 97       	sbiw	r24, 0x0e	; 14
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	9e bf       	out	0x3e, r25	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	8d bf       	out	0x3d, r24	; 61
     ad0:	0d b7       	in	r16, 0x3d	; 61
     ad2:	1e b7       	in	r17, 0x3e	; 62
     ad4:	0f 5f       	subi	r16, 0xFF	; 255
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	ad b7       	in	r26, 0x3d	; 61
     ada:	be b7       	in	r27, 0x3e	; 62
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	bc 92       	st	X, r11
     ae0:	ae 92       	st	-X, r10
     ae2:	11 97       	sbiw	r26, 0x01	; 1
     ae4:	8c e0       	ldi	r24, 0x0C	; 12
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	f8 01       	movw	r30, r16
     aea:	93 83       	std	Z+3, r25	; 0x03
     aec:	82 83       	std	Z+2, r24	; 0x02
     aee:	85 e4       	ldi	r24, 0x45	; 69
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	95 83       	std	Z+5, r25	; 0x05
     af4:	84 83       	std	Z+4, r24	; 0x04
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	28 ee       	ldi	r18, 0xE8	; 232
     afc:	33 e0       	ldi	r19, 0x03	; 3
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     b06:	d8 01       	movw	r26, r16
     b08:	16 96       	adiw	r26, 0x06	; 6
     b0a:	2d 93       	st	X+, r18
     b0c:	3d 93       	st	X+, r19
     b0e:	4d 93       	st	X+, r20
     b10:	5c 93       	st	X, r21
     b12:	19 97       	sbiw	r26, 0x09	; 9
     b14:	c7 01       	movw	r24, r14
     b16:	b6 01       	movw	r22, r12
     b18:	28 ee       	ldi	r18, 0xE8	; 232
     b1a:	33 e0       	ldi	r19, 0x03	; 3
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     b24:	2a e0       	ldi	r18, 0x0A	; 10
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
     b30:	f8 01       	movw	r30, r16
     b32:	22 87       	std	Z+10, r18	; 0x0a
     b34:	33 87       	std	Z+11, r19	; 0x0b
     b36:	44 87       	std	Z+12, r20	; 0x0c
     b38:	55 87       	std	Z+13, r21	; 0x0d
     b3a:	0e 94 3e 0c 	call	0x187c	; 0x187c <snprintf>
		  gotoXY(6,5);
     b3e:	2d b7       	in	r18, 0x3d	; 61
     b40:	3e b7       	in	r19, 0x3e	; 62
     b42:	22 5f       	subi	r18, 0xF2	; 242
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	3e bf       	out	0x3e, r19	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	2d bf       	out	0x3d, r18	; 61
     b50:	86 e0       	ldi	r24, 0x06	; 6
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	65 e0       	ldi	r22, 0x05	; 5
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  LcdString((char*)"           ");
     b5c:	8b e1       	ldi	r24, 0x1B	; 27
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>
		  gotoXY(6,5);
     b64:	86 e0       	ldi	r24, 0x06	; 6
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	65 e0       	ldi	r22, 0x05	; 5
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
		  LcdString(outputbuffer);
     b70:	c5 01       	movw	r24, r10
     b72:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>
//					current_time % 1000, (60*tach_enc.hertz)/1000, ((60*tach_enc.hertz) % 1000)/10,current_sensor.current, current_sensor.sense_cts,
//					volt_sensor.voltage / 1000, volt_sensor.voltage % 1000, volt_sensor.sense_cts);
//			Serial.write(outputbuffer);
//		}

		if(current_time <= backlight_clock){
     b76:	80 91 c9 01 	lds	r24, 0x01C9
     b7a:	90 91 ca 01 	lds	r25, 0x01CA
     b7e:	a0 91 cb 01 	lds	r26, 0x01CB
     b82:	b0 91 cc 01 	lds	r27, 0x01CC
     b86:	86 15       	cp	r24, r6
     b88:	97 05       	cpc	r25, r7
     b8a:	a8 05       	cpc	r26, r8
     b8c:	b9 05       	cpc	r27, r9
     b8e:	20 f0       	brcs	.+8      	; 0xb98 <__stack+0x299>
			analogWrite(BACKLIGHT_PIN, 35);
     b90:	89 e0       	ldi	r24, 0x09	; 9
     b92:	63 e2       	ldi	r22, 0x23	; 35
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <__stack+0x29f>
		}
		else
			analogWrite(BACKLIGHT_PIN, 0);
     b98:	89 e0       	ldi	r24, 0x09	; 9
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	0e 94 46 0a 	call	0x148c	; 0x148c <analogWrite>
  }
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	08 95       	ret

00000bc0 <setup>:
void gotoXY(int x, int y) {
  LcdWrite(0, 0x80 | x);  // Column.
  LcdWrite(0, 0x40 | y);  // Row.  ?
}

void setup() {
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
	// set up the encoder interrupt to detect falling edge on digital pin 2
	attachInterrupt(0, encoder_interrupt, FALLING);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	6c e8       	ldi	r22, 0x8C	; 140
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	42 e0       	ldi	r20, 0x02	; 2
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	0e 94 be 08 	call	0x117c	; 0x117c <attachInterrupt>
	Serial.begin(115200);
     bd2:	08 e3       	ldi	r16, 0x38	; 56
     bd4:	15 e0       	ldi	r17, 0x05	; 5
     bd6:	c8 01       	movw	r24, r16
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	52 ec       	ldi	r21, 0xC2	; 194
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZN14HardwareSerial5beginEm>
	Serial.write("<h>time\tspeed\tcurrent\tcurrent_sense\tvoltage\tvoltage_sense</h>\n");
     be4:	c8 01       	movw	r24, r16
     be6:	65 e5       	ldi	r22, 0x55	; 85
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	0e 94 23 02 	call	0x446	; 0x446 <_ZN5Print5writeEPKc>
	Serial.write("<u>ms\trpm\tmA\tcounts\tvolts\tcts</u>\n");
     bee:	c8 01       	movw	r24, r16
     bf0:	64 e9       	ldi	r22, 0x94	; 148
     bf2:	71 e0       	ldi	r23, 0x01	; 1
     bf4:	0e 94 23 02 	call	0x446	; 0x446 <_ZN5Print5writeEPKc>
  pinMode(LED_PWM_PIN, OUTPUT);
     bf8:	8b e0       	ldi	r24, 0x0B	; 11
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(VOLT_PIN, INPUT);
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(INTERRUPTER_PIN, INPUT);
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(LED_PIN, OUTPUT);
     c10:	8d e0       	ldi	r24, 0x0D	; 13
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
  pinMode(BTN_PIN, INPUT);
     c18:	8c e0       	ldi	r24, 0x0C	; 12
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>

  LcdInitialize();
     c20:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z13LcdInitializev>
  gotoXY(0,0);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
  LcdClear();
     c30:	0e 94 95 02 	call	0x52a	; 0x52a <_Z8LcdClearv>
  LcdString((char*)"Current:");
     c34:	87 eb       	ldi	r24, 0xB7	; 183
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>

  gotoXY(0,2);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	62 e0       	ldi	r22, 0x02	; 2
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
  LcdString((char*)"Speed:");
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>

  gotoXY(0,4);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	64 e0       	ldi	r22, 0x04	; 4
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z6gotoXYii>
  LcdString((char*)"Voltage:");
     c5c:	80 ec       	ldi	r24, 0xC0	; 192
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z9LcdStringPc>

  blink_clock = millis();
     c64:	0e 94 db 09 	call	0x13b6	; 0x13b6 <millis>
     c68:	60 93 d0 03 	sts	0x03D0, r22
     c6c:	70 93 d1 03 	sts	0x03D1, r23
     c70:	80 93 d2 03 	sts	0x03D2, r24
     c74:	90 93 d3 03 	sts	0x03D3, r25

  tach_enc.min_hertz = 5;
     c78:	25 e0       	ldi	r18, 0x05	; 5
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	30 93 77 04 	sts	0x0477, r19
     c80:	20 93 76 04 	sts	0x0476, r18
  tach_enc.max_period = 5000;
     c84:	88 e8       	ldi	r24, 0x88	; 136
     c86:	93 e1       	ldi	r25, 0x13	; 19
     c88:	90 93 85 04 	sts	0x0485, r25
     c8c:	80 93 84 04 	sts	0x0484, r24
  tach_enc.pin_num = INTERRUPTER_PIN;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	90 93 7d 04 	sts	0x047D, r25
     c98:	80 93 7c 04 	sts	0x047C, r24
  tach_enc.debounce_min = 5;
     c9c:	30 93 6f 04 	sts	0x046F, r19
     ca0:	20 93 6e 04 	sts	0x046E, r18
  tach_enc.alpha = 800;
     ca4:	80 e2       	ldi	r24, 0x20	; 32
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	80 93 86 04 	sts	0x0486, r24
     cb0:	90 93 87 04 	sts	0x0487, r25
     cb4:	a0 93 88 04 	sts	0x0488, r26
     cb8:	b0 93 89 04 	sts	0x0489, r27
  tach_enc.cts_per_rev = 1;
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	30 93 81 04 	sts	0x0481, r19
     cc4:	20 93 80 04 	sts	0x0480, r18
  tach_enc.hertz = 0;
     cc8:	10 92 78 04 	sts	0x0478, r1
     ccc:	10 92 79 04 	sts	0x0479, r1
     cd0:	10 92 7a 04 	sts	0x047A, r1
     cd4:	10 92 7b 04 	sts	0x047B, r1

  button.button_pin = BTN_PIN;
     cd8:	8c e0       	ldi	r24, 0x0C	; 12
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	90 93 a9 04 	sts	0x04A9, r25
     ce0:	80 93 a8 04 	sts	0x04A8, r24
  button.button_state = btnDown;
     ce4:	30 93 ab 04 	sts	0x04AB, r19
     ce8:	20 93 aa 04 	sts	0x04AA, r18
//  pulser.step_period_up = pulser.pulse_up_period / impulse_num_samples;
//  pulser.step_period_down = pulser.pulse_down_period / impulse_num_samples;
//  pulser.index = 0;
//  pulser.offset_time = 0; // start pulse at beginning of each carrier period

  volt_sensor.max_volts = 68000; // mV at sensor saturation (depends on pot adj)
     cec:	80 ea       	ldi	r24, 0xA0	; 160
     cee:	99 e0       	ldi	r25, 0x09	; 9
     cf0:	a1 e0       	ldi	r26, 0x01	; 1
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	80 93 a0 04 	sts	0x04A0, r24
     cf8:	90 93 a1 04 	sts	0x04A1, r25
     cfc:	a0 93 a2 04 	sts	0x04A2, r26
     d00:	b0 93 a3 04 	sts	0x04A3, r27

//  init_impulse(impulse_array, impulse_num_samples, 255);


}
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     d0a:	08 95       	ret

00000d0c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     d24:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     d28:	20 91 f0 04 	lds	r18, 0x04F0
     d2c:	30 91 f1 04 	lds	r19, 0x04F1
     d30:	2f 5f       	subi	r18, 0xFF	; 255
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	2f 73       	andi	r18, 0x3F	; 63
     d36:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     d38:	80 91 f2 04 	lds	r24, 0x04F2
     d3c:	90 91 f3 04 	lds	r25, 0x04F3
     d40:	28 17       	cp	r18, r24
     d42:	39 07       	cpc	r19, r25
     d44:	59 f0       	breq	.+22     	; 0xd5c <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
     d46:	e0 91 f0 04 	lds	r30, 0x04F0
     d4a:	f0 91 f1 04 	lds	r31, 0x04F1
     d4e:	e0 55       	subi	r30, 0x50	; 80
     d50:	fb 4f       	sbci	r31, 0xFB	; 251
     d52:	40 83       	st	Z, r20
    buffer->head = i;
     d54:	30 93 f1 04 	sts	0x04F1, r19
     d58:	20 93 f0 04 	sts	0x04F0, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     d74:	e0 91 44 05 	lds	r30, 0x0544
     d78:	f0 91 45 05 	lds	r31, 0x0545
     d7c:	e0 5c       	subi	r30, 0xC0	; 192
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	81 91       	ld	r24, Z+
     d82:	91 91       	ld	r25, Z+
     d84:	20 81       	ld	r18, Z
     d86:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     d88:	82 1b       	sub	r24, r18
     d8a:	93 0b       	sbc	r25, r19
     d8c:	8f 73       	andi	r24, 0x3F	; 63
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	89 2b       	or	r24, r25
     d92:	11 f0       	breq	.+4      	; 0xd98 <_Z14serialEventRunv+0x24>
     d94:	0e 94 85 06 	call	0xd0a	; 0xd0a <_Z11serialEventv>
     d98:	08 95       	ret

00000d9a <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     dbc:	20 91 34 05 	lds	r18, 0x0534
     dc0:	30 91 35 05 	lds	r19, 0x0535
     dc4:	80 91 36 05 	lds	r24, 0x0536
     dc8:	90 91 37 05 	lds	r25, 0x0537
     dcc:	28 17       	cp	r18, r24
     dce:	39 07       	cpc	r19, r25
     dd0:	31 f4       	brne	.+12     	; 0xdde <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     dd2:	80 91 c1 00 	lds	r24, 0x00C1
     dd6:	8f 7d       	andi	r24, 0xDF	; 223
     dd8:	80 93 c1 00 	sts	0x00C1, r24
     ddc:	16 c0       	rjmp	.+44     	; 0xe0a <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     dde:	e0 91 36 05 	lds	r30, 0x0536
     de2:	f0 91 37 05 	lds	r31, 0x0537
     de6:	ec 50       	subi	r30, 0x0C	; 12
     de8:	fb 4f       	sbci	r31, 0xFB	; 251
     dea:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     dec:	80 91 36 05 	lds	r24, 0x0536
     df0:	90 91 37 05 	lds	r25, 0x0537
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	60 e4       	ldi	r22, 0x40	; 64
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
     dfe:	90 93 37 05 	sts	0x0537, r25
     e02:	80 93 36 05 	sts	0x0536, r24
	
  #if defined(UDR0)
    UDR0 = c;
     e06:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	ec 01       	movw	r28, r24
     e40:	7a 01       	movw	r14, r20
     e42:	8b 01       	movw	r16, r22
     e44:	dd 24       	eor	r13, r13
     e46:	40 30       	cpi	r20, 0x00	; 0
     e48:	81 ee       	ldi	r24, 0xE1	; 225
     e4a:	58 07       	cpc	r21, r24
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	68 07       	cpc	r22, r24
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	78 07       	cpc	r23, r24
     e54:	11 f0       	breq	.+4      	; 0xe5a <_ZN14HardwareSerial5beginEm+0x2e>
     e56:	dd 24       	eor	r13, r13
     e58:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	a9 2e       	mov	r10, r25
     e5e:	b1 2c       	mov	r11, r1
     e60:	ec 89       	ldd	r30, Y+20	; 0x14
     e62:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     e64:	dd 20       	and	r13, r13
     e66:	69 f0       	breq	.+26     	; 0xe82 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     e68:	c5 01       	movw	r24, r10
     e6a:	0e 8c       	ldd	r0, Y+30	; 0x1e
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <_ZN14HardwareSerial5beginEm+0x46>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <_ZN14HardwareSerial5beginEm+0x42>
     e76:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	79 e0       	ldi	r23, 0x09	; 9
     e7c:	8d e3       	ldi	r24, 0x3D	; 61
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     e82:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     e84:	60 e8       	ldi	r22, 0x80	; 128
     e86:	74 e8       	ldi	r23, 0x84	; 132
     e88:	8e e1       	ldi	r24, 0x1E	; 30
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a8 01       	movw	r20, r16
     e8e:	97 01       	movw	r18, r14
     e90:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__udivmodsi4>
     e94:	21 50       	subi	r18, 0x01	; 1
     e96:	30 40       	sbci	r19, 0x00	; 0
     e98:	40 40       	sbci	r20, 0x00	; 0
     e9a:	50 40       	sbci	r21, 0x00	; 0
     e9c:	56 95       	lsr	r21
     e9e:	47 95       	ror	r20
     ea0:	37 95       	ror	r19
     ea2:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     ea4:	80 e1       	ldi	r24, 0x10	; 16
     ea6:	20 30       	cpi	r18, 0x00	; 0
     ea8:	38 07       	cpc	r19, r24
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <_ZN14HardwareSerial5beginEm+0x88>
     eac:	dd 20       	and	r13, r13
     eae:	11 f0       	breq	.+4      	; 0xeb4 <_ZN14HardwareSerial5beginEm+0x88>
     eb0:	dd 24       	eor	r13, r13
     eb2:	d6 cf       	rjmp	.-84     	; 0xe60 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     eb4:	e8 89       	ldd	r30, Y+16	; 0x10
     eb6:	f9 89       	ldd	r31, Y+17	; 0x11
     eb8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     eba:	ea 89       	ldd	r30, Y+18	; 0x12
     ebc:	fb 89       	ldd	r31, Y+19	; 0x13
     ebe:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     ec0:	ee 89       	ldd	r30, Y+22	; 0x16
     ec2:	ff 89       	ldd	r31, Y+23	; 0x17
     ec4:	40 81       	ld	r20, Z
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	c9 01       	movw	r24, r18
     ecc:	0a 8c       	ldd	r0, Y+26	; 0x1a
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <_ZN14HardwareSerial5beginEm+0xa8>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <_ZN14HardwareSerial5beginEm+0xa4>
     ed8:	48 2b       	or	r20, r24
     eda:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     edc:	ee 89       	ldd	r30, Y+22	; 0x16
     ede:	ff 89       	ldd	r31, Y+23	; 0x17
     ee0:	40 81       	ld	r20, Z
     ee2:	c9 01       	movw	r24, r18
     ee4:	0b 8c       	ldd	r0, Y+27	; 0x1b
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <_ZN14HardwareSerial5beginEm+0xc0>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <_ZN14HardwareSerial5beginEm+0xbc>
     ef0:	48 2b       	or	r20, r24
     ef2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     ef4:	ee 89       	ldd	r30, Y+22	; 0x16
     ef6:	ff 89       	ldd	r31, Y+23	; 0x17
     ef8:	40 81       	ld	r20, Z
     efa:	c9 01       	movw	r24, r18
     efc:	0c 8c       	ldd	r0, Y+28	; 0x1c
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <_ZN14HardwareSerial5beginEm+0xd8>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <_ZN14HardwareSerial5beginEm+0xd4>
     f08:	48 2b       	or	r20, r24
     f0a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     f0c:	ee 89       	ldd	r30, Y+22	; 0x16
     f0e:	ff 89       	ldd	r31, Y+23	; 0x17
     f10:	80 81       	ld	r24, Z
     f12:	0d 8c       	ldd	r0, Y+29	; 0x1d
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <_ZN14HardwareSerial5beginEm+0xee>
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <_ZN14HardwareSerial5beginEm+0xea>
     f1e:	20 95       	com	r18
     f20:	28 23       	and	r18, r24
     f22:	20 83       	st	Z, r18
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	08 95       	ret

00000f38 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     f38:	dc 01       	movw	r26, r24
     f3a:	1c 96       	adiw	r26, 0x0c	; 12
     f3c:	ed 91       	ld	r30, X+
     f3e:	fc 91       	ld	r31, X
     f40:	1d 97       	sbiw	r26, 0x0d	; 13
     f42:	e0 5c       	subi	r30, 0xC0	; 192
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	21 91       	ld	r18, Z+
     f48:	31 91       	ld	r19, Z+
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	28 1b       	sub	r18, r24
     f50:	39 0b       	sbc	r19, r25
     f52:	2f 73       	andi	r18, 0x3F	; 63
     f54:	30 70       	andi	r19, 0x00	; 0
}
     f56:	c9 01       	movw	r24, r18
     f58:	08 95       	ret

00000f5a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     f5a:	dc 01       	movw	r26, r24
     f5c:	1c 96       	adiw	r26, 0x0c	; 12
     f5e:	ed 91       	ld	r30, X+
     f60:	fc 91       	ld	r31, X
     f62:	1d 97       	sbiw	r26, 0x0d	; 13
     f64:	e0 5c       	subi	r30, 0xC0	; 192
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	20 81       	ld	r18, Z
     f6a:	31 81       	ldd	r19, Z+1	; 0x01
     f6c:	e0 54       	subi	r30, 0x40	; 64
     f6e:	f0 40       	sbci	r31, 0x00	; 0
     f70:	df 01       	movw	r26, r30
     f72:	ae 5b       	subi	r26, 0xBE	; 190
     f74:	bf 4f       	sbci	r27, 0xFF	; 255
     f76:	8d 91       	ld	r24, X+
     f78:	9c 91       	ld	r25, X
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	28 17       	cp	r18, r24
     f7e:	39 07       	cpc	r19, r25
     f80:	19 f4       	brne	.+6      	; 0xf88 <_ZN14HardwareSerial4peekEv+0x2e>
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     f88:	8d 91       	ld	r24, X+
     f8a:	9c 91       	ld	r25, X
     f8c:	e8 0f       	add	r30, r24
     f8e:	f9 1f       	adc	r31, r25
     f90:	80 81       	ld	r24, Z
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     f96:	c9 01       	movw	r24, r18
     f98:	08 95       	ret

00000f9a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     f9a:	dc 01       	movw	r26, r24
     f9c:	1c 96       	adiw	r26, 0x0c	; 12
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	1d 97       	sbiw	r26, 0x0d	; 13
     fa4:	e0 5c       	subi	r30, 0xC0	; 192
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	20 81       	ld	r18, Z
     faa:	31 81       	ldd	r19, Z+1	; 0x01
     fac:	e0 54       	subi	r30, 0x40	; 64
     fae:	f0 40       	sbci	r31, 0x00	; 0
     fb0:	df 01       	movw	r26, r30
     fb2:	ae 5b       	subi	r26, 0xBE	; 190
     fb4:	bf 4f       	sbci	r27, 0xFF	; 255
     fb6:	8d 91       	ld	r24, X+
     fb8:	9c 91       	ld	r25, X
     fba:	11 97       	sbiw	r26, 0x01	; 1
     fbc:	28 17       	cp	r18, r24
     fbe:	39 07       	cpc	r19, r25
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <_ZN14HardwareSerial4readEv+0x2e>
     fc2:	2f ef       	ldi	r18, 0xFF	; 255
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     fc8:	8d 91       	ld	r24, X+
     fca:	9c 91       	ld	r25, X
     fcc:	11 97       	sbiw	r26, 0x01	; 1
     fce:	e8 0f       	add	r30, r24
     fd0:	f9 1f       	adc	r31, r25
     fd2:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     fd4:	8d 91       	ld	r24, X+
     fd6:	9c 91       	ld	r25, X
     fd8:	11 97       	sbiw	r26, 0x01	; 1
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	8f 73       	andi	r24, 0x3F	; 63
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	9c 93       	st	X, r25
     fe4:	8e 93       	st	-X, r24
    return c;
     fe6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     fe8:	c9 01       	movw	r24, r18
     fea:	08 95       	ret

00000fec <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     fec:	fc 01       	movw	r30, r24
     fee:	86 85       	ldd	r24, Z+14	; 0x0e
     ff0:	97 85       	ldd	r25, Z+15	; 0x0f
     ff2:	dc 01       	movw	r26, r24
     ff4:	a0 5c       	subi	r26, 0xC0	; 192
     ff6:	bf 4f       	sbci	r27, 0xFF	; 255
     ff8:	fc 01       	movw	r30, r24
     ffa:	ee 5b       	subi	r30, 0xBE	; 190
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	2d 91       	ld	r18, X+
    1000:	3c 91       	ld	r19, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	c1 f7       	brne	.-16     	; 0xffe <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    100e:	08 95       	ret

00001010 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	ec 01       	movw	r28, r24
    1016:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1018:	ee 85       	ldd	r30, Y+14	; 0x0e
    101a:	ff 85       	ldd	r31, Y+15	; 0x0f
    101c:	e0 5c       	subi	r30, 0xC0	; 192
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	e0 54       	subi	r30, 0x40	; 64
    1026:	f0 40       	sbci	r31, 0x00	; 0
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	60 e4       	ldi	r22, 0x40	; 64
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__divmodhi4>
    1032:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1034:	df 01       	movw	r26, r30
    1036:	ae 5b       	subi	r26, 0xBE	; 190
    1038:	bf 4f       	sbci	r27, 0xFF	; 255
    103a:	8d 91       	ld	r24, X+
    103c:	9c 91       	ld	r25, X
    103e:	11 97       	sbiw	r26, 0x01	; 1
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	d1 f3       	breq	.-12     	; 0x103a <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1046:	e0 5c       	subi	r30, 0xC0	; 192
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	e0 54       	subi	r30, 0x40	; 64
    1050:	f0 40       	sbci	r31, 0x00	; 0
    1052:	e8 0f       	add	r30, r24
    1054:	f9 1f       	adc	r31, r25
    1056:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    1058:	ee 85       	ldd	r30, Y+14	; 0x0e
    105a:	ff 85       	ldd	r31, Y+15	; 0x0f
    105c:	e0 5c       	subi	r30, 0xC0	; 192
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	31 83       	std	Z+1, r19	; 0x01
    1062:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1064:	ee 89       	ldd	r30, Y+22	; 0x16
    1066:	ff 89       	ldd	r31, Y+23	; 0x17
    1068:	20 81       	ld	r18, Z
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <_ZN14HardwareSerial5writeEh+0x66>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <_ZN14HardwareSerial5writeEh+0x62>
    107a:	28 2b       	or	r18, r24
    107c:	20 83       	st	Z, r18
  
  return 1;
}
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1088:	10 92 3b 05 	sts	0x053B, r1
    108c:	10 92 3a 05 	sts	0x053A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1090:	88 ee       	ldi	r24, 0xE8	; 232
    1092:	93 e0       	ldi	r25, 0x03	; 3
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	80 93 3c 05 	sts	0x053C, r24
    109c:	90 93 3d 05 	sts	0x053D, r25
    10a0:	a0 93 3e 05 	sts	0x053E, r26
    10a4:	b0 93 3f 05 	sts	0x053F, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    10a8:	80 ec       	ldi	r24, 0xC0	; 192
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	90 93 39 05 	sts	0x0539, r25
    10b0:	80 93 38 05 	sts	0x0538, r24
{
  _rx_buffer = rx_buffer;
    10b4:	80 eb       	ldi	r24, 0xB0	; 176
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	90 93 45 05 	sts	0x0545, r25
    10bc:	80 93 44 05 	sts	0x0544, r24
  _tx_buffer = tx_buffer;
    10c0:	84 ef       	ldi	r24, 0xF4	; 244
    10c2:	94 e0       	ldi	r25, 0x04	; 4
    10c4:	90 93 47 05 	sts	0x0547, r25
    10c8:	80 93 46 05 	sts	0x0546, r24
  _ubrrh = ubrrh;
    10cc:	85 ec       	ldi	r24, 0xC5	; 197
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	90 93 49 05 	sts	0x0549, r25
    10d4:	80 93 48 05 	sts	0x0548, r24
  _ubrrl = ubrrl;
    10d8:	84 ec       	ldi	r24, 0xC4	; 196
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	90 93 4b 05 	sts	0x054B, r25
    10e0:	80 93 4a 05 	sts	0x054A, r24
  _ucsra = ucsra;
    10e4:	80 ec       	ldi	r24, 0xC0	; 192
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	90 93 4d 05 	sts	0x054D, r25
    10ec:	80 93 4c 05 	sts	0x054C, r24
  _ucsrb = ucsrb;
    10f0:	81 ec       	ldi	r24, 0xC1	; 193
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	90 93 4f 05 	sts	0x054F, r25
    10f8:	80 93 4e 05 	sts	0x054E, r24
  _udr = udr;
    10fc:	86 ec       	ldi	r24, 0xC6	; 198
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 51 05 	sts	0x0551, r25
    1104:	80 93 50 05 	sts	0x0550, r24
  _rxen = rxen;
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	80 93 52 05 	sts	0x0552, r24
  _txen = txen;
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	80 93 53 05 	sts	0x0553, r24
  _rxcie = rxcie;
    1114:	87 e0       	ldi	r24, 0x07	; 7
    1116:	80 93 54 05 	sts	0x0554, r24
  _udrie = udrie;
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	80 93 55 05 	sts	0x0555, r24
  _u2x = u2x;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 56 05 	sts	0x0556, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1126:	08 95       	ret

00001128 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	7c 01       	movw	r14, r24
    113a:	6b 01       	movw	r12, r22
    113c:	8a 01       	movw	r16, r20
    113e:	c0 e0       	ldi	r28, 0x00	; 0
    1140:	d0 e0       	ldi	r29, 0x00	; 0
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1144:	d6 01       	movw	r26, r12
    1146:	6d 91       	ld	r22, X+
    1148:	6d 01       	movw	r12, r26
    114a:	d7 01       	movw	r26, r14
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	01 90       	ld	r0, Z+
    1152:	f0 81       	ld	r31, Z
    1154:	e0 2d       	mov	r30, r0
    1156:	c7 01       	movw	r24, r14
    1158:	09 95       	icall
    115a:	c8 0f       	add	r28, r24
    115c:	d9 1f       	adc	r29, r25
    115e:	01 50       	subi	r16, 0x01	; 1
    1160:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1162:	01 15       	cp	r16, r1
    1164:	11 05       	cpc	r17, r1
    1166:	71 f7       	brne	.-36     	; 0x1144 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1168:	ce 01       	movw	r24, r28
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	08 95       	ret

0000117c <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	00 f5       	brcc	.+64     	; 0x11c0 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    1180:	e8 2f       	mov	r30, r24
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	e9 5a       	subi	r30, 0xA9	; 169
    118a:	fa 4f       	sbci	r31, 0xFA	; 250
    118c:	71 83       	std	Z+1, r23	; 0x01
    118e:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1190:	88 23       	and	r24, r24
    1192:	19 f0       	breq	.+6      	; 0x119a <attachInterrupt+0x1e>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <attachInterrupt+0x44>
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    119a:	80 91 69 00 	lds	r24, 0x0069
    119e:	8c 7f       	andi	r24, 0xFC	; 252
    11a0:	84 2b       	or	r24, r20
    11a2:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    11a6:	e8 9a       	sbi	0x1d, 0	; 29
    11a8:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    11aa:	80 91 69 00 	lds	r24, 0x0069
    11ae:	44 0f       	add	r20, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	44 0f       	add	r20, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	83 7f       	andi	r24, 0xF3	; 243
    11b8:	84 2b       	or	r24, r20
    11ba:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    11be:	e9 9a       	sbi	0x1d, 1	; 29
    11c0:	08 95       	ret

000011c2 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    11e4:	80 91 57 05 	lds	r24, 0x0557
    11e8:	90 91 58 05 	lds	r25, 0x0558
    11ec:	89 2b       	or	r24, r25
    11ee:	29 f0       	breq	.+10     	; 0x11fa <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    11f0:	e0 91 57 05 	lds	r30, 0x0557
    11f4:	f0 91 58 05 	lds	r31, 0x0558
    11f8:	09 95       	icall
}
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <__vector_2>:

SIGNAL(INT1_vect) {
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	2f 93       	push	r18
    1228:	3f 93       	push	r19
    122a:	4f 93       	push	r20
    122c:	5f 93       	push	r21
    122e:	6f 93       	push	r22
    1230:	7f 93       	push	r23
    1232:	8f 93       	push	r24
    1234:	9f 93       	push	r25
    1236:	af 93       	push	r26
    1238:	bf 93       	push	r27
    123a:	ef 93       	push	r30
    123c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    123e:	80 91 59 05 	lds	r24, 0x0559
    1242:	90 91 5a 05 	lds	r25, 0x055A
    1246:	89 2b       	or	r24, r25
    1248:	29 f0       	breq	.+10     	; 0x1254 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    124a:	e0 91 59 05 	lds	r30, 0x0559
    124e:	f0 91 5a 05 	lds	r31, 0x055A
    1252:	09 95       	icall
}
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	bf 91       	pop	r27
    125a:	af 91       	pop	r26
    125c:	9f 91       	pop	r25
    125e:	8f 91       	pop	r24
    1260:	7f 91       	pop	r23
    1262:	6f 91       	pop	r22
    1264:	5f 91       	pop	r21
    1266:	4f 91       	pop	r20
    1268:	3f 91       	pop	r19
    126a:	2f 91       	pop	r18
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    1276:	2f 92       	push	r2
    1278:	3f 92       	push	r3
    127a:	4f 92       	push	r4
    127c:	5f 92       	push	r5
    127e:	6f 92       	push	r6
    1280:	7f 92       	push	r7
    1282:	8f 92       	push	r8
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	3b 01       	movw	r6, r22
    12a0:	4c 01       	movw	r8, r24
    12a2:	19 01       	movw	r2, r18
    12a4:	2a 01       	movw	r4, r20
    12a6:	6d 89       	ldd	r22, Y+21	; 0x15
    12a8:	7e 89       	ldd	r23, Y+22	; 0x16
    12aa:	8f 89       	ldd	r24, Y+23	; 0x17
    12ac:	98 8d       	ldd	r25, Y+24	; 0x18
    12ae:	6a 19       	sub	r22, r10
    12b0:	7b 09       	sbc	r23, r11
    12b2:	8c 09       	sbc	r24, r12
    12b4:	9d 09       	sbc	r25, r13
    12b6:	62 1a       	sub	r6, r18
    12b8:	73 0a       	sbc	r7, r19
    12ba:	84 0a       	sbc	r8, r20
    12bc:	95 0a       	sbc	r9, r21
    12be:	a4 01       	movw	r20, r8
    12c0:	93 01       	movw	r18, r6
    12c2:	0e 94 b5 0b 	call	0x176a	; 0x176a <__mulsi3>
    12c6:	e2 18       	sub	r14, r2
    12c8:	f3 08       	sbc	r15, r3
    12ca:	04 09       	sbc	r16, r4
    12cc:	15 09       	sbc	r17, r5
    12ce:	a8 01       	movw	r20, r16
    12d0:	97 01       	movw	r18, r14
    12d2:	0e 94 09 0c 	call	0x1812	; 0x1812 <__divmodsi4>
    12d6:	2a 0d       	add	r18, r10
    12d8:	3b 1d       	adc	r19, r11
    12da:	4c 1d       	adc	r20, r12
    12dc:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    12de:	b9 01       	movw	r22, r18
    12e0:	ca 01       	movw	r24, r20
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	9f 90       	pop	r9
    12f8:	8f 90       	pop	r8
    12fa:	7f 90       	pop	r7
    12fc:	6f 90       	pop	r6
    12fe:	5f 90       	pop	r5
    1300:	4f 90       	pop	r4
    1302:	3f 90       	pop	r3
    1304:	2f 90       	pop	r2
    1306:	08 95       	ret

00001308 <main>:
#include <Arduino.h>

int main(void)
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
{
	init();
    130c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    1310:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1314:	ca eb       	ldi	r28, 0xBA	; 186
    1316:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1318:	0e 94 df 02 	call	0x5be	; 0x5be <loop>
		if (serialEventRun) serialEventRun();
    131c:	20 97       	sbiw	r28, 0x00	; 0
    131e:	e1 f3       	breq	.-8      	; 0x1318 <main+0x10>
    1320:	0e 94 ba 06 	call	0xd74	; 0xd74 <_Z14serialEventRunv>
    1324:	f9 cf       	rjmp	.-14     	; 0x1318 <main+0x10>

00001326 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    133c:	80 91 5f 05 	lds	r24, 0x055F
    1340:	90 91 60 05 	lds	r25, 0x0560
    1344:	a0 91 61 05 	lds	r26, 0x0561
    1348:	b0 91 62 05 	lds	r27, 0x0562
	unsigned char f = timer0_fract;
    134c:	30 91 63 05 	lds	r19, 0x0563

	m += MILLIS_INC;
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	a1 1d       	adc	r26, r1
    1354:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1356:	23 2f       	mov	r18, r19
    1358:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    135a:	2d 37       	cpi	r18, 0x7D	; 125
    135c:	20 f0       	brcs	.+8      	; 0x1366 <__vector_16+0x40>
		f -= FRACT_MAX;
    135e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	a1 1d       	adc	r26, r1
    1364:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1366:	20 93 63 05 	sts	0x0563, r18
	timer0_millis = m;
    136a:	80 93 5f 05 	sts	0x055F, r24
    136e:	90 93 60 05 	sts	0x0560, r25
    1372:	a0 93 61 05 	sts	0x0561, r26
    1376:	b0 93 62 05 	sts	0x0562, r27
	timer0_overflow_count++;
    137a:	80 91 5b 05 	lds	r24, 0x055B
    137e:	90 91 5c 05 	lds	r25, 0x055C
    1382:	a0 91 5d 05 	lds	r26, 0x055D
    1386:	b0 91 5e 05 	lds	r27, 0x055E
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	a1 1d       	adc	r26, r1
    138e:	b1 1d       	adc	r27, r1
    1390:	80 93 5b 05 	sts	0x055B, r24
    1394:	90 93 5c 05 	sts	0x055C, r25
    1398:	a0 93 5d 05 	sts	0x055D, r26
    139c:	b0 93 5e 05 	sts	0x055E, r27
}
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	3f 91       	pop	r19
    13aa:	2f 91       	pop	r18
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    13b6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    13b8:	f8 94       	cli
	m = timer0_millis;
    13ba:	20 91 5f 05 	lds	r18, 0x055F
    13be:	30 91 60 05 	lds	r19, 0x0560
    13c2:	40 91 61 05 	lds	r20, 0x0561
    13c6:	50 91 62 05 	lds	r21, 0x0562
	SREG = oldSREG;
    13ca:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    13cc:	b9 01       	movw	r22, r18
    13ce:	ca 01       	movw	r24, r20
    13d0:	08 95       	ret

000013d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    13d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    13d4:	84 b5       	in	r24, 0x24	; 36
    13d6:	82 60       	ori	r24, 0x02	; 2
    13d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13da:	84 b5       	in	r24, 0x24	; 36
    13dc:	81 60       	ori	r24, 0x01	; 1
    13de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13e0:	85 b5       	in	r24, 0x25	; 37
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    13e6:	85 b5       	in	r24, 0x25	; 37
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    13ec:	ee e6       	ldi	r30, 0x6E	; 110
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	81 60       	ori	r24, 0x01	; 1
    13f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    13f6:	e1 e8       	ldi	r30, 0x81	; 129
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    13fc:	80 81       	ld	r24, Z
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1402:	80 81       	ld	r24, Z
    1404:	81 60       	ori	r24, 0x01	; 1
    1406:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1408:	e0 e8       	ldi	r30, 0x80	; 128
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	81 60       	ori	r24, 0x01	; 1
    1410:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1412:	e1 eb       	ldi	r30, 0xB1	; 177
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	84 60       	ori	r24, 0x04	; 4
    141a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    141c:	e0 eb       	ldi	r30, 0xB0	; 176
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1426:	ea e7       	ldi	r30, 0x7A	; 122
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	84 60       	ori	r24, 0x04	; 4
    142e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1430:	80 81       	ld	r24, Z
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1436:	80 81       	ld	r24, Z
    1438:	81 60       	ori	r24, 0x01	; 1
    143a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    143c:	80 81       	ld	r24, Z
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1442:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1446:	08 95       	ret

00001448 <analogRead>:

int analogRead(uint8_t pin)
{
    1448:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    144a:	8e 30       	cpi	r24, 0x0E	; 14
    144c:	08 f0       	brcs	.+2      	; 0x1450 <analogRead+0x8>
    144e:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1450:	97 70       	andi	r25, 0x07	; 7
    1452:	80 91 db 01 	lds	r24, 0x01DB
    1456:	82 95       	swap	r24
    1458:	88 0f       	add	r24, r24
    145a:	88 0f       	add	r24, r24
    145c:	80 7c       	andi	r24, 0xC0	; 192
    145e:	89 2b       	or	r24, r25
    1460:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1464:	80 91 7a 00 	lds	r24, 0x007A
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    146e:	80 91 7a 00 	lds	r24, 0x007A
    1472:	86 fd       	sbrc	r24, 6
    1474:	fc cf       	rjmp	.-8      	; 0x146e <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1476:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    147a:	40 91 79 00 	lds	r20, 0x0079
    147e:	94 2f       	mov	r25, r20
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	28 2b       	or	r18, r24
    1486:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1488:	c9 01       	movw	r24, r18
    148a:	08 95       	ret

0000148c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	18 2f       	mov	r17, r24
    1494:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	0e 94 a6 0a 	call	0x154c	; 0x154c <pinMode>
	if (val == 0)
    149c:	20 97       	sbiw	r28, 0x00	; 0
    149e:	09 f4       	brne	.+2      	; 0x14a2 <analogWrite+0x16>
    14a0:	4a c0       	rjmp	.+148    	; 0x1536 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    14a2:	cf 3f       	cpi	r28, 0xFF	; 255
    14a4:	d1 05       	cpc	r29, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <analogWrite+0x1e>
    14a8:	49 c0       	rjmp	.+146    	; 0x153c <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    14aa:	e1 2f       	mov	r30, r17
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	e2 55       	subi	r30, 0x52	; 82
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	84 91       	lpm	r24, Z+
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	c1 f0       	breq	.+48     	; 0x14e8 <analogWrite+0x5c>
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	28 f4       	brcc	.+10     	; 0x14c6 <analogWrite+0x3a>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	51 f0       	breq	.+20     	; 0x14d4 <analogWrite+0x48>
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	b1 f5       	brne	.+108    	; 0x1530 <analogWrite+0xa4>
    14c4:	0c c0       	rjmp	.+24     	; 0x14de <analogWrite+0x52>
    14c6:	86 30       	cpi	r24, 0x06	; 6
    14c8:	19 f1       	breq	.+70     	; 0x1510 <analogWrite+0x84>
    14ca:	87 30       	cpi	r24, 0x07	; 7
    14cc:	49 f1       	breq	.+82     	; 0x1520 <analogWrite+0x94>
    14ce:	84 30       	cpi	r24, 0x04	; 4
    14d0:	79 f5       	brne	.+94     	; 0x1530 <analogWrite+0xa4>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    14d4:	84 b5       	in	r24, 0x24	; 36
    14d6:	80 68       	ori	r24, 0x80	; 128
    14d8:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    14da:	c7 bd       	out	0x27, r28	; 39
    14dc:	33 c0       	rjmp	.+102    	; 0x1544 <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    14de:	84 b5       	in	r24, 0x24	; 36
    14e0:	80 62       	ori	r24, 0x20	; 32
    14e2:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    14e4:	c8 bd       	out	0x28, r28	; 40
    14e6:	2e c0       	rjmp	.+92     	; 0x1544 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    14e8:	80 91 80 00 	lds	r24, 0x0080
    14ec:	80 68       	ori	r24, 0x80	; 128
    14ee:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    14f2:	d0 93 89 00 	sts	0x0089, r29
    14f6:	c0 93 88 00 	sts	0x0088, r28
    14fa:	24 c0       	rjmp	.+72     	; 0x1544 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    14fc:	80 91 80 00 	lds	r24, 0x0080
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    1506:	d0 93 8b 00 	sts	0x008B, r29
    150a:	c0 93 8a 00 	sts	0x008A, r28
    150e:	1a c0       	rjmp	.+52     	; 0x1544 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1510:	80 91 b0 00 	lds	r24, 0x00B0
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    151a:	c0 93 b3 00 	sts	0x00B3, r28
    151e:	12 c0       	rjmp	.+36     	; 0x1544 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1520:	80 91 b0 00 	lds	r24, 0x00B0
    1524:	80 62       	ori	r24, 0x20	; 32
    1526:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    152a:	c0 93 b4 00 	sts	0x00B4, r28
    152e:	0a c0       	rjmp	.+20     	; 0x1544 <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1530:	c0 38       	cpi	r28, 0x80	; 128
    1532:	d1 05       	cpc	r29, r1
    1534:	1c f4       	brge	.+6      	; 0x153c <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    1536:	81 2f       	mov	r24, r17
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    153c:	81 2f       	mov	r24, r17
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
				}
		}
	}
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	08 95       	ret

0000154c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    154c:	48 2f       	mov	r20, r24
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	ca 01       	movw	r24, r20
    1552:	86 56       	subi	r24, 0x66	; 102
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	fc 01       	movw	r30, r24
    1558:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    155a:	4a 57       	subi	r20, 0x7A	; 122
    155c:	5f 4f       	sbci	r21, 0xFF	; 255
    155e:	fa 01       	movw	r30, r20
    1560:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    1562:	88 23       	and	r24, r24
    1564:	c1 f0       	breq	.+48     	; 0x1596 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1566:	e8 2f       	mov	r30, r24
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	e8 59       	subi	r30, 0x98	; 152
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	a5 91       	lpm	r26, Z+
    1574:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    1576:	66 23       	and	r22, r22
    1578:	41 f4       	brne	.+16     	; 0x158a <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    157a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    157c:	f8 94       	cli
		*reg &= ~bit;
    157e:	8c 91       	ld	r24, X
    1580:	20 95       	com	r18
    1582:	82 23       	and	r24, r18
    1584:	8c 93       	st	X, r24
		SREG = oldSREG;
    1586:	9f bf       	out	0x3f, r25	; 63
    1588:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    158a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    158c:	f8 94       	cli
		*reg |= bit;
    158e:	8c 91       	ld	r24, X
    1590:	82 2b       	or	r24, r18
    1592:	8c 93       	st	X, r24
		SREG = oldSREG;
    1594:	9f bf       	out	0x3f, r25	; 63
    1596:	08 95       	ret

00001598 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1598:	48 2f       	mov	r20, r24
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	ca 01       	movw	r24, r20
    159e:	82 55       	subi	r24, 0x52	; 82
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	fc 01       	movw	r30, r24
    15a4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    15a6:	ca 01       	movw	r24, r20
    15a8:	86 56       	subi	r24, 0x66	; 102
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	fc 01       	movw	r30, r24
    15ae:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    15b0:	4a 57       	subi	r20, 0x7A	; 122
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	fa 01       	movw	r30, r20
    15b6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    15b8:	33 23       	and	r19, r19
    15ba:	09 f4       	brne	.+2      	; 0x15be <digitalWrite+0x26>
    15bc:	40 c0       	rjmp	.+128    	; 0x163e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15be:	22 23       	and	r18, r18
    15c0:	51 f1       	breq	.+84     	; 0x1616 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    15c2:	23 30       	cpi	r18, 0x03	; 3
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <digitalWrite+0x4a>
    15c6:	24 30       	cpi	r18, 0x04	; 4
    15c8:	28 f4       	brcc	.+10     	; 0x15d4 <digitalWrite+0x3c>
    15ca:	21 30       	cpi	r18, 0x01	; 1
    15cc:	a1 f0       	breq	.+40     	; 0x15f6 <digitalWrite+0x5e>
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	11 f5       	brne	.+68     	; 0x1616 <digitalWrite+0x7e>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <digitalWrite+0x64>
    15d4:	26 30       	cpi	r18, 0x06	; 6
    15d6:	b1 f0       	breq	.+44     	; 0x1604 <digitalWrite+0x6c>
    15d8:	27 30       	cpi	r18, 0x07	; 7
    15da:	c1 f0       	breq	.+48     	; 0x160c <digitalWrite+0x74>
    15dc:	24 30       	cpi	r18, 0x04	; 4
    15de:	d9 f4       	brne	.+54     	; 0x1616 <digitalWrite+0x7e>
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    15e2:	80 91 80 00 	lds	r24, 0x0080
    15e6:	8f 77       	andi	r24, 0x7F	; 127
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    15ea:	80 91 80 00 	lds	r24, 0x0080
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	80 93 80 00 	sts	0x0080, r24
    15f4:	10 c0       	rjmp	.+32     	; 0x1616 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    15f6:	84 b5       	in	r24, 0x24	; 36
    15f8:	8f 77       	andi	r24, 0x7F	; 127
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    15fc:	84 b5       	in	r24, 0x24	; 36
    15fe:	8f 7d       	andi	r24, 0xDF	; 223
    1600:	84 bd       	out	0x24, r24	; 36
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1604:	80 91 b0 00 	lds	r24, 0x00B0
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    160c:	80 91 b0 00 	lds	r24, 0x00B0
    1610:	8f 7d       	andi	r24, 0xDF	; 223
    1612:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1616:	e3 2f       	mov	r30, r19
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	ee 58       	subi	r30, 0x8E	; 142
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	a5 91       	lpm	r26, Z+
    1624:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1626:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1628:	f8 94       	cli

	if (val == LOW) {
    162a:	66 23       	and	r22, r22
    162c:	21 f4       	brne	.+8      	; 0x1636 <digitalWrite+0x9e>
		*out &= ~bit;
    162e:	8c 91       	ld	r24, X
    1630:	90 95       	com	r25
    1632:	89 23       	and	r24, r25
    1634:	02 c0       	rjmp	.+4      	; 0x163a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1636:	8c 91       	ld	r24, X
    1638:	89 2b       	or	r24, r25
    163a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    163c:	2f bf       	out	0x3f, r18	; 63
    163e:	08 95       	ret

00001640 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1640:	68 2f       	mov	r22, r24
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	cb 01       	movw	r24, r22
    1646:	82 55       	subi	r24, 0x52	; 82
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	fc 01       	movw	r30, r24
    164c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    164e:	cb 01       	movw	r24, r22
    1650:	86 56       	subi	r24, 0x66	; 102
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	fc 01       	movw	r30, r24
    1656:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    1658:	6a 57       	subi	r22, 0x7A	; 122
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	fb 01       	movw	r30, r22
    165e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    1660:	99 23       	and	r25, r25
    1662:	19 f4       	brne	.+6      	; 0x166a <digitalRead+0x2a>
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3c c0       	rjmp	.+120    	; 0x16e2 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    166a:	22 23       	and	r18, r18
    166c:	51 f1       	breq	.+84     	; 0x16c2 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    166e:	23 30       	cpi	r18, 0x03	; 3
    1670:	71 f0       	breq	.+28     	; 0x168e <digitalRead+0x4e>
    1672:	24 30       	cpi	r18, 0x04	; 4
    1674:	28 f4       	brcc	.+10     	; 0x1680 <digitalRead+0x40>
    1676:	21 30       	cpi	r18, 0x01	; 1
    1678:	a1 f0       	breq	.+40     	; 0x16a2 <digitalRead+0x62>
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	11 f5       	brne	.+68     	; 0x16c2 <digitalRead+0x82>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <digitalRead+0x68>
    1680:	26 30       	cpi	r18, 0x06	; 6
    1682:	b1 f0       	breq	.+44     	; 0x16b0 <digitalRead+0x70>
    1684:	27 30       	cpi	r18, 0x07	; 7
    1686:	c1 f0       	breq	.+48     	; 0x16b8 <digitalRead+0x78>
    1688:	24 30       	cpi	r18, 0x04	; 4
    168a:	d9 f4       	brne	.+54     	; 0x16c2 <digitalRead+0x82>
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    168e:	80 91 80 00 	lds	r24, 0x0080
    1692:	8f 77       	andi	r24, 0x7F	; 127
    1694:	03 c0       	rjmp	.+6      	; 0x169c <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1696:	80 91 80 00 	lds	r24, 0x0080
    169a:	8f 7d       	andi	r24, 0xDF	; 223
    169c:	80 93 80 00 	sts	0x0080, r24
    16a0:	10 c0       	rjmp	.+32     	; 0x16c2 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    16a2:	84 b5       	in	r24, 0x24	; 36
    16a4:	8f 77       	andi	r24, 0x7F	; 127
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    16a8:	84 b5       	in	r24, 0x24	; 36
    16aa:	8f 7d       	andi	r24, 0xDF	; 223
    16ac:	84 bd       	out	0x24, r24	; 36
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    16b0:	80 91 b0 00 	lds	r24, 0x00B0
    16b4:	8f 77       	andi	r24, 0x7F	; 127
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    16b8:	80 91 b0 00 	lds	r24, 0x00B0
    16bc:	8f 7d       	andi	r24, 0xDF	; 223
    16be:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    16c2:	89 2f       	mov	r24, r25
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	84 58       	subi	r24, 0x84	; 132
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	fc 01       	movw	r30, r24
    16d0:	a5 91       	lpm	r26, Z+
    16d2:	b4 91       	lpm	r27, Z+
    16d4:	8c 91       	ld	r24, X
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	84 23       	and	r24, r20
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <digitalRead+0xa2>
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    16e2:	c9 01       	movw	r24, r18
    16e4:	08 95       	ret

000016e6 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	e8 2e       	mov	r14, r24
    16fa:	f6 2e       	mov	r15, r22
    16fc:	b4 2e       	mov	r11, r20
    16fe:	c7 e0       	ldi	r28, 0x07	; 7
    1700:	d0 e0       	ldi	r29, 0x00	; 0
    1702:	02 2f       	mov	r16, r18
    1704:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    1706:	87 e0       	ldi	r24, 0x07	; 7
    1708:	c8 2e       	mov	r12, r24
    170a:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    170c:	bb 20       	and	r11, r11
    170e:	59 f4       	brne	.+22     	; 0x1726 <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1710:	b6 01       	movw	r22, r12
    1712:	6c 1b       	sub	r22, r28
    1714:	7d 0b       	sbc	r23, r29
    1716:	c8 01       	movw	r24, r16
    1718:	02 c0       	rjmp	.+4      	; 0x171e <shiftOut+0x38>
    171a:	95 95       	asr	r25
    171c:	87 95       	ror	r24
    171e:	6a 95       	dec	r22
    1720:	e2 f7       	brpl	.-8      	; 0x171a <shiftOut+0x34>
    1722:	bc 01       	movw	r22, r24
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    1726:	b8 01       	movw	r22, r16
    1728:	0c 2e       	mov	r0, r28
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <shiftOut+0x4a>
    172c:	75 95       	asr	r23
    172e:	67 95       	ror	r22
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <shiftOut+0x46>
    1734:	61 70       	andi	r22, 0x01	; 1
    1736:	8e 2d       	mov	r24, r14
    1738:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    173c:	8f 2d       	mov	r24, r15
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    1744:	8f 2d       	mov	r24, r15
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	0e 94 cc 0a 	call	0x1598	; 0x1598 <digitalWrite>
    174c:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	cf 3f       	cpi	r28, 0xFF	; 255
    1752:	d9 07       	cpc	r29, r25
    1754:	d9 f6       	brne	.-74     	; 0x170c <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	bf 90       	pop	r11
    1768:	08 95       	ret

0000176a <__mulsi3>:
    176a:	62 9f       	mul	r22, r18
    176c:	d0 01       	movw	r26, r0
    176e:	73 9f       	mul	r23, r19
    1770:	f0 01       	movw	r30, r0
    1772:	82 9f       	mul	r24, r18
    1774:	e0 0d       	add	r30, r0
    1776:	f1 1d       	adc	r31, r1
    1778:	64 9f       	mul	r22, r20
    177a:	e0 0d       	add	r30, r0
    177c:	f1 1d       	adc	r31, r1
    177e:	92 9f       	mul	r25, r18
    1780:	f0 0d       	add	r31, r0
    1782:	83 9f       	mul	r24, r19
    1784:	f0 0d       	add	r31, r0
    1786:	74 9f       	mul	r23, r20
    1788:	f0 0d       	add	r31, r0
    178a:	65 9f       	mul	r22, r21
    178c:	f0 0d       	add	r31, r0
    178e:	99 27       	eor	r25, r25
    1790:	72 9f       	mul	r23, r18
    1792:	b0 0d       	add	r27, r0
    1794:	e1 1d       	adc	r30, r1
    1796:	f9 1f       	adc	r31, r25
    1798:	63 9f       	mul	r22, r19
    179a:	b0 0d       	add	r27, r0
    179c:	e1 1d       	adc	r30, r1
    179e:	f9 1f       	adc	r31, r25
    17a0:	bd 01       	movw	r22, r26
    17a2:	cf 01       	movw	r24, r30
    17a4:	11 24       	eor	r1, r1
    17a6:	08 95       	ret

000017a8 <__divmodhi4>:
    17a8:	97 fb       	bst	r25, 7
    17aa:	09 2e       	mov	r0, r25
    17ac:	07 26       	eor	r0, r23
    17ae:	0a d0       	rcall	.+20     	; 0x17c4 <__divmodhi4_neg1>
    17b0:	77 fd       	sbrc	r23, 7
    17b2:	04 d0       	rcall	.+8      	; 0x17bc <__divmodhi4_neg2>
    17b4:	49 d0       	rcall	.+146    	; 0x1848 <__udivmodhi4>
    17b6:	06 d0       	rcall	.+12     	; 0x17c4 <__divmodhi4_neg1>
    17b8:	00 20       	and	r0, r0
    17ba:	1a f4       	brpl	.+6      	; 0x17c2 <__divmodhi4_exit>

000017bc <__divmodhi4_neg2>:
    17bc:	70 95       	com	r23
    17be:	61 95       	neg	r22
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255

000017c2 <__divmodhi4_exit>:
    17c2:	08 95       	ret

000017c4 <__divmodhi4_neg1>:
    17c4:	f6 f7       	brtc	.-4      	; 0x17c2 <__divmodhi4_exit>
    17c6:	90 95       	com	r25
    17c8:	81 95       	neg	r24
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	08 95       	ret

000017ce <__udivmodsi4>:
    17ce:	a1 e2       	ldi	r26, 0x21	; 33
    17d0:	1a 2e       	mov	r1, r26
    17d2:	aa 1b       	sub	r26, r26
    17d4:	bb 1b       	sub	r27, r27
    17d6:	fd 01       	movw	r30, r26
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <__udivmodsi4_ep>

000017da <__udivmodsi4_loop>:
    17da:	aa 1f       	adc	r26, r26
    17dc:	bb 1f       	adc	r27, r27
    17de:	ee 1f       	adc	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	a2 17       	cp	r26, r18
    17e4:	b3 07       	cpc	r27, r19
    17e6:	e4 07       	cpc	r30, r20
    17e8:	f5 07       	cpc	r31, r21
    17ea:	20 f0       	brcs	.+8      	; 0x17f4 <__udivmodsi4_ep>
    17ec:	a2 1b       	sub	r26, r18
    17ee:	b3 0b       	sbc	r27, r19
    17f0:	e4 0b       	sbc	r30, r20
    17f2:	f5 0b       	sbc	r31, r21

000017f4 <__udivmodsi4_ep>:
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	1a 94       	dec	r1
    17fe:	69 f7       	brne	.-38     	; 0x17da <__udivmodsi4_loop>
    1800:	60 95       	com	r22
    1802:	70 95       	com	r23
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	bd 01       	movw	r22, r26
    180e:	cf 01       	movw	r24, r30
    1810:	08 95       	ret

00001812 <__divmodsi4>:
    1812:	97 fb       	bst	r25, 7
    1814:	09 2e       	mov	r0, r25
    1816:	05 26       	eor	r0, r21
    1818:	0e d0       	rcall	.+28     	; 0x1836 <__divmodsi4_neg1>
    181a:	57 fd       	sbrc	r21, 7
    181c:	04 d0       	rcall	.+8      	; 0x1826 <__divmodsi4_neg2>
    181e:	d7 df       	rcall	.-82     	; 0x17ce <__udivmodsi4>
    1820:	0a d0       	rcall	.+20     	; 0x1836 <__divmodsi4_neg1>
    1822:	00 1c       	adc	r0, r0
    1824:	38 f4       	brcc	.+14     	; 0x1834 <__divmodsi4_exit>

00001826 <__divmodsi4_neg2>:
    1826:	50 95       	com	r21
    1828:	40 95       	com	r20
    182a:	30 95       	com	r19
    182c:	21 95       	neg	r18
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	4f 4f       	sbci	r20, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255

00001834 <__divmodsi4_exit>:
    1834:	08 95       	ret

00001836 <__divmodsi4_neg1>:
    1836:	f6 f7       	brtc	.-4      	; 0x1834 <__divmodsi4_exit>
    1838:	90 95       	com	r25
    183a:	80 95       	com	r24
    183c:	70 95       	com	r23
    183e:	61 95       	neg	r22
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8f 4f       	sbci	r24, 0xFF	; 255
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	08 95       	ret

00001848 <__udivmodhi4>:
    1848:	aa 1b       	sub	r26, r26
    184a:	bb 1b       	sub	r27, r27
    184c:	51 e1       	ldi	r21, 0x11	; 17
    184e:	07 c0       	rjmp	.+14     	; 0x185e <__udivmodhi4_ep>

00001850 <__udivmodhi4_loop>:
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	a6 17       	cp	r26, r22
    1856:	b7 07       	cpc	r27, r23
    1858:	10 f0       	brcs	.+4      	; 0x185e <__udivmodhi4_ep>
    185a:	a6 1b       	sub	r26, r22
    185c:	b7 0b       	sbc	r27, r23

0000185e <__udivmodhi4_ep>:
    185e:	88 1f       	adc	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	5a 95       	dec	r21
    1864:	a9 f7       	brne	.-22     	; 0x1850 <__udivmodhi4_loop>
    1866:	80 95       	com	r24
    1868:	90 95       	com	r25
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	08 95       	ret

00001870 <__tablejump2__>:
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31

00001874 <__tablejump__>:
    1874:	05 90       	lpm	r0, Z+
    1876:	f4 91       	lpm	r31, Z+
    1878:	e0 2d       	mov	r30, r0
    187a:	09 94       	ijmp

0000187c <snprintf>:
    187c:	ae e0       	ldi	r26, 0x0E	; 14
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e4 e4       	ldi	r30, 0x44	; 68
    1882:	fc e0       	ldi	r31, 0x0C	; 12
    1884:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x1c>
    1888:	0d 89       	ldd	r16, Y+21	; 0x15
    188a:	1e 89       	ldd	r17, Y+22	; 0x16
    188c:	8f 89       	ldd	r24, Y+23	; 0x17
    188e:	98 8d       	ldd	r25, Y+24	; 0x18
    1890:	97 ff       	sbrs	r25, 7
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <snprintf+0x1c>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e8       	ldi	r25, 0x80	; 128
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	1a 83       	std	Y+2, r17	; 0x02
    18a0:	09 83       	std	Y+1, r16	; 0x01
    18a2:	86 e0       	ldi	r24, 0x06	; 6
    18a4:	8c 83       	std	Y+4, r24	; 0x04
    18a6:	9e 01       	movw	r18, r28
    18a8:	25 5e       	subi	r18, 0xE5	; 229
    18aa:	3f 4f       	sbci	r19, 0xFF	; 255
    18ac:	ce 01       	movw	r24, r28
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	69 8d       	ldd	r22, Y+25	; 0x19
    18b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b4:	a9 01       	movw	r20, r18
    18b6:	0e 94 6f 0c 	call	0x18de	; 0x18de <vfprintf>
    18ba:	4d 81       	ldd	r20, Y+5	; 0x05
    18bc:	5e 81       	ldd	r21, Y+6	; 0x06
    18be:	57 fd       	sbrc	r21, 7
    18c0:	0a c0       	rjmp	.+20     	; 0x18d6 <snprintf+0x5a>
    18c2:	2f 81       	ldd	r18, Y+7	; 0x07
    18c4:	38 85       	ldd	r19, Y+8	; 0x08
    18c6:	42 17       	cp	r20, r18
    18c8:	53 07       	cpc	r21, r19
    18ca:	0c f4       	brge	.+2      	; 0x18ce <snprintf+0x52>
    18cc:	9a 01       	movw	r18, r20
    18ce:	02 0f       	add	r16, r18
    18d0:	13 1f       	adc	r17, r19
    18d2:	f8 01       	movw	r30, r16
    18d4:	10 82       	st	Z, r1
    18d6:	2e 96       	adiw	r28, 0x0e	; 14
    18d8:	e4 e0       	ldi	r30, 0x04	; 4
    18da:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x1c>

000018de <vfprintf>:
    18de:	ab e0       	ldi	r26, 0x0B	; 11
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e5 e7       	ldi	r30, 0x75	; 117
    18e4:	fc e0       	ldi	r31, 0x0C	; 12
    18e6:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__>
    18ea:	3c 01       	movw	r6, r24
    18ec:	2b 01       	movw	r4, r22
    18ee:	5a 01       	movw	r10, r20
    18f0:	fc 01       	movw	r30, r24
    18f2:	17 82       	std	Z+7, r1	; 0x07
    18f4:	16 82       	std	Z+6, r1	; 0x06
    18f6:	83 81       	ldd	r24, Z+3	; 0x03
    18f8:	81 fd       	sbrc	r24, 1
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <vfprintf+0x24>
    18fc:	6f ef       	ldi	r22, 0xFF	; 255
    18fe:	7f ef       	ldi	r23, 0xFF	; 255
    1900:	c6 c1       	rjmp	.+908    	; 0x1c8e <vfprintf+0x3b0>
    1902:	9a e0       	ldi	r25, 0x0A	; 10
    1904:	89 2e       	mov	r8, r25
    1906:	1e 01       	movw	r2, r28
    1908:	08 94       	sec
    190a:	21 1c       	adc	r2, r1
    190c:	31 1c       	adc	r3, r1
    190e:	f3 01       	movw	r30, r6
    1910:	23 81       	ldd	r18, Z+3	; 0x03
    1912:	f2 01       	movw	r30, r4
    1914:	23 fd       	sbrc	r18, 3
    1916:	85 91       	lpm	r24, Z+
    1918:	23 ff       	sbrs	r18, 3
    191a:	81 91       	ld	r24, Z+
    191c:	2f 01       	movw	r4, r30
    191e:	88 23       	and	r24, r24
    1920:	09 f4       	brne	.+2      	; 0x1924 <vfprintf+0x46>
    1922:	b2 c1       	rjmp	.+868    	; 0x1c88 <vfprintf+0x3aa>
    1924:	85 32       	cpi	r24, 0x25	; 37
    1926:	39 f4       	brne	.+14     	; 0x1936 <vfprintf+0x58>
    1928:	23 fd       	sbrc	r18, 3
    192a:	85 91       	lpm	r24, Z+
    192c:	23 ff       	sbrs	r18, 3
    192e:	81 91       	ld	r24, Z+
    1930:	2f 01       	movw	r4, r30
    1932:	85 32       	cpi	r24, 0x25	; 37
    1934:	29 f4       	brne	.+10     	; 0x1940 <vfprintf+0x62>
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	b3 01       	movw	r22, r6
    193a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    193e:	e7 cf       	rjmp	.-50     	; 0x190e <vfprintf+0x30>
    1940:	98 2f       	mov	r25, r24
    1942:	ff 24       	eor	r15, r15
    1944:	ee 24       	eor	r14, r14
    1946:	99 24       	eor	r9, r9
    1948:	ff e1       	ldi	r31, 0x1F	; 31
    194a:	ff 15       	cp	r31, r15
    194c:	d0 f0       	brcs	.+52     	; 0x1982 <vfprintf+0xa4>
    194e:	9b 32       	cpi	r25, 0x2B	; 43
    1950:	69 f0       	breq	.+26     	; 0x196c <vfprintf+0x8e>
    1952:	9c 32       	cpi	r25, 0x2C	; 44
    1954:	28 f4       	brcc	.+10     	; 0x1960 <vfprintf+0x82>
    1956:	90 32       	cpi	r25, 0x20	; 32
    1958:	59 f0       	breq	.+22     	; 0x1970 <vfprintf+0x92>
    195a:	93 32       	cpi	r25, 0x23	; 35
    195c:	91 f4       	brne	.+36     	; 0x1982 <vfprintf+0xa4>
    195e:	0e c0       	rjmp	.+28     	; 0x197c <vfprintf+0x9e>
    1960:	9d 32       	cpi	r25, 0x2D	; 45
    1962:	49 f0       	breq	.+18     	; 0x1976 <vfprintf+0x98>
    1964:	90 33       	cpi	r25, 0x30	; 48
    1966:	69 f4       	brne	.+26     	; 0x1982 <vfprintf+0xa4>
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	24 c0       	rjmp	.+72     	; 0x19b4 <vfprintf+0xd6>
    196c:	52 e0       	ldi	r21, 0x02	; 2
    196e:	f5 2a       	or	r15, r21
    1970:	84 e0       	ldi	r24, 0x04	; 4
    1972:	f8 2a       	or	r15, r24
    1974:	28 c0       	rjmp	.+80     	; 0x19c6 <vfprintf+0xe8>
    1976:	98 e0       	ldi	r25, 0x08	; 8
    1978:	f9 2a       	or	r15, r25
    197a:	25 c0       	rjmp	.+74     	; 0x19c6 <vfprintf+0xe8>
    197c:	e0 e1       	ldi	r30, 0x10	; 16
    197e:	fe 2a       	or	r15, r30
    1980:	22 c0       	rjmp	.+68     	; 0x19c6 <vfprintf+0xe8>
    1982:	f7 fc       	sbrc	r15, 7
    1984:	29 c0       	rjmp	.+82     	; 0x19d8 <vfprintf+0xfa>
    1986:	89 2f       	mov	r24, r25
    1988:	80 53       	subi	r24, 0x30	; 48
    198a:	8a 30       	cpi	r24, 0x0A	; 10
    198c:	70 f4       	brcc	.+28     	; 0x19aa <vfprintf+0xcc>
    198e:	f6 fe       	sbrs	r15, 6
    1990:	05 c0       	rjmp	.+10     	; 0x199c <vfprintf+0xbe>
    1992:	98 9c       	mul	r9, r8
    1994:	90 2c       	mov	r9, r0
    1996:	11 24       	eor	r1, r1
    1998:	98 0e       	add	r9, r24
    199a:	15 c0       	rjmp	.+42     	; 0x19c6 <vfprintf+0xe8>
    199c:	e8 9c       	mul	r14, r8
    199e:	e0 2c       	mov	r14, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	e8 0e       	add	r14, r24
    19a4:	f0 e2       	ldi	r31, 0x20	; 32
    19a6:	ff 2a       	or	r15, r31
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0xe8>
    19aa:	9e 32       	cpi	r25, 0x2E	; 46
    19ac:	29 f4       	brne	.+10     	; 0x19b8 <vfprintf+0xda>
    19ae:	f6 fc       	sbrc	r15, 6
    19b0:	6b c1       	rjmp	.+726    	; 0x1c88 <vfprintf+0x3aa>
    19b2:	40 e4       	ldi	r20, 0x40	; 64
    19b4:	f4 2a       	or	r15, r20
    19b6:	07 c0       	rjmp	.+14     	; 0x19c6 <vfprintf+0xe8>
    19b8:	9c 36       	cpi	r25, 0x6C	; 108
    19ba:	19 f4       	brne	.+6      	; 0x19c2 <vfprintf+0xe4>
    19bc:	50 e8       	ldi	r21, 0x80	; 128
    19be:	f5 2a       	or	r15, r21
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0xe8>
    19c2:	98 36       	cpi	r25, 0x68	; 104
    19c4:	49 f4       	brne	.+18     	; 0x19d8 <vfprintf+0xfa>
    19c6:	f2 01       	movw	r30, r4
    19c8:	23 fd       	sbrc	r18, 3
    19ca:	95 91       	lpm	r25, Z+
    19cc:	23 ff       	sbrs	r18, 3
    19ce:	91 91       	ld	r25, Z+
    19d0:	2f 01       	movw	r4, r30
    19d2:	99 23       	and	r25, r25
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <vfprintf+0xfa>
    19d6:	b8 cf       	rjmp	.-144    	; 0x1948 <vfprintf+0x6a>
    19d8:	89 2f       	mov	r24, r25
    19da:	85 54       	subi	r24, 0x45	; 69
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	18 f0       	brcs	.+6      	; 0x19e6 <vfprintf+0x108>
    19e0:	80 52       	subi	r24, 0x20	; 32
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	38 f4       	brcc	.+14     	; 0x19f4 <vfprintf+0x116>
    19e6:	44 e0       	ldi	r20, 0x04	; 4
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	a4 0e       	add	r10, r20
    19ec:	b5 1e       	adc	r11, r21
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	59 83       	std	Y+1, r21	; 0x01
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <vfprintf+0x134>
    19f4:	93 36       	cpi	r25, 0x63	; 99
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <vfprintf+0x126>
    19f8:	93 37       	cpi	r25, 0x73	; 115
    19fa:	79 f0       	breq	.+30     	; 0x1a1a <vfprintf+0x13c>
    19fc:	93 35       	cpi	r25, 0x53	; 83
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <vfprintf+0x124>
    1a00:	56 c0       	rjmp	.+172    	; 0x1aae <vfprintf+0x1d0>
    1a02:	20 c0       	rjmp	.+64     	; 0x1a44 <vfprintf+0x166>
    1a04:	f5 01       	movw	r30, r10
    1a06:	80 81       	ld	r24, Z
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	42 e0       	ldi	r20, 0x02	; 2
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	a4 0e       	add	r10, r20
    1a10:	b5 1e       	adc	r11, r21
    1a12:	61 01       	movw	r12, r2
    1a14:	01 e0       	ldi	r16, 0x01	; 1
    1a16:	10 e0       	ldi	r17, 0x00	; 0
    1a18:	12 c0       	rjmp	.+36     	; 0x1a3e <vfprintf+0x160>
    1a1a:	f5 01       	movw	r30, r10
    1a1c:	c0 80       	ld	r12, Z
    1a1e:	d1 80       	ldd	r13, Z+1	; 0x01
    1a20:	f6 fc       	sbrc	r15, 6
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <vfprintf+0x14c>
    1a24:	6f ef       	ldi	r22, 0xFF	; 255
    1a26:	7f ef       	ldi	r23, 0xFF	; 255
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <vfprintf+0x150>
    1a2a:	69 2d       	mov	r22, r9
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	42 e0       	ldi	r20, 0x02	; 2
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	a4 0e       	add	r10, r20
    1a34:	b5 1e       	adc	r11, r21
    1a36:	c6 01       	movw	r24, r12
    1a38:	0e 94 57 0e 	call	0x1cae	; 0x1cae <strnlen>
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	5f e7       	ldi	r21, 0x7F	; 127
    1a40:	f5 22       	and	r15, r21
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <vfprintf+0x18e>
    1a44:	f5 01       	movw	r30, r10
    1a46:	c0 80       	ld	r12, Z
    1a48:	d1 80       	ldd	r13, Z+1	; 0x01
    1a4a:	f6 fc       	sbrc	r15, 6
    1a4c:	03 c0       	rjmp	.+6      	; 0x1a54 <vfprintf+0x176>
    1a4e:	6f ef       	ldi	r22, 0xFF	; 255
    1a50:	7f ef       	ldi	r23, 0xFF	; 255
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <vfprintf+0x17a>
    1a54:	69 2d       	mov	r22, r9
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	42 e0       	ldi	r20, 0x02	; 2
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	a4 0e       	add	r10, r20
    1a5e:	b5 1e       	adc	r11, r21
    1a60:	c6 01       	movw	r24, r12
    1a62:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <strnlen_P>
    1a66:	8c 01       	movw	r16, r24
    1a68:	50 e8       	ldi	r21, 0x80	; 128
    1a6a:	f5 2a       	or	r15, r21
    1a6c:	f3 fe       	sbrs	r15, 3
    1a6e:	07 c0       	rjmp	.+14     	; 0x1a7e <vfprintf+0x1a0>
    1a70:	1a c0       	rjmp	.+52     	; 0x1aa6 <vfprintf+0x1c8>
    1a72:	80 e2       	ldi	r24, 0x20	; 32
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	b3 01       	movw	r22, r6
    1a78:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1a7c:	ea 94       	dec	r14
    1a7e:	8e 2d       	mov	r24, r14
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	08 17       	cp	r16, r24
    1a84:	19 07       	cpc	r17, r25
    1a86:	a8 f3       	brcs	.-22     	; 0x1a72 <vfprintf+0x194>
    1a88:	0e c0       	rjmp	.+28     	; 0x1aa6 <vfprintf+0x1c8>
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	f7 fc       	sbrc	r15, 7
    1a8e:	85 91       	lpm	r24, Z+
    1a90:	f7 fe       	sbrs	r15, 7
    1a92:	81 91       	ld	r24, Z+
    1a94:	6f 01       	movw	r12, r30
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	b3 01       	movw	r22, r6
    1a9a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1a9e:	e1 10       	cpse	r14, r1
    1aa0:	ea 94       	dec	r14
    1aa2:	01 50       	subi	r16, 0x01	; 1
    1aa4:	10 40       	sbci	r17, 0x00	; 0
    1aa6:	01 15       	cp	r16, r1
    1aa8:	11 05       	cpc	r17, r1
    1aaa:	79 f7       	brne	.-34     	; 0x1a8a <vfprintf+0x1ac>
    1aac:	ea c0       	rjmp	.+468    	; 0x1c82 <vfprintf+0x3a4>
    1aae:	94 36       	cpi	r25, 0x64	; 100
    1ab0:	11 f0       	breq	.+4      	; 0x1ab6 <vfprintf+0x1d8>
    1ab2:	99 36       	cpi	r25, 0x69	; 105
    1ab4:	69 f5       	brne	.+90     	; 0x1b10 <vfprintf+0x232>
    1ab6:	f7 fe       	sbrs	r15, 7
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <vfprintf+0x1ec>
    1aba:	f5 01       	movw	r30, r10
    1abc:	20 81       	ld	r18, Z
    1abe:	31 81       	ldd	r19, Z+1	; 0x01
    1ac0:	42 81       	ldd	r20, Z+2	; 0x02
    1ac2:	53 81       	ldd	r21, Z+3	; 0x03
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0a c0       	rjmp	.+20     	; 0x1ade <vfprintf+0x200>
    1aca:	f5 01       	movw	r30, r10
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	44 27       	eor	r20, r20
    1ad4:	37 fd       	sbrc	r19, 7
    1ad6:	40 95       	com	r20
    1ad8:	54 2f       	mov	r21, r20
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a8 0e       	add	r10, r24
    1ae0:	b9 1e       	adc	r11, r25
    1ae2:	9f e6       	ldi	r25, 0x6F	; 111
    1ae4:	f9 22       	and	r15, r25
    1ae6:	57 ff       	sbrs	r21, 7
    1ae8:	09 c0       	rjmp	.+18     	; 0x1afc <vfprintf+0x21e>
    1aea:	50 95       	com	r21
    1aec:	40 95       	com	r20
    1aee:	30 95       	com	r19
    1af0:	21 95       	neg	r18
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
    1af4:	4f 4f       	sbci	r20, 0xFF	; 255
    1af6:	5f 4f       	sbci	r21, 0xFF	; 255
    1af8:	e0 e8       	ldi	r30, 0x80	; 128
    1afa:	fe 2a       	or	r15, r30
    1afc:	ca 01       	movw	r24, r20
    1afe:	b9 01       	movw	r22, r18
    1b00:	a1 01       	movw	r20, r2
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__ultoa_invert>
    1b0a:	d8 2e       	mov	r13, r24
    1b0c:	d2 18       	sub	r13, r2
    1b0e:	40 c0       	rjmp	.+128    	; 0x1b90 <vfprintf+0x2b2>
    1b10:	95 37       	cpi	r25, 0x75	; 117
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <vfprintf+0x240>
    1b14:	1f 2d       	mov	r17, r15
    1b16:	1f 7e       	andi	r17, 0xEF	; 239
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	1d c0       	rjmp	.+58     	; 0x1b58 <vfprintf+0x27a>
    1b1e:	1f 2d       	mov	r17, r15
    1b20:	19 7f       	andi	r17, 0xF9	; 249
    1b22:	9f 36       	cpi	r25, 0x6F	; 111
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <vfprintf+0x260>
    1b26:	90 37       	cpi	r25, 0x70	; 112
    1b28:	20 f4       	brcc	.+8      	; 0x1b32 <vfprintf+0x254>
    1b2a:	98 35       	cpi	r25, 0x58	; 88
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <vfprintf+0x252>
    1b2e:	ac c0       	rjmp	.+344    	; 0x1c88 <vfprintf+0x3aa>
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <vfprintf+0x272>
    1b32:	90 37       	cpi	r25, 0x70	; 112
    1b34:	39 f0       	breq	.+14     	; 0x1b44 <vfprintf+0x266>
    1b36:	98 37       	cpi	r25, 0x78	; 120
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <vfprintf+0x25e>
    1b3a:	a6 c0       	rjmp	.+332    	; 0x1c88 <vfprintf+0x3aa>
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <vfprintf+0x268>
    1b3e:	28 e0       	ldi	r18, 0x08	; 8
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	0a c0       	rjmp	.+20     	; 0x1b58 <vfprintf+0x27a>
    1b44:	10 61       	ori	r17, 0x10	; 16
    1b46:	14 fd       	sbrc	r17, 4
    1b48:	14 60       	ori	r17, 0x04	; 4
    1b4a:	20 e1       	ldi	r18, 0x10	; 16
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <vfprintf+0x27a>
    1b50:	14 fd       	sbrc	r17, 4
    1b52:	16 60       	ori	r17, 0x06	; 6
    1b54:	20 e1       	ldi	r18, 0x10	; 16
    1b56:	32 e0       	ldi	r19, 0x02	; 2
    1b58:	17 ff       	sbrs	r17, 7
    1b5a:	08 c0       	rjmp	.+16     	; 0x1b6c <vfprintf+0x28e>
    1b5c:	f5 01       	movw	r30, r10
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	44 e0       	ldi	r20, 0x04	; 4
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	08 c0       	rjmp	.+16     	; 0x1b7c <vfprintf+0x29e>
    1b6c:	f5 01       	movw	r30, r10
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	bc 01       	movw	r22, r24
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	42 e0       	ldi	r20, 0x02	; 2
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	a4 0e       	add	r10, r20
    1b7e:	b5 1e       	adc	r11, r21
    1b80:	a1 01       	movw	r20, r2
    1b82:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__ultoa_invert>
    1b86:	d8 2e       	mov	r13, r24
    1b88:	d2 18       	sub	r13, r2
    1b8a:	8f e7       	ldi	r24, 0x7F	; 127
    1b8c:	f8 2e       	mov	r15, r24
    1b8e:	f1 22       	and	r15, r17
    1b90:	f6 fe       	sbrs	r15, 6
    1b92:	0b c0       	rjmp	.+22     	; 0x1baa <vfprintf+0x2cc>
    1b94:	5e ef       	ldi	r21, 0xFE	; 254
    1b96:	f5 22       	and	r15, r21
    1b98:	d9 14       	cp	r13, r9
    1b9a:	38 f4       	brcc	.+14     	; 0x1baa <vfprintf+0x2cc>
    1b9c:	f4 fe       	sbrs	r15, 4
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <vfprintf+0x2d0>
    1ba0:	f2 fc       	sbrc	r15, 2
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <vfprintf+0x2d0>
    1ba4:	8f ee       	ldi	r24, 0xEF	; 239
    1ba6:	f8 22       	and	r15, r24
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x2d0>
    1baa:	1d 2d       	mov	r17, r13
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <vfprintf+0x2d2>
    1bae:	19 2d       	mov	r17, r9
    1bb0:	f4 fe       	sbrs	r15, 4
    1bb2:	0d c0       	rjmp	.+26     	; 0x1bce <vfprintf+0x2f0>
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ed 0d       	add	r30, r13
    1bb8:	f1 1d       	adc	r31, r1
    1bba:	80 81       	ld	r24, Z
    1bbc:	80 33       	cpi	r24, 0x30	; 48
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <vfprintf+0x2e8>
    1bc0:	99 ee       	ldi	r25, 0xE9	; 233
    1bc2:	f9 22       	and	r15, r25
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <vfprintf+0x2f8>
    1bc6:	1f 5f       	subi	r17, 0xFF	; 255
    1bc8:	f2 fe       	sbrs	r15, 2
    1bca:	05 c0       	rjmp	.+10     	; 0x1bd6 <vfprintf+0x2f8>
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <vfprintf+0x2f6>
    1bce:	8f 2d       	mov	r24, r15
    1bd0:	86 78       	andi	r24, 0x86	; 134
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <vfprintf+0x2f8>
    1bd4:	1f 5f       	subi	r17, 0xFF	; 255
    1bd6:	0f 2d       	mov	r16, r15
    1bd8:	f3 fc       	sbrc	r15, 3
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <vfprintf+0x326>
    1bdc:	f0 fe       	sbrs	r15, 0
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <vfprintf+0x320>
    1be0:	1e 15       	cp	r17, r14
    1be2:	10 f0       	brcs	.+4      	; 0x1be8 <vfprintf+0x30a>
    1be4:	9d 2c       	mov	r9, r13
    1be6:	0b c0       	rjmp	.+22     	; 0x1bfe <vfprintf+0x320>
    1be8:	9d 2c       	mov	r9, r13
    1bea:	9e 0c       	add	r9, r14
    1bec:	91 1a       	sub	r9, r17
    1bee:	1e 2d       	mov	r17, r14
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <vfprintf+0x320>
    1bf2:	80 e2       	ldi	r24, 0x20	; 32
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	b3 01       	movw	r22, r6
    1bf8:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1bfc:	1f 5f       	subi	r17, 0xFF	; 255
    1bfe:	1e 15       	cp	r17, r14
    1c00:	c0 f3       	brcs	.-16     	; 0x1bf2 <vfprintf+0x314>
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <vfprintf+0x32e>
    1c04:	1e 15       	cp	r17, r14
    1c06:	10 f4       	brcc	.+4      	; 0x1c0c <vfprintf+0x32e>
    1c08:	e1 1a       	sub	r14, r17
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <vfprintf+0x330>
    1c0c:	ee 24       	eor	r14, r14
    1c0e:	04 ff       	sbrs	r16, 4
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <vfprintf+0x352>
    1c12:	80 e3       	ldi	r24, 0x30	; 48
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	b3 01       	movw	r22, r6
    1c18:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1c1c:	02 ff       	sbrs	r16, 2
    1c1e:	1d c0       	rjmp	.+58     	; 0x1c5a <vfprintf+0x37c>
    1c20:	01 fd       	sbrc	r16, 1
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <vfprintf+0x34c>
    1c24:	88 e7       	ldi	r24, 0x78	; 120
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e c0       	rjmp	.+28     	; 0x1c46 <vfprintf+0x368>
    1c2a:	88 e5       	ldi	r24, 0x58	; 88
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <vfprintf+0x368>
    1c30:	80 2f       	mov	r24, r16
    1c32:	86 78       	andi	r24, 0x86	; 134
    1c34:	91 f0       	breq	.+36     	; 0x1c5a <vfprintf+0x37c>
    1c36:	01 ff       	sbrs	r16, 1
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x360>
    1c3a:	8b e2       	ldi	r24, 0x2B	; 43
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <vfprintf+0x362>
    1c3e:	80 e2       	ldi	r24, 0x20	; 32
    1c40:	f7 fc       	sbrc	r15, 7
    1c42:	8d e2       	ldi	r24, 0x2D	; 45
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b3 01       	movw	r22, r6
    1c48:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <vfprintf+0x37c>
    1c4e:	80 e3       	ldi	r24, 0x30	; 48
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	b3 01       	movw	r22, r6
    1c54:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1c58:	9a 94       	dec	r9
    1c5a:	d9 14       	cp	r13, r9
    1c5c:	c0 f3       	brcs	.-16     	; 0x1c4e <vfprintf+0x370>
    1c5e:	da 94       	dec	r13
    1c60:	f1 01       	movw	r30, r2
    1c62:	ed 0d       	add	r30, r13
    1c64:	f1 1d       	adc	r31, r1
    1c66:	80 81       	ld	r24, Z
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	b3 01       	movw	r22, r6
    1c6c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1c70:	dd 20       	and	r13, r13
    1c72:	a9 f7       	brne	.-22     	; 0x1c5e <vfprintf+0x380>
    1c74:	06 c0       	rjmp	.+12     	; 0x1c82 <vfprintf+0x3a4>
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	b3 01       	movw	r22, r6
    1c7c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <fputc>
    1c80:	ea 94       	dec	r14
    1c82:	ee 20       	and	r14, r14
    1c84:	c1 f7       	brne	.-16     	; 0x1c76 <vfprintf+0x398>
    1c86:	43 ce       	rjmp	.-890    	; 0x190e <vfprintf+0x30>
    1c88:	f3 01       	movw	r30, r6
    1c8a:	66 81       	ldd	r22, Z+6	; 0x06
    1c8c:	77 81       	ldd	r23, Z+7	; 0x07
    1c8e:	cb 01       	movw	r24, r22
    1c90:	2b 96       	adiw	r28, 0x0b	; 11
    1c92:	e2 e1       	ldi	r30, 0x12	; 18
    1c94:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__>

00001c98 <strnlen_P>:
    1c98:	fc 01       	movw	r30, r24
    1c9a:	05 90       	lpm	r0, Z+
    1c9c:	61 50       	subi	r22, 0x01	; 1
    1c9e:	70 40       	sbci	r23, 0x00	; 0
    1ca0:	01 10       	cpse	r0, r1
    1ca2:	d8 f7       	brcc	.-10     	; 0x1c9a <strnlen_P+0x2>
    1ca4:	80 95       	com	r24
    1ca6:	90 95       	com	r25
    1ca8:	8e 0f       	add	r24, r30
    1caa:	9f 1f       	adc	r25, r31
    1cac:	08 95       	ret

00001cae <strnlen>:
    1cae:	fc 01       	movw	r30, r24
    1cb0:	61 50       	subi	r22, 0x01	; 1
    1cb2:	70 40       	sbci	r23, 0x00	; 0
    1cb4:	01 90       	ld	r0, Z+
    1cb6:	01 10       	cpse	r0, r1
    1cb8:	d8 f7       	brcc	.-10     	; 0x1cb0 <strnlen+0x2>
    1cba:	80 95       	com	r24
    1cbc:	90 95       	com	r25
    1cbe:	8e 0f       	add	r24, r30
    1cc0:	9f 1f       	adc	r25, r31
    1cc2:	08 95       	ret

00001cc4 <fputc>:
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	8c 01       	movw	r16, r24
    1cce:	eb 01       	movw	r28, r22
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	81 ff       	sbrs	r24, 1
    1cd4:	1b c0       	rjmp	.+54     	; 0x1d0c <fputc+0x48>
    1cd6:	82 ff       	sbrs	r24, 2
    1cd8:	0d c0       	rjmp	.+26     	; 0x1cf4 <fputc+0x30>
    1cda:	2e 81       	ldd	r18, Y+6	; 0x06
    1cdc:	3f 81       	ldd	r19, Y+7	; 0x07
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce2:	28 17       	cp	r18, r24
    1ce4:	39 07       	cpc	r19, r25
    1ce6:	64 f4       	brge	.+24     	; 0x1d00 <fputc+0x3c>
    1ce8:	e8 81       	ld	r30, Y
    1cea:	f9 81       	ldd	r31, Y+1	; 0x01
    1cec:	01 93       	st	Z+, r16
    1cee:	f9 83       	std	Y+1, r31	; 0x01
    1cf0:	e8 83       	st	Y, r30
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <fputc+0x3c>
    1cf4:	e8 85       	ldd	r30, Y+8	; 0x08
    1cf6:	f9 85       	ldd	r31, Y+9	; 0x09
    1cf8:	80 2f       	mov	r24, r16
    1cfa:	09 95       	icall
    1cfc:	89 2b       	or	r24, r25
    1cfe:	31 f4       	brne	.+12     	; 0x1d0c <fputc+0x48>
    1d00:	8e 81       	ldd	r24, Y+6	; 0x06
    1d02:	9f 81       	ldd	r25, Y+7	; 0x07
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	9f 83       	std	Y+7, r25	; 0x07
    1d08:	8e 83       	std	Y+6, r24	; 0x06
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <fputc+0x4c>
    1d0c:	0f ef       	ldi	r16, 0xFF	; 255
    1d0e:	1f ef       	ldi	r17, 0xFF	; 255
    1d10:	c8 01       	movw	r24, r16
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <__ultoa_invert>:
    1d1c:	fa 01       	movw	r30, r20
    1d1e:	aa 27       	eor	r26, r26
    1d20:	28 30       	cpi	r18, 0x08	; 8
    1d22:	51 f1       	breq	.+84     	; 0x1d78 <__ultoa_invert+0x5c>
    1d24:	20 31       	cpi	r18, 0x10	; 16
    1d26:	81 f1       	breq	.+96     	; 0x1d88 <__ultoa_invert+0x6c>
    1d28:	e8 94       	clt
    1d2a:	6f 93       	push	r22
    1d2c:	6e 7f       	andi	r22, 0xFE	; 254
    1d2e:	6e 5f       	subi	r22, 0xFE	; 254
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	8f 4f       	sbci	r24, 0xFF	; 255
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	af 4f       	sbci	r26, 0xFF	; 255
    1d38:	b1 e0       	ldi	r27, 0x01	; 1
    1d3a:	3e d0       	rcall	.+124    	; 0x1db8 <__ultoa_invert+0x9c>
    1d3c:	b4 e0       	ldi	r27, 0x04	; 4
    1d3e:	3c d0       	rcall	.+120    	; 0x1db8 <__ultoa_invert+0x9c>
    1d40:	67 0f       	add	r22, r23
    1d42:	78 1f       	adc	r23, r24
    1d44:	89 1f       	adc	r24, r25
    1d46:	9a 1f       	adc	r25, r26
    1d48:	a1 1d       	adc	r26, r1
    1d4a:	68 0f       	add	r22, r24
    1d4c:	79 1f       	adc	r23, r25
    1d4e:	8a 1f       	adc	r24, r26
    1d50:	91 1d       	adc	r25, r1
    1d52:	a1 1d       	adc	r26, r1
    1d54:	6a 0f       	add	r22, r26
    1d56:	71 1d       	adc	r23, r1
    1d58:	81 1d       	adc	r24, r1
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	20 d0       	rcall	.+64     	; 0x1da0 <__ultoa_invert+0x84>
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <__ultoa_invert+0x48>
    1d62:	68 94       	set
    1d64:	3f 91       	pop	r19
    1d66:	2a e0       	ldi	r18, 0x0A	; 10
    1d68:	26 9f       	mul	r18, r22
    1d6a:	11 24       	eor	r1, r1
    1d6c:	30 19       	sub	r19, r0
    1d6e:	30 5d       	subi	r19, 0xD0	; 208
    1d70:	31 93       	st	Z+, r19
    1d72:	de f6       	brtc	.-74     	; 0x1d2a <__ultoa_invert+0xe>
    1d74:	cf 01       	movw	r24, r30
    1d76:	08 95       	ret
    1d78:	46 2f       	mov	r20, r22
    1d7a:	47 70       	andi	r20, 0x07	; 7
    1d7c:	40 5d       	subi	r20, 0xD0	; 208
    1d7e:	41 93       	st	Z+, r20
    1d80:	b3 e0       	ldi	r27, 0x03	; 3
    1d82:	0f d0       	rcall	.+30     	; 0x1da2 <__ultoa_invert+0x86>
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__ultoa_invert+0x5c>
    1d86:	f6 cf       	rjmp	.-20     	; 0x1d74 <__ultoa_invert+0x58>
    1d88:	46 2f       	mov	r20, r22
    1d8a:	4f 70       	andi	r20, 0x0F	; 15
    1d8c:	40 5d       	subi	r20, 0xD0	; 208
    1d8e:	4a 33       	cpi	r20, 0x3A	; 58
    1d90:	18 f0       	brcs	.+6      	; 0x1d98 <__ultoa_invert+0x7c>
    1d92:	49 5d       	subi	r20, 0xD9	; 217
    1d94:	31 fd       	sbrc	r19, 1
    1d96:	40 52       	subi	r20, 0x20	; 32
    1d98:	41 93       	st	Z+, r20
    1d9a:	02 d0       	rcall	.+4      	; 0x1da0 <__ultoa_invert+0x84>
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <__ultoa_invert+0x6c>
    1d9e:	ea cf       	rjmp	.-44     	; 0x1d74 <__ultoa_invert+0x58>
    1da0:	b4 e0       	ldi	r27, 0x04	; 4
    1da2:	a6 95       	lsr	r26
    1da4:	97 95       	ror	r25
    1da6:	87 95       	ror	r24
    1da8:	77 95       	ror	r23
    1daa:	67 95       	ror	r22
    1dac:	ba 95       	dec	r27
    1dae:	c9 f7       	brne	.-14     	; 0x1da2 <__ultoa_invert+0x86>
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	61 05       	cpc	r22, r1
    1db4:	71 05       	cpc	r23, r1
    1db6:	08 95       	ret
    1db8:	9b 01       	movw	r18, r22
    1dba:	ac 01       	movw	r20, r24
    1dbc:	0a 2e       	mov	r0, r26
    1dbe:	06 94       	lsr	r0
    1dc0:	57 95       	ror	r21
    1dc2:	47 95       	ror	r20
    1dc4:	37 95       	ror	r19
    1dc6:	27 95       	ror	r18
    1dc8:	ba 95       	dec	r27
    1dca:	c9 f7       	brne	.-14     	; 0x1dbe <__ultoa_invert+0xa2>
    1dcc:	62 0f       	add	r22, r18
    1dce:	73 1f       	adc	r23, r19
    1dd0:	84 1f       	adc	r24, r20
    1dd2:	95 1f       	adc	r25, r21
    1dd4:	a0 1d       	adc	r26, r0
    1dd6:	08 95       	ret

00001dd8 <__prologue_saves__>:
    1dd8:	2f 92       	push	r2
    1dda:	3f 92       	push	r3
    1ddc:	4f 92       	push	r4
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	ca 1b       	sub	r28, r26
    1e02:	db 0b       	sbc	r29, r27
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	09 94       	ijmp

00001e10 <__epilogue_restores__>:
    1e10:	2a 88       	ldd	r2, Y+18	; 0x12
    1e12:	39 88       	ldd	r3, Y+17	; 0x11
    1e14:	48 88       	ldd	r4, Y+16	; 0x10
    1e16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e22:	b9 84       	ldd	r11, Y+9	; 0x09
    1e24:	c8 84       	ldd	r12, Y+8	; 0x08
    1e26:	df 80       	ldd	r13, Y+7	; 0x07
    1e28:	ee 80       	ldd	r14, Y+6	; 0x06
    1e2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e30:	aa 81       	ldd	r26, Y+2	; 0x02
    1e32:	b9 81       	ldd	r27, Y+1	; 0x01
    1e34:	ce 0f       	add	r28, r30
    1e36:	d1 1d       	adc	r29, r1
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	ed 01       	movw	r28, r26
    1e44:	08 95       	ret

00001e46 <_exit>:
    1e46:	f8 94       	cli

00001e48 <__stop_program>:
    1e48:	ff cf       	rjmp	.-2      	; 0x1e48 <__stop_program>
