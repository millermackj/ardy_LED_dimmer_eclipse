
ardy_Current_Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  00001bd2  00001c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  008003da  008003da  00001f40  2**0
                  ALLOC
  3 .stab         00003bac  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001164  00000000  00000000  00005aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006e0  00000000  00000000  00006c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001004  00000000  00000000  00007330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006ef4  00000000  00000000  00008334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ac7  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000045f0  00000000  00000000  00010cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b80  00000000  00000000  000152e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001e8f  00000000  00000000  00015e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000449e  00000000  00000000  00017cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000680  00000000  00000000  0001c18d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//  init_impulse(impulse_array, impulse_num_samples, 255);


}

void init_impulse(int * array, int array_length, int peak_value){
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_18>
      4c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	c1 07       	cpc	r28, r17

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e2 ed       	ldi	r30, 0xD2	; 210
      d8:	fb e1       	ldi	r31, 0x1B	; 27
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	aa 3d       	cpi	r26, 0xDA	; 218
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	15 e0       	ldi	r17, 0x05	; 5
      e8:	aa ed       	ldi	r26, 0xDA	; 218
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	aa 35       	cpi	r26, 0x5A	; 90
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__tablejump__>

00000106 <.do_global_ctors_start>:
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
     10c:	0e 94 84 08 	call	0x1108	; 0x1108 <main>
     110:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z14calculate_tachmP14encoder_struct>:
  	}
  }
  encoder->last_state = encoder->pin_state;
}

void calculate_tach(long unsigned int current_time, encoder_struct* tach_enc){
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8b 01       	movw	r16, r22
     126:	9c 01       	movw	r18, r24
     128:	ea 01       	movw	r28, r20
	if(tach_enc->last_period != 0){
     12a:	4a 89       	ldd	r20, Y+18	; 0x12
     12c:	5b 89       	ldd	r21, Y+19	; 0x13
     12e:	41 15       	cp	r20, r1
     130:	51 05       	cpc	r21, r1
     132:	09 f4       	brne	.+2      	; 0x136 <_Z14calculate_tachmP14encoder_struct+0x1e>
     134:	4b c0       	rjmp	.+150    	; 0x1cc <_Z14calculate_tachmP14encoder_struct+0xb4>
		if((current_time - tach_enc->startTime) > tach_enc->max_period){
     136:	8e 81       	ldd	r24, Y+6	; 0x06
     138:	9f 81       	ldd	r25, Y+7	; 0x07
     13a:	a8 85       	ldd	r26, Y+8	; 0x08
     13c:	b9 85       	ldd	r27, Y+9	; 0x09
     13e:	78 01       	movw	r14, r16
     140:	89 01       	movw	r16, r18
     142:	e8 1a       	sub	r14, r24
     144:	f9 0a       	sbc	r15, r25
     146:	0a 0b       	sbc	r16, r26
     148:	1b 0b       	sbc	r17, r27
     14a:	88 8d       	ldd	r24, Y+24	; 0x18
     14c:	99 8d       	ldd	r25, Y+25	; 0x19
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8e 15       	cp	r24, r14
     154:	9f 05       	cpc	r25, r15
     156:	a0 07       	cpc	r26, r16
     158:	b1 07       	cpc	r27, r17
     15a:	28 f4       	brcc	.+10     	; 0x166 <_Z14calculate_tachmP14encoder_struct+0x4e>
			tach_enc->hertz = 0;
     15c:	1c 86       	std	Y+12, r1	; 0x0c
     15e:	1d 86       	std	Y+13, r1	; 0x0d
     160:	1e 86       	std	Y+14, r1	; 0x0e
     162:	1f 86       	std	Y+15, r1	; 0x0f
     164:	33 c0       	rjmp	.+102    	; 0x1cc <_Z14calculate_tachmP14encoder_struct+0xb4>
		}
		else if(current_time - tach_enc->startTime > tach_enc->last_period)
     166:	ca 01       	movw	r24, r20
     168:	aa 27       	eor	r26, r26
     16a:	97 fd       	sbrc	r25, 7
     16c:	a0 95       	com	r26
     16e:	ba 2f       	mov	r27, r26
     170:	6c 89       	ldd	r22, Y+20	; 0x14
     172:	7d 89       	ldd	r23, Y+21	; 0x15
     174:	8e 15       	cp	r24, r14
     176:	9f 05       	cpc	r25, r15
     178:	a0 07       	cpc	r26, r16
     17a:	b1 07       	cpc	r27, r17
     17c:	90 f4       	brcc	.+36     	; 0x1a2 <_Z14calculate_tachmP14encoder_struct+0x8a>
			tach_enc->hertz = (1000L*1000L)/((current_time - tach_enc->startTime)*tach_enc->cts_per_rev);
     17e:	9b 01       	movw	r18, r22
     180:	44 27       	eor	r20, r20
     182:	37 fd       	sbrc	r19, 7
     184:	40 95       	com	r20
     186:	54 2f       	mov	r21, r20
     188:	c8 01       	movw	r24, r16
     18a:	b7 01       	movw	r22, r14
     18c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     190:	9b 01       	movw	r18, r22
     192:	ac 01       	movw	r20, r24
     194:	60 e4       	ldi	r22, 0x40	; 64
     196:	72 e4       	ldi	r23, 0x42	; 66
     198:	8f e0       	ldi	r24, 0x0F	; 15
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 87 0a 	call	0x150e	; 0x150e <__udivmodsi4>
     1a0:	11 c0       	rjmp	.+34     	; 0x1c4 <_Z14calculate_tachmP14encoder_struct+0xac>
		else{
			tach_enc->hertz = (1000L*1000L)/(tach_enc->last_period*tach_enc->cts_per_rev);
     1a2:	46 9f       	mul	r20, r22
     1a4:	90 01       	movw	r18, r0
     1a6:	47 9f       	mul	r20, r23
     1a8:	30 0d       	add	r19, r0
     1aa:	56 9f       	mul	r21, r22
     1ac:	30 0d       	add	r19, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	44 27       	eor	r20, r20
     1b2:	37 fd       	sbrc	r19, 7
     1b4:	40 95       	com	r20
     1b6:	54 2f       	mov	r21, r20
     1b8:	60 e4       	ldi	r22, 0x40	; 64
     1ba:	72 e4       	ldi	r23, 0x42	; 66
     1bc:	8f e0       	ldi	r24, 0x0F	; 15
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     1c4:	2c 87       	std	Y+12, r18	; 0x0c
     1c6:	3d 87       	std	Y+13, r19	; 0x0d
     1c8:	4e 87       	std	Y+14, r20	; 0x0e
     1ca:	5f 87       	std	Y+15, r21	; 0x0f
		}
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	08 95       	ret

000001da <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	db 01       	movw	r26, r22
     1e0:	0d 90       	ld	r0, X+
     1e2:	00 20       	and	r0, r0
     1e4:	e9 f7       	brne	.-6      	; 0x1e0 <_ZN5Print5writeEPKc+0x6>
     1e6:	11 97       	sbiw	r26, 0x01	; 1
     1e8:	a6 1b       	sub	r26, r22
     1ea:	b7 0b       	sbc	r27, r23
     1ec:	ec 01       	movw	r28, r24
     1ee:	e8 81       	ld	r30, Y
     1f0:	f9 81       	ldd	r31, Y+1	; 0x01
     1f2:	02 80       	ldd	r0, Z+2	; 0x02
     1f4:	f3 81       	ldd	r31, Z+3	; 0x03
     1f6:	e0 2d       	mov	r30, r0
     1f8:	ad 01       	movw	r20, r26
     1fa:	09 95       	icall
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <_Z17calculate_voltageP18volt_sensor_struct>:
void calculate_current(current_sensor_struct* current_sense){
	current_sense->sense_cts = ((long int)(current_sense->sense_cts*800L) + (long int)((analogRead(CURRENT_PIN)-7)*200L))/1000L;
	current_sense->current = (int)map(current_sense->sense_cts, 0, 1023, -25000, 25000);
}

void calculate_voltage(volt_sensor_struct* volt_sensor){
     202:	8f 92       	push	r8
     204:	9f 92       	push	r9
     206:	af 92       	push	r10
     208:	bf 92       	push	r11
     20a:	cf 92       	push	r12
     20c:	df 92       	push	r13
     20e:	ef 92       	push	r14
     210:	ff 92       	push	r15
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	4c 01       	movw	r8, r24
	volt_sensor->sense_cts = ((long int)(volt_sensor->sense_cts*800L) + (long int)((analogRead(VOLT_PIN))*200L))/1000L;
     218:	fc 01       	movw	r30, r24
     21a:	62 81       	ldd	r22, Z+2	; 0x02
     21c:	73 81       	ldd	r23, Z+3	; 0x03
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	20 e2       	ldi	r18, 0x20	; 32
     224:	33 e0       	ldi	r19, 0x03	; 3
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     22e:	7b 01       	movw	r14, r22
     230:	8c 01       	movw	r16, r24
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 24 09 	call	0x1248	; 0x1248 <analogRead>
     238:	aa 27       	eor	r26, r26
     23a:	97 fd       	sbrc	r25, 7
     23c:	a0 95       	com	r26
     23e:	ba 2f       	mov	r27, r26
     240:	bc 01       	movw	r22, r24
     242:	cd 01       	movw	r24, r26
     244:	28 ec       	ldi	r18, 0xC8	; 200
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     250:	6e 0d       	add	r22, r14
     252:	7f 1d       	adc	r23, r15
     254:	80 1f       	adc	r24, r16
     256:	91 1f       	adc	r25, r17
     258:	28 ee       	ldi	r18, 0xE8	; 232
     25a:	33 e0       	ldi	r19, 0x03	; 3
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     264:	ca 01       	movw	r24, r20
     266:	f4 01       	movw	r30, r8
     268:	22 83       	std	Z+2, r18	; 0x02
     26a:	33 83       	std	Z+3, r19	; 0x03
     26c:	44 83       	std	Z+4, r20	; 0x04
     26e:	95 83       	std	Z+5, r25	; 0x05
	volt_sensor->voltage = map(volt_sensor->sense_cts, 0, 1023, 0, volt_sensor->max_volts);
     270:	00 d0       	rcall	.+0      	; 0x272 <_Z17calculate_voltageP18volt_sensor_struct+0x70>
     272:	00 d0       	rcall	.+0      	; 0x274 <_Z17calculate_voltageP18volt_sensor_struct+0x72>
     274:	46 81       	ldd	r20, Z+6	; 0x06
     276:	57 81       	ldd	r21, Z+7	; 0x07
     278:	60 85       	ldd	r22, Z+8	; 0x08
     27a:	71 85       	ldd	r23, Z+9	; 0x09
     27c:	ed b7       	in	r30, 0x3d	; 61
     27e:	fe b7       	in	r31, 0x3e	; 62
     280:	41 83       	std	Z+1, r20	; 0x01
     282:	52 83       	std	Z+2, r21	; 0x02
     284:	63 83       	std	Z+3, r22	; 0x03
     286:	74 83       	std	Z+4, r23	; 0x04
     288:	b9 01       	movw	r22, r18
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	ef ef       	ldi	r30, 0xFF	; 255
     294:	ee 2e       	mov	r14, r30
     296:	e3 e0       	ldi	r30, 0x03	; 3
     298:	fe 2e       	mov	r15, r30
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	aa 24       	eor	r10, r10
     2a0:	bb 24       	eor	r11, r11
     2a2:	65 01       	movw	r12, r10
     2a4:	0e 94 3b 08 	call	0x1076	; 0x1076 <_Z3maplllll>
     2a8:	f4 01       	movw	r30, r8
     2aa:	62 87       	std	Z+10, r22	; 0x0a
     2ac:	73 87       	std	Z+11, r23	; 0x0b
     2ae:	84 87       	std	Z+12, r24	; 0x0c
     2b0:	95 87       	std	Z+13, r25	; 0x0d
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
}
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	08 95       	ret

000002d0 <_Z17calculate_currentP21current_sensor_struct>:
			tach_enc->hertz = (1000L*1000L)/(tach_enc->last_period*tach_enc->cts_per_rev);
		}
	}
}

void calculate_current(current_sensor_struct* current_sense){
     2d0:	8f 92       	push	r8
     2d2:	9f 92       	push	r9
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	4c 01       	movw	r8, r24
	current_sense->sense_cts = ((long int)(current_sense->sense_cts*800L) + (long int)((analogRead(CURRENT_PIN)-7)*200L))/1000L;
     2e6:	83 e0       	ldi	r24, 0x03	; 3
     2e8:	0e 94 24 09 	call	0x1248	; 0x1248 <analogRead>
     2ec:	5c 01       	movw	r10, r24
     2ee:	d4 01       	movw	r26, r8
     2f0:	14 96       	adiw	r26, 0x04	; 4
     2f2:	6d 91       	ld	r22, X+
     2f4:	7d 91       	ld	r23, X+
     2f6:	8d 91       	ld	r24, X+
     2f8:	9c 91       	ld	r25, X
     2fa:	17 97       	sbiw	r26, 0x07	; 7
     2fc:	20 e2       	ldi	r18, 0x20	; 32
     2fe:	33 e0       	ldi	r19, 0x03	; 3
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     308:	7b 01       	movw	r14, r22
     30a:	8c 01       	movw	r16, r24
     30c:	88 e8       	ldi	r24, 0x88	; 136
     30e:	9a ef       	ldi	r25, 0xFA	; 250
     310:	af ef       	ldi	r26, 0xFF	; 255
     312:	bf ef       	ldi	r27, 0xFF	; 255
     314:	e8 0e       	add	r14, r24
     316:	f9 1e       	adc	r15, r25
     318:	0a 1f       	adc	r16, r26
     31a:	1b 1f       	adc	r17, r27
     31c:	cc 24       	eor	r12, r12
     31e:	b7 fc       	sbrc	r11, 7
     320:	c0 94       	com	r12
     322:	dc 2c       	mov	r13, r12
     324:	c6 01       	movw	r24, r12
     326:	b5 01       	movw	r22, r10
     328:	28 ec       	ldi	r18, 0xC8	; 200
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     334:	e6 0e       	add	r14, r22
     336:	f7 1e       	adc	r15, r23
     338:	08 1f       	adc	r16, r24
     33a:	19 1f       	adc	r17, r25
     33c:	c8 01       	movw	r24, r16
     33e:	b7 01       	movw	r22, r14
     340:	28 ee       	ldi	r18, 0xE8	; 232
     342:	33 e0       	ldi	r19, 0x03	; 3
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     34c:	ca 01       	movw	r24, r20
     34e:	d4 01       	movw	r26, r8
     350:	14 96       	adiw	r26, 0x04	; 4
     352:	2c 93       	st	X, r18
     354:	14 97       	sbiw	r26, 0x04	; 4
     356:	15 96       	adiw	r26, 0x05	; 5
     358:	3c 93       	st	X, r19
     35a:	15 97       	sbiw	r26, 0x05	; 5
     35c:	16 96       	adiw	r26, 0x06	; 6
     35e:	4c 93       	st	X, r20
     360:	16 97       	sbiw	r26, 0x06	; 6
     362:	17 96       	adiw	r26, 0x07	; 7
     364:	9c 93       	st	X, r25
	current_sense->current = (int)map(current_sense->sense_cts, 0, 1023, -25000, 25000);
     366:	00 d0       	rcall	.+0      	; 0x368 <_Z17calculate_currentP21current_sensor_struct+0x98>
     368:	00 d0       	rcall	.+0      	; 0x36a <_Z17calculate_currentP21current_sensor_struct+0x9a>
     36a:	48 ea       	ldi	r20, 0xA8	; 168
     36c:	51 e6       	ldi	r21, 0x61	; 97
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	ed b7       	in	r30, 0x3d	; 61
     374:	fe b7       	in	r31, 0x3e	; 62
     376:	41 83       	std	Z+1, r20	; 0x01
     378:	52 83       	std	Z+2, r21	; 0x02
     37a:	63 83       	std	Z+3, r22	; 0x03
     37c:	74 83       	std	Z+4, r23	; 0x04
     37e:	b9 01       	movw	r22, r18
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	af ef       	ldi	r26, 0xFF	; 255
     38a:	ea 2e       	mov	r14, r26
     38c:	a3 e0       	ldi	r26, 0x03	; 3
     38e:	fa 2e       	mov	r15, r26
     390:	01 2d       	mov	r16, r1
     392:	11 2d       	mov	r17, r1
     394:	f8 e5       	ldi	r31, 0x58	; 88
     396:	af 2e       	mov	r10, r31
     398:	fe e9       	ldi	r31, 0x9E	; 158
     39a:	bf 2e       	mov	r11, r31
     39c:	ff ef       	ldi	r31, 0xFF	; 255
     39e:	cf 2e       	mov	r12, r31
     3a0:	ff ef       	ldi	r31, 0xFF	; 255
     3a2:	df 2e       	mov	r13, r31
     3a4:	0e 94 3b 08 	call	0x1076	; 0x1076 <_Z3maplllll>
     3a8:	d4 01       	movw	r26, r8
     3aa:	1f 96       	adiw	r26, 0x0f	; 15
     3ac:	7c 93       	st	X, r23
     3ae:	6e 93       	st	-X, r22
     3b0:	1e 97       	sbiw	r26, 0x0e	; 14
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	08 95       	ret

000003d0 <_Z12poll_encodermP14encoder_struct>:
//    	}
//    }
//
//}

void poll_encoder(long unsigned int current_time, encoder_struct* encoder){
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	7b 01       	movw	r14, r22
     3de:	8c 01       	movw	r16, r24
     3e0:	ea 01       	movw	r28, r20
  if(!digitalRead(encoder->pin_num)){
     3e2:	88 89       	ldd	r24, Y+16	; 0x10
     3e4:	0e 94 c0 09 	call	0x1380	; 0x1380 <digitalRead>
     3e8:	28 81       	ld	r18, Y
     3ea:	39 81       	ldd	r19, Y+1	; 0x01
     3ec:	89 2b       	or	r24, r25
     3ee:	69 f4       	brne	.+26     	; 0x40a <_Z12poll_encodermP14encoder_struct+0x3a>
    if(encoder->debounce_cnt < encoder->debounce_min)
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	9b 81       	ldd	r25, Y+3	; 0x03
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	1c f4       	brge	.+6      	; 0x400 <_Z12poll_encodermP14encoder_struct+0x30>
    	encoder->debounce_cnt++;
     3fa:	2f 5f       	subi	r18, 0xFF	; 255
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	0a c0       	rjmp	.+20     	; 0x414 <_Z12poll_encodermP14encoder_struct+0x44>
    else{ // debounce count is equal to or greater than minimum
    	encoder->pin_state = HIGH;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	9d 83       	std	Y+5, r25	; 0x05
     406:	8c 83       	std	Y+4, r24	; 0x04
     408:	0a c0       	rjmp	.+20     	; 0x41e <_Z12poll_encodermP14encoder_struct+0x4e>
    }
  }
  else{
    if(encoder->debounce_cnt > 0)
     40a:	12 16       	cp	r1, r18
     40c:	13 06       	cpc	r1, r19
     40e:	2c f4       	brge	.+10     	; 0x41a <_Z12poll_encodermP14encoder_struct+0x4a>
    	encoder->debounce_cnt--;
     410:	21 50       	subi	r18, 0x01	; 1
     412:	30 40       	sbci	r19, 0x00	; 0
     414:	39 83       	std	Y+1, r19	; 0x01
     416:	28 83       	st	Y, r18
     418:	02 c0       	rjmp	.+4      	; 0x41e <_Z12poll_encodermP14encoder_struct+0x4e>
    else{ // debounce count is at zero
    	encoder->pin_state = LOW;
     41a:	1d 82       	std	Y+5, r1	; 0x05
     41c:	1c 82       	std	Y+4, r1	; 0x04
    }
  }

  if (encoder->last_state != encoder->pin_state){
     41e:	6c 81       	ldd	r22, Y+4	; 0x04
     420:	7d 81       	ldd	r23, Y+5	; 0x05
     422:	8e 89       	ldd	r24, Y+22	; 0x16
     424:	9f 89       	ldd	r25, Y+23	; 0x17
     426:	86 17       	cp	r24, r22
     428:	97 07       	cpc	r25, r23
     42a:	91 f0       	breq	.+36     	; 0x450 <_Z12poll_encodermP14encoder_struct+0x80>
  	digitalWrite(LED_PIN, encoder->pin_state);
     42c:	8d e0       	ldi	r24, 0x0D	; 13
     42e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
  	if(encoder->pin_state == LOW){ // detect falling edge
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	89 2b       	or	r24, r25
     438:	59 f4       	brne	.+22     	; 0x450 <_Z12poll_encodermP14encoder_struct+0x80>
//    		tach_enc->last_period = (tach_enc->alpha*(current_time - tach_enc->startTime)
//    				+ (1000L - tach_enc->alpha)*tach_enc->last_period)/1000;
  		encoder->last_period = (current_time - encoder->startTime);
     43a:	8e 81       	ldd	r24, Y+6	; 0x06
     43c:	9f 81       	ldd	r25, Y+7	; 0x07
     43e:	97 01       	movw	r18, r14
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	3b 8b       	std	Y+19, r19	; 0x13
     446:	2a 8b       	std	Y+18, r18	; 0x12
  		encoder->startTime = current_time;
     448:	ee 82       	std	Y+6, r14	; 0x06
     44a:	ff 82       	std	Y+7, r15	; 0x07
     44c:	08 87       	std	Y+8, r16	; 0x08
     44e:	19 87       	std	Y+9, r17	; 0x09
  	}
  }
  encoder->last_state = encoder->pin_state;
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	9d 81       	ldd	r25, Y+5	; 0x05
     454:	9f 8b       	std	Y+23, r25	; 0x17
     456:	8e 8b       	std	Y+22, r24	; 0x16
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	08 95       	ret

00000466 <_Z8LcdWritehh>:
  {
    LcdCharacter(*characters++);
  }
}

void LcdWrite(byte dc, byte data)
     466:	1f 93       	push	r17
     468:	98 2f       	mov	r25, r24
     46a:	16 2f       	mov	r17, r22
{
  digitalWrite(PIN_DC, dc);
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	69 2f       	mov	r22, r25
     470:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
  digitalWrite(PIN_SCE, LOW);
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
     47c:	87 e0       	ldi	r24, 0x07	; 7
     47e:	68 e0       	ldi	r22, 0x08	; 8
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	21 2f       	mov	r18, r17
     484:	0e 94 13 0a 	call	0x1426	; 0x1426 <shiftOut>
  digitalWrite(PIN_SCE, HIGH);
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
}
     490:	1f 91       	pop	r17
     492:	08 95       	ret

00000494 <_Z6gotoXYii>:

void gotoXY(int x, int y) {
     494:	1f 93       	push	r17
     496:	16 2f       	mov	r17, r22
  LcdWrite(0, 0x80 | x);  // Column.
     498:	68 2f       	mov	r22, r24
     49a:	60 68       	ori	r22, 0x80	; 128
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(0, 0x40 | y);  // Row.  ?
     4a2:	10 64       	ori	r17, 0x40	; 64
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	61 2f       	mov	r22, r17
     4a8:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
}
     4ac:	1f 91       	pop	r17
     4ae:	08 95       	ret

000004b0 <_Z13LcdInitializev>:
  }
}

void LcdInitialize(void)
{
  pinMode(PIN_SCE, OUTPUT);
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(PIN_RESET, OUTPUT);
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(PIN_DC, OUTPUT);
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(PIN_SDIN, OUTPUT);
     4c8:	87 e0       	ldi	r24, 0x07	; 7
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(PIN_SCLK, OUTPUT);
     4d0:	88 e0       	ldi	r24, 0x08	; 8
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  digitalWrite(PIN_RESET, LOW);
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
  digitalWrite(PIN_RESET, HIGH);
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	61 e2       	ldi	r22, 0x21	; 33
     4ec:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast).
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	61 eb       	ldi	r22, 0xB1	; 177
     4f4:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	64 e0       	ldi	r22, 0x04	; 4
     4fc:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	64 e1       	ldi	r22, 0x14	; 20
     504:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	6c e0       	ldi	r22, 0x0C	; 12
     50c:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x20 );
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	60 e2       	ldi	r22, 0x20	; 32
     514:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_C, 0x0C );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	6c e0       	ldi	r22, 0x0C	; 12
     51c:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
}
     520:	08 95       	ret

00000522 <_Z8LcdClearv>:
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void)
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	c0 e0       	ldi	r28, 0x00	; 0
     528:	d0 e0       	ldi	r29, 0x00	; 0
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void)
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	c8 3f       	cpi	r28, 0xF8	; 248
     538:	d8 07       	cpc	r29, r24
     53a:	b9 f7       	brne	.-18     	; 0x52a <_Z8LcdClearv+0x8>
  {
    LcdWrite(LCD_D, 0x00);
  }
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <_Z12LcdCharacterc>:

encoder_struct tach_enc;
current_sensor_struct current_sensor;
volt_sensor_struct volt_sensor;

void LcdCharacter(char character)
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	18 2f       	mov	r17, r24
{
  LcdWrite(LCD_D, 0x00);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
     554:	81 2f       	mov	r24, r17
     556:	99 27       	eor	r25, r25
     558:	87 fd       	sbrc	r24, 7
     55a:	90 95       	com	r25
     55c:	80 97       	sbiw	r24, 0x20	; 32
     55e:	ec 01       	movw	r28, r24
     560:	cc 0f       	add	r28, r28
     562:	dd 1f       	adc	r29, r29
     564:	cc 0f       	add	r28, r28
     566:	dd 1f       	adc	r29, r29
     568:	c8 0f       	add	r28, r24
     56a:	d9 1f       	adc	r29, r25
     56c:	c6 51       	subi	r28, 0x16	; 22
     56e:	de 4f       	sbci	r29, 0xFE	; 254
  for (int index = 0; index < 5; index++)
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	18 02       	muls	r17, r24
     574:	80 01       	movw	r16, r0
     576:	11 24       	eor	r1, r1
     578:	01 5b       	subi	r16, 0xB1	; 177
     57a:	1e 4f       	sbci	r17, 0xFE	; 254
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	69 91       	ld	r22, Y+
     580:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
volt_sensor_struct volt_sensor;

void LcdCharacter(char character)
{
  LcdWrite(LCD_D, 0x00);
  for (int index = 0; index < 5; index++)
     584:	c0 17       	cp	r28, r16
     586:	d1 07       	cpc	r29, r17
     588:	c9 f7       	brne	.-14     	; 0x57c <_Z12LcdCharacterc+0x3a>
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	0e 94 33 02 	call	0x466	; 0x466 <_Z8LcdWritehh>
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <_Z9LcdStringPc>:
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
  LcdWrite(LCD_C, 0x20 );
  LcdWrite(LCD_C, 0x0C );
}

void LcdString(char *characters)
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <_Z9LcdStringPc+0xe>
{
  while (*characters)
  {
    LcdCharacter(*characters++);
     5a4:	21 96       	adiw	r28, 0x01	; 1
     5a6:	0e 94 a1 02 	call	0x542	; 0x542 <_Z12LcdCharacterc>
  LcdWrite(LCD_C, 0x0C );
}

void LcdString(char *characters)
{
  while (*characters)
     5aa:	88 81       	ld	r24, Y
     5ac:	88 23       	and	r24, r24
     5ae:	d1 f7       	brne	.-12     	; 0x5a4 <_Z9LcdStringPc+0x8>
  {
    LcdCharacter(*characters++);
  }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <loop>:
void calculate_voltage(volt_sensor_struct* volt_sensor){
	volt_sensor->sense_cts = ((long int)(volt_sensor->sense_cts*800L) + (long int)((analogRead(VOLT_PIN))*200L))/1000L;
	volt_sensor->voltage = map(volt_sensor->sense_cts, 0, 1023, 0, volt_sensor->max_volts);
}

void loop() {
     5b6:	2f 92       	push	r2
     5b8:	3f 92       	push	r3
     5ba:	4f 92       	push	r4
     5bc:	5f 92       	push	r5
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
	long unsigned int current_time = millis();
     5da:	0e 94 db 08 	call	0x11b6	; 0x11b6 <millis>
     5de:	1b 01       	movw	r2, r22
     5e0:	2c 01       	movw	r4, r24
  if(current_time >= sample_clock){
     5e2:	80 91 e2 03 	lds	r24, 0x03E2
     5e6:	90 91 e3 03 	lds	r25, 0x03E3
     5ea:	a0 91 e4 03 	lds	r26, 0x03E4
     5ee:	b0 91 e5 03 	lds	r27, 0x03E5
     5f2:	28 16       	cp	r2, r24
     5f4:	39 06       	cpc	r3, r25
     5f6:	4a 06       	cpc	r4, r26
     5f8:	5b 06       	cpc	r5, r27
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <loop+0x48>
     5fc:	60 c2       	rjmp	.+1216   	; 0xabe <__stack+0x1bf>
  	// reset sampling clock
  	sample_clock += SAMPLE_PERIOD;
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	a1 1d       	adc	r26, r1
     602:	b1 1d       	adc	r27, r1
     604:	80 93 e2 03 	sts	0x03E2, r24
     608:	90 93 e3 03 	sts	0x03E3, r25
     60c:	a0 93 e4 03 	sts	0x03E4, r26
     610:	b0 93 e5 03 	sts	0x03E5, r27

    // step through impulse routine
//    step_pulser(current_time, &pulser);

    // poll the tachometer encoder
    poll_encoder(current_time, &tach_enc);
     614:	c2 01       	movw	r24, r4
     616:	b1 01       	movw	r22, r2
     618:	4e e6       	ldi	r20, 0x6E	; 110
     61a:	54 e0       	ldi	r21, 0x04	; 4
     61c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z12poll_encodermP14encoder_struct>

		if(current_time >= calc_tach_clock){
     620:	80 91 de 03 	lds	r24, 0x03DE
     624:	90 91 df 03 	lds	r25, 0x03DF
     628:	a0 91 e0 03 	lds	r26, 0x03E0
     62c:	b0 91 e1 03 	lds	r27, 0x03E1
     630:	28 16       	cp	r2, r24
     632:	39 06       	cpc	r3, r25
     634:	4a 06       	cpc	r4, r26
     636:	5b 06       	cpc	r5, r27
     638:	10 f1       	brcs	.+68     	; 0x67e <loop+0xc8>
			calc_tach_clock = current_time + calc_tach_period;
     63a:	80 91 e5 01 	lds	r24, 0x01E5
     63e:	90 91 e6 01 	lds	r25, 0x01E6
     642:	aa 27       	eor	r26, r26
     644:	97 fd       	sbrc	r25, 7
     646:	a0 95       	com	r26
     648:	ba 2f       	mov	r27, r26
     64a:	82 0d       	add	r24, r2
     64c:	93 1d       	adc	r25, r3
     64e:	a4 1d       	adc	r26, r4
     650:	b5 1d       	adc	r27, r5
     652:	80 93 de 03 	sts	0x03DE, r24
     656:	90 93 df 03 	sts	0x03DF, r25
     65a:	a0 93 e0 03 	sts	0x03E0, r26
     65e:	b0 93 e1 03 	sts	0x03E1, r27
			calculate_tach(current_time, &tach_enc);
     662:	c2 01       	movw	r24, r4
     664:	b1 01       	movw	r22, r2
     666:	4e e6       	ldi	r20, 0x6E	; 110
     668:	54 e0       	ldi	r21, 0x04	; 4
     66a:	0e 94 8c 00 	call	0x118	; 0x118 <_Z14calculate_tachmP14encoder_struct>
			calculate_current(&current_sensor);
     66e:	8c e8       	ldi	r24, 0x8C	; 140
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z17calculate_currentP21current_sensor_struct>
			calculate_voltage(&volt_sensor);
     676:	8c e9       	ldi	r24, 0x9C	; 156
     678:	94 e0       	ldi	r25, 0x04	; 4
     67a:	0e 94 01 01 	call	0x202	; 0x202 <_Z17calculate_voltageP18volt_sensor_struct>
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }

		if(current_time >= update_display_clock){
     67e:	80 91 e6 03 	lds	r24, 0x03E6
     682:	90 91 e7 03 	lds	r25, 0x03E7
     686:	a0 91 e8 03 	lds	r26, 0x03E8
     68a:	b0 91 e9 03 	lds	r27, 0x03E9
     68e:	28 16       	cp	r2, r24
     690:	39 06       	cpc	r3, r25
     692:	4a 06       	cpc	r4, r26
     694:	5b 06       	cpc	r5, r27
     696:	08 f4       	brcc	.+2      	; 0x69a <loop+0xe4>
     698:	38 c1       	rjmp	.+624    	; 0x90a <__stack+0xb>

			update_display_clock = current_time + update_display_period;
     69a:	80 91 e3 01 	lds	r24, 0x01E3
     69e:	90 91 e4 01 	lds	r25, 0x01E4
     6a2:	aa 27       	eor	r26, r26
     6a4:	97 fd       	sbrc	r25, 7
     6a6:	a0 95       	com	r26
     6a8:	ba 2f       	mov	r27, r26
     6aa:	82 0d       	add	r24, r2
     6ac:	93 1d       	adc	r25, r3
     6ae:	a4 1d       	adc	r26, r4
     6b0:	b5 1d       	adc	r27, r5
     6b2:	80 93 e6 03 	sts	0x03E6, r24
     6b6:	90 93 e7 03 	sts	0x03E7, r25
     6ba:	a0 93 e8 03 	sts	0x03E8, r26
     6be:	b0 93 e9 03 	sts	0x03E9, r27
		  snprintf(outputbuffer, 11,"%d.%02d Amps", (current_sensor.current)/1000,
		  		((abs(current_sensor.current) % 1000) / 10));
     6c2:	40 91 9a 04 	lds	r20, 0x049A
     6c6:	e0 91 9b 04 	lds	r30, 0x049B
     6ca:	8d b7       	in	r24, 0x3d	; 61
     6cc:	9e b7       	in	r25, 0x3e	; 62
     6ce:	0a 97       	sbiw	r24, 0x0a	; 10
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	9e bf       	out	0x3e, r25	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	8d bf       	out	0x3d, r24	; 61
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	21 96       	adiw	r28, 0x01	; 1
     6e0:	8e ee       	ldi	r24, 0xEE	; 238
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	ad b7       	in	r26, 0x3d	; 61
     6e6:	be b7       	in	r27, 0x3e	; 62
     6e8:	12 96       	adiw	r26, 0x02	; 2
     6ea:	9c 93       	st	X, r25
     6ec:	8e 93       	st	-X, r24
     6ee:	11 97       	sbiw	r26, 0x01	; 1
     6f0:	8b e0       	ldi	r24, 0x0B	; 11
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	9b 83       	std	Y+3, r25	; 0x03
     6f6:	8a 83       	std	Y+2, r24	; 0x02
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	9d 83       	std	Y+5, r25	; 0x05
     6fe:	8c 83       	std	Y+4, r24	; 0x04
     700:	84 2f       	mov	r24, r20
     702:	9e 2f       	mov	r25, r30
     704:	68 ee       	ldi	r22, 0xE8	; 232
     706:	73 e0       	ldi	r23, 0x03	; 3
     708:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divmodhi4>
     70c:	7f 83       	std	Y+7, r23	; 0x07
     70e:	6e 83       	std	Y+6, r22	; 0x06
     710:	24 2f       	mov	r18, r20
     712:	3e 2f       	mov	r19, r30
     714:	c9 01       	movw	r24, r18
     716:	97 ff       	sbrs	r25, 7
     718:	03 c0       	rjmp	.+6      	; 0x720 <loop+0x16a>
     71a:	90 95       	com	r25
     71c:	81 95       	neg	r24
     71e:	9f 4f       	sbci	r25, 0xFF	; 255
     720:	68 ee       	ldi	r22, 0xE8	; 232
     722:	73 e0       	ldi	r23, 0x03	; 3
     724:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divmodhi4>
     728:	6a e0       	ldi	r22, 0x0A	; 10
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divmodhi4>
     730:	79 87       	std	Y+9, r23	; 0x09
     732:	68 87       	std	Y+8, r22	; 0x08
     734:	0e 94 de 0a 	call	0x15bc	; 0x15bc <snprintf>

		  gotoXY(6,1);
     738:	ed b7       	in	r30, 0x3d	; 61
     73a:	fe b7       	in	r31, 0x3e	; 62
     73c:	3a 96       	adiw	r30, 0x0a	; 10
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	fe bf       	out	0x3e, r31	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	ed bf       	out	0x3d, r30	; 61
     748:	86 e0       	ldi	r24, 0x06	; 6
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString((char*)"           ");
     754:	8d e0       	ldi	r24, 0x0D	; 13
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		  gotoXY(6,1);
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString(outputbuffer);
     768:	9e ee       	ldi	r25, 0xEE	; 238
     76a:	a9 2e       	mov	r10, r25
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	b9 2e       	mov	r11, r25
     770:	c5 01       	movw	r24, r10
     772:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

		  snprintf(outputbuffer,11,"%ld.%01ld RPM", (60*tach_enc.hertz)/1000, ((60*tach_enc.hertz)%1000) / 100);
     776:	60 91 7a 04 	lds	r22, 0x047A
     77a:	70 91 7b 04 	lds	r23, 0x047B
     77e:	80 91 7c 04 	lds	r24, 0x047C
     782:	90 91 7d 04 	lds	r25, 0x047D
     786:	2c e3       	ldi	r18, 0x3C	; 60
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
     796:	8d b7       	in	r24, 0x3d	; 61
     798:	9e b7       	in	r25, 0x3e	; 62
     79a:	0e 97       	sbiw	r24, 0x0e	; 14
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	9e bf       	out	0x3e, r25	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	8d bf       	out	0x3d, r24	; 61
     7a6:	0d b7       	in	r16, 0x3d	; 61
     7a8:	1e b7       	in	r17, 0x3e	; 62
     7aa:	0f 5f       	subi	r16, 0xFF	; 255
     7ac:	1f 4f       	sbci	r17, 0xFF	; 255
     7ae:	ad b7       	in	r26, 0x3d	; 61
     7b0:	be b7       	in	r27, 0x3e	; 62
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	bc 92       	st	X, r11
     7b6:	ae 92       	st	-X, r10
     7b8:	11 97       	sbiw	r26, 0x01	; 1
     7ba:	8b e0       	ldi	r24, 0x0B	; 11
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	f8 01       	movw	r30, r16
     7c0:	93 83       	std	Z+3, r25	; 0x03
     7c2:	82 83       	std	Z+2, r24	; 0x02
     7c4:	89 e1       	ldi	r24, 0x19	; 25
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	95 83       	std	Z+5, r25	; 0x05
     7ca:	84 83       	std	Z+4, r24	; 0x04
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	28 ee       	ldi	r18, 0xE8	; 232
     7d2:	33 e0       	ldi	r19, 0x03	; 3
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     7dc:	d8 01       	movw	r26, r16
     7de:	16 96       	adiw	r26, 0x06	; 6
     7e0:	2d 93       	st	X+, r18
     7e2:	3d 93       	st	X+, r19
     7e4:	4d 93       	st	X+, r20
     7e6:	5c 93       	st	X, r21
     7e8:	19 97       	sbiw	r26, 0x09	; 9
     7ea:	c7 01       	movw	r24, r14
     7ec:	b6 01       	movw	r22, r12
     7ee:	28 ee       	ldi	r18, 0xE8	; 232
     7f0:	33 e0       	ldi	r19, 0x03	; 3
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     7fa:	24 e6       	ldi	r18, 0x64	; 100
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     806:	f8 01       	movw	r30, r16
     808:	22 87       	std	Z+10, r18	; 0x0a
     80a:	33 87       	std	Z+11, r19	; 0x0b
     80c:	44 87       	std	Z+12, r20	; 0x0c
     80e:	55 87       	std	Z+13, r21	; 0x0d
     810:	0e 94 de 0a 	call	0x15bc	; 0x15bc <snprintf>
		  gotoXY(6,3);
     814:	8d b7       	in	r24, 0x3d	; 61
     816:	9e b7       	in	r25, 0x3e	; 62
     818:	0e 96       	adiw	r24, 0x0e	; 14
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	9e bf       	out	0x3e, r25	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	8d bf       	out	0x3d, r24	; 61
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	63 e0       	ldi	r22, 0x03	; 3
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString((char*)"           ");
     830:	8d e0       	ldi	r24, 0x0D	; 13
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		  gotoXY(6,3);
     838:	86 e0       	ldi	r24, 0x06	; 6
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	63 e0       	ldi	r22, 0x03	; 3
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString(outputbuffer);
     844:	c5 01       	movw	r24, r10
     846:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

		  snprintf(outputbuffer,12,"%ld.%02ld Volts", volt_sensor.voltage/1000, ((volt_sensor.voltage)%1000) / 10);
     84a:	c0 90 a6 04 	lds	r12, 0x04A6
     84e:	d0 90 a7 04 	lds	r13, 0x04A7
     852:	e0 90 a8 04 	lds	r14, 0x04A8
     856:	f0 90 a9 04 	lds	r15, 0x04A9
     85a:	ad b7       	in	r26, 0x3d	; 61
     85c:	be b7       	in	r27, 0x3e	; 62
     85e:	1e 97       	sbiw	r26, 0x0e	; 14
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	be bf       	out	0x3e, r27	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	ad bf       	out	0x3d, r26	; 61
     86a:	0d b7       	in	r16, 0x3d	; 61
     86c:	1e b7       	in	r17, 0x3e	; 62
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	12 96       	adiw	r26, 0x02	; 2
     874:	bc 92       	st	X, r11
     876:	ae 92       	st	-X, r10
     878:	11 97       	sbiw	r26, 0x01	; 1
     87a:	8c e0       	ldi	r24, 0x0C	; 12
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	f8 01       	movw	r30, r16
     880:	93 83       	std	Z+3, r25	; 0x03
     882:	82 83       	std	Z+2, r24	; 0x02
     884:	87 e2       	ldi	r24, 0x27	; 39
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	95 83       	std	Z+5, r25	; 0x05
     88a:	84 83       	std	Z+4, r24	; 0x04
     88c:	c7 01       	movw	r24, r14
     88e:	b6 01       	movw	r22, r12
     890:	28 ee       	ldi	r18, 0xE8	; 232
     892:	33 e0       	ldi	r19, 0x03	; 3
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     89c:	d8 01       	movw	r26, r16
     89e:	16 96       	adiw	r26, 0x06	; 6
     8a0:	2d 93       	st	X+, r18
     8a2:	3d 93       	st	X+, r19
     8a4:	4d 93       	st	X+, r20
     8a6:	5c 93       	st	X, r21
     8a8:	19 97       	sbiw	r26, 0x09	; 9
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	28 ee       	ldi	r18, 0xE8	; 232
     8b0:	33 e0       	ldi	r19, 0x03	; 3
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     8ba:	2a e0       	ldi	r18, 0x0A	; 10
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     8c6:	f8 01       	movw	r30, r16
     8c8:	22 87       	std	Z+10, r18	; 0x0a
     8ca:	33 87       	std	Z+11, r19	; 0x0b
     8cc:	44 87       	std	Z+12, r20	; 0x0c
     8ce:	55 87       	std	Z+13, r21	; 0x0d
     8d0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <snprintf>
		  gotoXY(6,5);
     8d4:	8d b7       	in	r24, 0x3d	; 61
     8d6:	9e b7       	in	r25, 0x3e	; 62
     8d8:	0e 96       	adiw	r24, 0x0e	; 14
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	9e bf       	out	0x3e, r25	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	8d bf       	out	0x3d, r24	; 61
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	65 e0       	ldi	r22, 0x05	; 5
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString((char*)"           ");
     8f0:	8d e0       	ldi	r24, 0x0D	; 13
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		  gotoXY(6,5);
     8f8:	86 e0       	ldi	r24, 0x06	; 6
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	65 e0       	ldi	r22, 0x05	; 5
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
		  LcdString(outputbuffer);
     904:	c5 01       	movw	r24, r10
     906:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>
		}
		if(current_time >= post_to_serial_clock){
     90a:	80 91 ea 03 	lds	r24, 0x03EA
     90e:	90 91 eb 03 	lds	r25, 0x03EB
     912:	a0 91 ec 03 	lds	r26, 0x03EC
     916:	b0 91 ed 03 	lds	r27, 0x03ED
     91a:	28 16       	cp	r2, r24
     91c:	39 06       	cpc	r3, r25
     91e:	4a 06       	cpc	r4, r26
     920:	5b 06       	cpc	r5, r27
     922:	08 f4       	brcc	.+2      	; 0x926 <__stack+0x27>
     924:	cc c0       	rjmp	.+408    	; 0xabe <__stack+0x1bf>
			post_to_serial_clock = current_time + post_to_serial_period;
     926:	80 91 e7 01 	lds	r24, 0x01E7
     92a:	90 91 e8 01 	lds	r25, 0x01E8
     92e:	aa 27       	eor	r26, r26
     930:	97 fd       	sbrc	r25, 7
     932:	a0 95       	com	r26
     934:	ba 2f       	mov	r27, r26
     936:	82 0d       	add	r24, r2
     938:	93 1d       	adc	r25, r3
     93a:	a4 1d       	adc	r26, r4
     93c:	b5 1d       	adc	r27, r5
     93e:	80 93 ea 03 	sts	0x03EA, r24
     942:	90 93 eb 03 	sts	0x03EB, r25
     946:	a0 93 ec 03 	sts	0x03EC, r26
     94a:	b0 93 ed 03 	sts	0x03ED, r27
//			Serial.write(tach_enc.hertz / 1000);
//			Serial.write(".");
//			Serial.write(tach_enc.hertz % 1000);
			sprintf(outputbuffer, "<r>%lu.%03lu\t%ld.%03ld\t%d\t%ld\t%ld.%03ld\t%ld</r>\n", current_time/1000,
					current_time % 1000, (60*tach_enc.hertz)/1000, ((60*tach_enc.hertz) % 1000)/10,current_sensor.current, current_sensor.sense_cts,
					volt_sensor.voltage / 1000, volt_sensor.voltage % 1000, volt_sensor.sense_cts);
     94e:	60 91 7a 04 	lds	r22, 0x047A
     952:	70 91 7b 04 	lds	r23, 0x047B
     956:	80 91 7c 04 	lds	r24, 0x047C
     95a:	90 91 7d 04 	lds	r25, 0x047D
     95e:	2c e3       	ldi	r18, 0x3C	; 60
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	80 90 a6 04 	lds	r8, 0x04A6
     972:	90 90 a7 04 	lds	r9, 0x04A7
     976:	a0 90 a8 04 	lds	r10, 0x04A8
     97a:	b0 90 a9 04 	lds	r11, 0x04A9
     97e:	ad b7       	in	r26, 0x3d	; 61
     980:	be b7       	in	r27, 0x3e	; 62
     982:	96 97       	sbiw	r26, 0x26	; 38
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	be bf       	out	0x3e, r27	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	ad bf       	out	0x3d, r26	; 61
     98e:	0d b7       	in	r16, 0x3d	; 61
     990:	1e b7       	in	r17, 0x3e	; 62
     992:	0f 5f       	subi	r16, 0xFF	; 255
     994:	1f 4f       	sbci	r17, 0xFF	; 255
     996:	8e ee       	ldi	r24, 0xEE	; 238
     998:	68 2e       	mov	r6, r24
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	78 2e       	mov	r7, r24
     99e:	12 96       	adiw	r26, 0x02	; 2
     9a0:	7c 92       	st	X, r7
     9a2:	6e 92       	st	-X, r6
     9a4:	11 97       	sbiw	r26, 0x01	; 1
     9a6:	87 e3       	ldi	r24, 0x37	; 55
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	f8 01       	movw	r30, r16
     9ac:	93 83       	std	Z+3, r25	; 0x03
     9ae:	82 83       	std	Z+2, r24	; 0x02
     9b0:	c2 01       	movw	r24, r4
     9b2:	b1 01       	movw	r22, r2
     9b4:	28 ee       	ldi	r18, 0xE8	; 232
     9b6:	33 e0       	ldi	r19, 0x03	; 3
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	0e 94 87 0a 	call	0x150e	; 0x150e <__udivmodsi4>
     9c0:	d8 01       	movw	r26, r16
     9c2:	14 96       	adiw	r26, 0x04	; 4
     9c4:	2d 93       	st	X+, r18
     9c6:	3d 93       	st	X+, r19
     9c8:	4d 93       	st	X+, r20
     9ca:	5c 93       	st	X, r21
     9cc:	17 97       	sbiw	r26, 0x07	; 7
     9ce:	c2 01       	movw	r24, r4
     9d0:	b1 01       	movw	r22, r2
     9d2:	28 ee       	ldi	r18, 0xE8	; 232
     9d4:	33 e0       	ldi	r19, 0x03	; 3
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	0e 94 87 0a 	call	0x150e	; 0x150e <__udivmodsi4>
     9de:	f8 01       	movw	r30, r16
     9e0:	60 87       	std	Z+8, r22	; 0x08
     9e2:	71 87       	std	Z+9, r23	; 0x09
     9e4:	82 87       	std	Z+10, r24	; 0x0a
     9e6:	93 87       	std	Z+11, r25	; 0x0b
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	28 ee       	ldi	r18, 0xE8	; 232
     9ee:	33 e0       	ldi	r19, 0x03	; 3
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     9f8:	d8 01       	movw	r26, r16
     9fa:	1c 96       	adiw	r26, 0x0c	; 12
     9fc:	2d 93       	st	X+, r18
     9fe:	3d 93       	st	X+, r19
     a00:	4d 93       	st	X+, r20
     a02:	5c 93       	st	X, r21
     a04:	1f 97       	sbiw	r26, 0x0f	; 15
     a06:	c7 01       	movw	r24, r14
     a08:	b6 01       	movw	r22, r12
     a0a:	28 ee       	ldi	r18, 0xE8	; 232
     a0c:	33 e0       	ldi	r19, 0x03	; 3
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     a16:	2a e0       	ldi	r18, 0x0A	; 10
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     a22:	f8 01       	movw	r30, r16
     a24:	20 8b       	std	Z+16, r18	; 0x10
     a26:	31 8b       	std	Z+17, r19	; 0x11
     a28:	42 8b       	std	Z+18, r20	; 0x12
     a2a:	53 8b       	std	Z+19, r21	; 0x13
     a2c:	80 91 9a 04 	lds	r24, 0x049A
     a30:	90 91 9b 04 	lds	r25, 0x049B
     a34:	95 8b       	std	Z+21, r25	; 0x15
     a36:	84 8b       	std	Z+20, r24	; 0x14
     a38:	80 91 90 04 	lds	r24, 0x0490
     a3c:	90 91 91 04 	lds	r25, 0x0491
     a40:	a0 91 92 04 	lds	r26, 0x0492
     a44:	b0 91 93 04 	lds	r27, 0x0493
     a48:	86 8b       	std	Z+22, r24	; 0x16
     a4a:	97 8b       	std	Z+23, r25	; 0x17
     a4c:	a0 8f       	std	Z+24, r26	; 0x18
     a4e:	b1 8f       	std	Z+25, r27	; 0x19
     a50:	c5 01       	movw	r24, r10
     a52:	b4 01       	movw	r22, r8
     a54:	28 ee       	ldi	r18, 0xE8	; 232
     a56:	33 e0       	ldi	r19, 0x03	; 3
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     a60:	d8 01       	movw	r26, r16
     a62:	5a 96       	adiw	r26, 0x1a	; 26
     a64:	2d 93       	st	X+, r18
     a66:	3d 93       	st	X+, r19
     a68:	4d 93       	st	X+, r20
     a6a:	5c 93       	st	X, r21
     a6c:	5d 97       	sbiw	r26, 0x1d	; 29
     a6e:	c5 01       	movw	r24, r10
     a70:	b4 01       	movw	r22, r8
     a72:	28 ee       	ldi	r18, 0xE8	; 232
     a74:	33 e0       	ldi	r19, 0x03	; 3
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
     a7e:	f8 01       	movw	r30, r16
     a80:	66 8f       	std	Z+30, r22	; 0x1e
     a82:	77 8f       	std	Z+31, r23	; 0x1f
     a84:	80 a3       	std	Z+32, r24	; 0x20
     a86:	91 a3       	std	Z+33, r25	; 0x21
     a88:	80 91 9e 04 	lds	r24, 0x049E
     a8c:	90 91 9f 04 	lds	r25, 0x049F
     a90:	a0 91 a0 04 	lds	r26, 0x04A0
     a94:	b0 91 a1 04 	lds	r27, 0x04A1
     a98:	82 a3       	std	Z+34, r24	; 0x22
     a9a:	93 a3       	std	Z+35, r25	; 0x23
     a9c:	a4 a3       	std	Z+36, r26	; 0x24
     a9e:	b5 a3       	std	Z+37, r27	; 0x25
     aa0:	0e 94 0f 0b 	call	0x161e	; 0x161e <sprintf>
			Serial.write(outputbuffer);
     aa4:	8d b7       	in	r24, 0x3d	; 61
     aa6:	9e b7       	in	r25, 0x3e	; 62
     aa8:	86 96       	adiw	r24, 0x26	; 38
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	9e bf       	out	0x3e, r25	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	8d bf       	out	0x3d, r24	; 61
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	95 e0       	ldi	r25, 0x05	; 5
     ab8:	b3 01       	movw	r22, r6
     aba:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN5Print5writeEPKc>
		}
  }
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	6f 90       	pop	r6
     ada:	5f 90       	pop	r5
     adc:	4f 90       	pop	r4
     ade:	3f 90       	pop	r3
     ae0:	2f 90       	pop	r2
     ae2:	08 95       	ret

00000ae4 <setup>:
void gotoXY(int x, int y) {
  LcdWrite(0, 0x80 | x);  // Column.
  LcdWrite(0, 0x40 | y);  // Row.  ?
}

void setup() {
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
	Serial.begin(115200);
     ae8:	02 e3       	ldi	r16, 0x32	; 50
     aea:	15 e0       	ldi	r17, 0x05	; 5
     aec:	c8 01       	movw	r24, r16
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	52 ec       	ldi	r21, 0xC2	; 194
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN14HardwareSerial5beginEm>
	Serial.write("<h>time\tspeed\tcurrent\tcurrent_sense\tvoltage\tvoltage_sense</h>\n");
     afa:	c8 01       	movw	r24, r16
     afc:	68 e6       	ldi	r22, 0x68	; 104
     afe:	71 e0       	ldi	r23, 0x01	; 1
     b00:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN5Print5writeEPKc>
	Serial.write("<u>ms\trpm\tmA\tcounts\tvolts\tcts</u>\n");
     b04:	c8 01       	movw	r24, r16
     b06:	67 ea       	ldi	r22, 0xA7	; 167
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN5Print5writeEPKc>
  pinMode(LED_PWM_PIN, OUTPUT);
     b0e:	8b e0       	ldi	r24, 0x0B	; 11
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(VOLT_PIN, INPUT);
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(INTERRUPTER_PIN, INPUT);
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>
  pinMode(LED_PIN, OUTPUT);
     b26:	8d e0       	ldi	r24, 0x0D	; 13
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	0e 94 46 09 	call	0x128c	; 0x128c <pinMode>

  LcdInitialize();
     b2e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z13LcdInitializev>
  gotoXY(0,0);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
  LcdClear();
     b3e:	0e 94 91 02 	call	0x522	; 0x522 <_Z8LcdClearv>
  LcdString((char*)"Current:");
     b42:	8a ec       	ldi	r24, 0xCA	; 202
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

  gotoXY(0,2);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
  LcdString((char*)"Speed:");
     b56:	83 ed       	ldi	r24, 0xD3	; 211
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

  gotoXY(0,4);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	64 e0       	ldi	r22, 0x04	; 4
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	0e 94 4a 02 	call	0x494	; 0x494 <_Z6gotoXYii>
  LcdString((char*)"Voltage:");
     b6a:	8a ed       	ldi	r24, 0xDA	; 218
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z9LcdStringPc>

  blink_clock = millis();
     b72:	0e 94 db 08 	call	0x11b6	; 0x11b6 <millis>
     b76:	60 93 da 03 	sts	0x03DA, r22
     b7a:	70 93 db 03 	sts	0x03DB, r23
     b7e:	80 93 dc 03 	sts	0x03DC, r24
     b82:	90 93 dd 03 	sts	0x03DD, r25

  tach_enc.max_hertz = 5;
     b86:	25 e0       	ldi	r18, 0x05	; 5
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	30 93 79 04 	sts	0x0479, r19
     b8e:	20 93 78 04 	sts	0x0478, r18
  tach_enc.max_period = 5000;
     b92:	88 e8       	ldi	r24, 0x88	; 136
     b94:	93 e1       	ldi	r25, 0x13	; 19
     b96:	90 93 87 04 	sts	0x0487, r25
     b9a:	80 93 86 04 	sts	0x0486, r24
  tach_enc.pin_num = INTERRUPTER_PIN;
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 7f 04 	sts	0x047F, r25
     ba6:	80 93 7e 04 	sts	0x047E, r24
  tach_enc.debounce_min = 5;
     baa:	30 93 71 04 	sts	0x0471, r19
     bae:	20 93 70 04 	sts	0x0470, r18
  tach_enc.alpha = 800;
     bb2:	80 e2       	ldi	r24, 0x20	; 32
     bb4:	93 e0       	ldi	r25, 0x03	; 3
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	80 93 88 04 	sts	0x0488, r24
     bbe:	90 93 89 04 	sts	0x0489, r25
     bc2:	a0 93 8a 04 	sts	0x048A, r26
     bc6:	b0 93 8b 04 	sts	0x048B, r27
  tach_enc.cts_per_rev = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 83 04 	sts	0x0483, r25
     bd2:	80 93 82 04 	sts	0x0482, r24
  tach_enc.hertz = 0;
     bd6:	10 92 7a 04 	sts	0x047A, r1
     bda:	10 92 7b 04 	sts	0x047B, r1
     bde:	10 92 7c 04 	sts	0x047C, r1
     be2:	10 92 7d 04 	sts	0x047D, r1
//  pulser.step_period_up = pulser.pulse_up_period / impulse_num_samples;
//  pulser.step_period_down = pulser.pulse_down_period / impulse_num_samples;
//  pulser.index = 0;
//  pulser.offset_time = 0; // start pulse at beginning of each carrier period

  volt_sensor.max_volts = 68000; // mV at sensor saturation (depends on pot adj)
     be6:	80 ea       	ldi	r24, 0xA0	; 160
     be8:	99 e0       	ldi	r25, 0x09	; 9
     bea:	a1 e0       	ldi	r26, 0x01	; 1
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	80 93 a2 04 	sts	0x04A2, r24
     bf2:	90 93 a3 04 	sts	0x04A3, r25
     bf6:	a0 93 a4 04 	sts	0x04A4, r26
     bfa:	b0 93 a5 04 	sts	0x04A5, r27

//  init_impulse(impulse_array, impulse_num_samples, 255);


}
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     c04:	08 95       	ret

00000c06 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     c1e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c22:	20 91 ea 04 	lds	r18, 0x04EA
     c26:	30 91 eb 04 	lds	r19, 0x04EB
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	2f 73       	andi	r18, 0x3F	; 63
     c30:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     c32:	80 91 ec 04 	lds	r24, 0x04EC
     c36:	90 91 ed 04 	lds	r25, 0x04ED
     c3a:	28 17       	cp	r18, r24
     c3c:	39 07       	cpc	r19, r25
     c3e:	59 f0       	breq	.+22     	; 0xc56 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
     c40:	e0 91 ea 04 	lds	r30, 0x04EA
     c44:	f0 91 eb 04 	lds	r31, 0x04EB
     c48:	e6 55       	subi	r30, 0x56	; 86
     c4a:	fb 4f       	sbci	r31, 0xFB	; 251
     c4c:	40 83       	st	Z, r20
    buffer->head = i;
     c4e:	30 93 eb 04 	sts	0x04EB, r19
     c52:	20 93 ea 04 	sts	0x04EA, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     c6e:	e0 91 3e 05 	lds	r30, 0x053E
     c72:	f0 91 3f 05 	lds	r31, 0x053F
     c76:	e0 5c       	subi	r30, 0xC0	; 192
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	81 91       	ld	r24, Z+
     c7c:	91 91       	ld	r25, Z+
     c7e:	20 81       	ld	r18, Z
     c80:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     c82:	82 1b       	sub	r24, r18
     c84:	93 0b       	sbc	r25, r19
     c86:	8f 73       	andi	r24, 0x3F	; 63
     c88:	90 70       	andi	r25, 0x00	; 0
     c8a:	89 2b       	or	r24, r25
     c8c:	11 f0       	breq	.+4      	; 0xc92 <_Z14serialEventRunv+0x24>
     c8e:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z11serialEventv>
     c92:	08 95       	ret

00000c94 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     cb6:	20 91 2e 05 	lds	r18, 0x052E
     cba:	30 91 2f 05 	lds	r19, 0x052F
     cbe:	80 91 30 05 	lds	r24, 0x0530
     cc2:	90 91 31 05 	lds	r25, 0x0531
     cc6:	28 17       	cp	r18, r24
     cc8:	39 07       	cpc	r19, r25
     cca:	31 f4       	brne	.+12     	; 0xcd8 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     ccc:	80 91 c1 00 	lds	r24, 0x00C1
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	80 93 c1 00 	sts	0x00C1, r24
     cd6:	16 c0       	rjmp	.+44     	; 0xd04 <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     cd8:	e0 91 30 05 	lds	r30, 0x0530
     cdc:	f0 91 31 05 	lds	r31, 0x0531
     ce0:	e2 51       	subi	r30, 0x12	; 18
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     ce6:	80 91 30 05 	lds	r24, 0x0530
     cea:	90 91 31 05 	lds	r25, 0x0531
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	60 e4       	ldi	r22, 0x40	; 64
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divmodhi4>
     cf8:	90 93 31 05 	sts	0x0531, r25
     cfc:	80 93 30 05 	sts	0x0530, r24
	
  #if defined(UDR0)
    UDR0 = c;
     d00:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	0f 90       	pop	r0
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	0f 90       	pop	r0
     d22:	1f 90       	pop	r1
     d24:	18 95       	reti

00000d26 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	7a 01       	movw	r14, r20
     d3c:	8b 01       	movw	r16, r22
     d3e:	dd 24       	eor	r13, r13
     d40:	40 30       	cpi	r20, 0x00	; 0
     d42:	81 ee       	ldi	r24, 0xE1	; 225
     d44:	58 07       	cpc	r21, r24
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	68 07       	cpc	r22, r24
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	78 07       	cpc	r23, r24
     d4e:	11 f0       	breq	.+4      	; 0xd54 <_ZN14HardwareSerial5beginEm+0x2e>
     d50:	dd 24       	eor	r13, r13
     d52:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	a9 2e       	mov	r10, r25
     d58:	b1 2c       	mov	r11, r1
     d5a:	ec 89       	ldd	r30, Y+20	; 0x14
     d5c:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     d5e:	dd 20       	and	r13, r13
     d60:	69 f0       	breq	.+26     	; 0xd7c <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     d62:	c5 01       	movw	r24, r10
     d64:	0e 8c       	ldd	r0, Y+30	; 0x1e
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <_ZN14HardwareSerial5beginEm+0x46>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <_ZN14HardwareSerial5beginEm+0x42>
     d70:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	79 e0       	ldi	r23, 0x09	; 9
     d76:	8d e3       	ldi	r24, 0x3D	; 61
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     d7c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d7e:	60 e8       	ldi	r22, 0x80	; 128
     d80:	74 e8       	ldi	r23, 0x84	; 132
     d82:	8e e1       	ldi	r24, 0x1E	; 30
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a8 01       	movw	r20, r16
     d88:	97 01       	movw	r18, r14
     d8a:	0e 94 87 0a 	call	0x150e	; 0x150e <__udivmodsi4>
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	30 40       	sbci	r19, 0x00	; 0
     d92:	40 40       	sbci	r20, 0x00	; 0
     d94:	50 40       	sbci	r21, 0x00	; 0
     d96:	56 95       	lsr	r21
     d98:	47 95       	ror	r20
     d9a:	37 95       	ror	r19
     d9c:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     d9e:	80 e1       	ldi	r24, 0x10	; 16
     da0:	20 30       	cpi	r18, 0x00	; 0
     da2:	38 07       	cpc	r19, r24
     da4:	20 f0       	brcs	.+8      	; 0xdae <_ZN14HardwareSerial5beginEm+0x88>
     da6:	dd 20       	and	r13, r13
     da8:	11 f0       	breq	.+4      	; 0xdae <_ZN14HardwareSerial5beginEm+0x88>
     daa:	dd 24       	eor	r13, r13
     dac:	d6 cf       	rjmp	.-84     	; 0xd5a <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     dae:	e8 89       	ldd	r30, Y+16	; 0x10
     db0:	f9 89       	ldd	r31, Y+17	; 0x11
     db2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     db4:	ea 89       	ldd	r30, Y+18	; 0x12
     db6:	fb 89       	ldd	r31, Y+19	; 0x13
     db8:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     dba:	ee 89       	ldd	r30, Y+22	; 0x16
     dbc:	ff 89       	ldd	r31, Y+23	; 0x17
     dbe:	40 81       	ld	r20, Z
     dc0:	21 e0       	ldi	r18, 0x01	; 1
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	c9 01       	movw	r24, r18
     dc6:	0a 8c       	ldd	r0, Y+26	; 0x1a
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <_ZN14HardwareSerial5beginEm+0xa8>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <_ZN14HardwareSerial5beginEm+0xa4>
     dd2:	48 2b       	or	r20, r24
     dd4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     dd6:	ee 89       	ldd	r30, Y+22	; 0x16
     dd8:	ff 89       	ldd	r31, Y+23	; 0x17
     dda:	40 81       	ld	r20, Z
     ddc:	c9 01       	movw	r24, r18
     dde:	0b 8c       	ldd	r0, Y+27	; 0x1b
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <_ZN14HardwareSerial5beginEm+0xc0>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <_ZN14HardwareSerial5beginEm+0xbc>
     dea:	48 2b       	or	r20, r24
     dec:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     dee:	ee 89       	ldd	r30, Y+22	; 0x16
     df0:	ff 89       	ldd	r31, Y+23	; 0x17
     df2:	40 81       	ld	r20, Z
     df4:	c9 01       	movw	r24, r18
     df6:	0c 8c       	ldd	r0, Y+28	; 0x1c
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <_ZN14HardwareSerial5beginEm+0xd8>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <_ZN14HardwareSerial5beginEm+0xd4>
     e02:	48 2b       	or	r20, r24
     e04:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     e06:	ee 89       	ldd	r30, Y+22	; 0x16
     e08:	ff 89       	ldd	r31, Y+23	; 0x17
     e0a:	80 81       	ld	r24, Z
     e0c:	0d 8c       	ldd	r0, Y+29	; 0x1d
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <_ZN14HardwareSerial5beginEm+0xee>
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <_ZN14HardwareSerial5beginEm+0xea>
     e18:	20 95       	com	r18
     e1a:	28 23       	and	r18, r24
     e1c:	20 83       	st	Z, r18
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	08 95       	ret

00000e32 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     e32:	dc 01       	movw	r26, r24
     e34:	1c 96       	adiw	r26, 0x0c	; 12
     e36:	ed 91       	ld	r30, X+
     e38:	fc 91       	ld	r31, X
     e3a:	1d 97       	sbiw	r26, 0x0d	; 13
     e3c:	e0 5c       	subi	r30, 0xC0	; 192
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	21 91       	ld	r18, Z+
     e42:	31 91       	ld	r19, Z+
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	28 1b       	sub	r18, r24
     e4a:	39 0b       	sbc	r19, r25
     e4c:	2f 73       	andi	r18, 0x3F	; 63
     e4e:	30 70       	andi	r19, 0x00	; 0
}
     e50:	c9 01       	movw	r24, r18
     e52:	08 95       	ret

00000e54 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     e54:	dc 01       	movw	r26, r24
     e56:	1c 96       	adiw	r26, 0x0c	; 12
     e58:	ed 91       	ld	r30, X+
     e5a:	fc 91       	ld	r31, X
     e5c:	1d 97       	sbiw	r26, 0x0d	; 13
     e5e:	e0 5c       	subi	r30, 0xC0	; 192
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	20 81       	ld	r18, Z
     e64:	31 81       	ldd	r19, Z+1	; 0x01
     e66:	e0 54       	subi	r30, 0x40	; 64
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	df 01       	movw	r26, r30
     e6c:	ae 5b       	subi	r26, 0xBE	; 190
     e6e:	bf 4f       	sbci	r27, 0xFF	; 255
     e70:	8d 91       	ld	r24, X+
     e72:	9c 91       	ld	r25, X
     e74:	11 97       	sbiw	r26, 0x01	; 1
     e76:	28 17       	cp	r18, r24
     e78:	39 07       	cpc	r19, r25
     e7a:	19 f4       	brne	.+6      	; 0xe82 <_ZN14HardwareSerial4peekEv+0x2e>
     e7c:	2f ef       	ldi	r18, 0xFF	; 255
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     e82:	8d 91       	ld	r24, X+
     e84:	9c 91       	ld	r25, X
     e86:	e8 0f       	add	r30, r24
     e88:	f9 1f       	adc	r31, r25
     e8a:	80 81       	ld	r24, Z
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     e90:	c9 01       	movw	r24, r18
     e92:	08 95       	ret

00000e94 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     e94:	dc 01       	movw	r26, r24
     e96:	1c 96       	adiw	r26, 0x0c	; 12
     e98:	ed 91       	ld	r30, X+
     e9a:	fc 91       	ld	r31, X
     e9c:	1d 97       	sbiw	r26, 0x0d	; 13
     e9e:	e0 5c       	subi	r30, 0xC0	; 192
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	e0 54       	subi	r30, 0x40	; 64
     ea8:	f0 40       	sbci	r31, 0x00	; 0
     eaa:	df 01       	movw	r26, r30
     eac:	ae 5b       	subi	r26, 0xBE	; 190
     eae:	bf 4f       	sbci	r27, 0xFF	; 255
     eb0:	8d 91       	ld	r24, X+
     eb2:	9c 91       	ld	r25, X
     eb4:	11 97       	sbiw	r26, 0x01	; 1
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	19 f4       	brne	.+6      	; 0xec2 <_ZN14HardwareSerial4readEv+0x2e>
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
     ebe:	3f ef       	ldi	r19, 0xFF	; 255
     ec0:	10 c0       	rjmp	.+32     	; 0xee2 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	11 97       	sbiw	r26, 0x01	; 1
     ec8:	e8 0f       	add	r30, r24
     eca:	f9 1f       	adc	r31, r25
     ecc:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     ece:	8d 91       	ld	r24, X+
     ed0:	9c 91       	ld	r25, X
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	8f 73       	andi	r24, 0x3F	; 63
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	9c 93       	st	X, r25
     ede:	8e 93       	st	-X, r24
    return c;
     ee0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     ee2:	c9 01       	movw	r24, r18
     ee4:	08 95       	ret

00000ee6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     ee6:	fc 01       	movw	r30, r24
     ee8:	86 85       	ldd	r24, Z+14	; 0x0e
     eea:	97 85       	ldd	r25, Z+15	; 0x0f
     eec:	dc 01       	movw	r26, r24
     eee:	a0 5c       	subi	r26, 0xC0	; 192
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	fc 01       	movw	r30, r24
     ef4:	ee 5b       	subi	r30, 0xBE	; 190
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	2d 91       	ld	r18, X+
     efa:	3c 91       	ld	r19, X
     efc:	11 97       	sbiw	r26, 0x01	; 1
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	28 17       	cp	r18, r24
     f04:	39 07       	cpc	r19, r25
     f06:	c1 f7       	brne	.-16     	; 0xef8 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
     f08:	08 95       	ret

00000f0a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	ec 01       	movw	r28, r24
     f10:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     f12:	ee 85       	ldd	r30, Y+14	; 0x0e
     f14:	ff 85       	ldd	r31, Y+15	; 0x0f
     f16:	e0 5c       	subi	r30, 0xC0	; 192
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	e0 54       	subi	r30, 0x40	; 64
     f20:	f0 40       	sbci	r31, 0x00	; 0
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	60 e4       	ldi	r22, 0x40	; 64
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__divmodhi4>
     f2c:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     f2e:	df 01       	movw	r26, r30
     f30:	ae 5b       	subi	r26, 0xBE	; 190
     f32:	bf 4f       	sbci	r27, 0xFF	; 255
     f34:	8d 91       	ld	r24, X+
     f36:	9c 91       	ld	r25, X
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	28 17       	cp	r18, r24
     f3c:	39 07       	cpc	r19, r25
     f3e:	d1 f3       	breq	.-12     	; 0xf34 <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     f40:	e0 5c       	subi	r30, 0xC0	; 192
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	e0 54       	subi	r30, 0x40	; 64
     f4a:	f0 40       	sbci	r31, 0x00	; 0
     f4c:	e8 0f       	add	r30, r24
     f4e:	f9 1f       	adc	r31, r25
     f50:	40 83       	st	Z, r20
  _tx_buffer->head = i;
     f52:	ee 85       	ldd	r30, Y+14	; 0x0e
     f54:	ff 85       	ldd	r31, Y+15	; 0x0f
     f56:	e0 5c       	subi	r30, 0xC0	; 192
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	31 83       	std	Z+1, r19	; 0x01
     f5c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     f5e:	ee 89       	ldd	r30, Y+22	; 0x16
     f60:	ff 89       	ldd	r31, Y+23	; 0x17
     f62:	20 81       	ld	r18, Z
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0d 8c       	ldd	r0, Y+29	; 0x1d
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <_ZN14HardwareSerial5writeEh+0x66>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <_ZN14HardwareSerial5writeEh+0x62>
     f74:	28 2b       	or	r18, r24
     f76:	20 83       	st	Z, r18
  
  return 1;
}
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     f82:	10 92 35 05 	sts	0x0535, r1
     f86:	10 92 34 05 	sts	0x0534, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     f8a:	88 ee       	ldi	r24, 0xE8	; 232
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	80 93 36 05 	sts	0x0536, r24
     f96:	90 93 37 05 	sts	0x0537, r25
     f9a:	a0 93 38 05 	sts	0x0538, r26
     f9e:	b0 93 39 05 	sts	0x0539, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     fa2:	8e ec       	ldi	r24, 0xCE	; 206
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	90 93 33 05 	sts	0x0533, r25
     faa:	80 93 32 05 	sts	0x0532, r24
{
  _rx_buffer = rx_buffer;
     fae:	8a ea       	ldi	r24, 0xAA	; 170
     fb0:	94 e0       	ldi	r25, 0x04	; 4
     fb2:	90 93 3f 05 	sts	0x053F, r25
     fb6:	80 93 3e 05 	sts	0x053E, r24
  _tx_buffer = tx_buffer;
     fba:	8e ee       	ldi	r24, 0xEE	; 238
     fbc:	94 e0       	ldi	r25, 0x04	; 4
     fbe:	90 93 41 05 	sts	0x0541, r25
     fc2:	80 93 40 05 	sts	0x0540, r24
  _ubrrh = ubrrh;
     fc6:	85 ec       	ldi	r24, 0xC5	; 197
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	90 93 43 05 	sts	0x0543, r25
     fce:	80 93 42 05 	sts	0x0542, r24
  _ubrrl = ubrrl;
     fd2:	84 ec       	ldi	r24, 0xC4	; 196
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	90 93 45 05 	sts	0x0545, r25
     fda:	80 93 44 05 	sts	0x0544, r24
  _ucsra = ucsra;
     fde:	80 ec       	ldi	r24, 0xC0	; 192
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	90 93 47 05 	sts	0x0547, r25
     fe6:	80 93 46 05 	sts	0x0546, r24
  _ucsrb = ucsrb;
     fea:	81 ec       	ldi	r24, 0xC1	; 193
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 49 05 	sts	0x0549, r25
     ff2:	80 93 48 05 	sts	0x0548, r24
  _udr = udr;
     ff6:	86 ec       	ldi	r24, 0xC6	; 198
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	90 93 4b 05 	sts	0x054B, r25
     ffe:	80 93 4a 05 	sts	0x054A, r24
  _rxen = rxen;
    1002:	84 e0       	ldi	r24, 0x04	; 4
    1004:	80 93 4c 05 	sts	0x054C, r24
  _txen = txen;
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	80 93 4d 05 	sts	0x054D, r24
  _rxcie = rxcie;
    100e:	87 e0       	ldi	r24, 0x07	; 7
    1010:	80 93 4e 05 	sts	0x054E, r24
  _udrie = udrie;
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	80 93 4f 05 	sts	0x054F, r24
  _u2x = u2x;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 50 05 	sts	0x0550, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1020:	08 95       	ret

00001022 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	7c 01       	movw	r14, r24
    1034:	6b 01       	movw	r12, r22
    1036:	8a 01       	movw	r16, r20
    1038:	c0 e0       	ldi	r28, 0x00	; 0
    103a:	d0 e0       	ldi	r29, 0x00	; 0
    103c:	0f c0       	rjmp	.+30     	; 0x105c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    103e:	d6 01       	movw	r26, r12
    1040:	6d 91       	ld	r22, X+
    1042:	6d 01       	movw	r12, r26
    1044:	d7 01       	movw	r26, r14
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	01 90       	ld	r0, Z+
    104c:	f0 81       	ld	r31, Z
    104e:	e0 2d       	mov	r30, r0
    1050:	c7 01       	movw	r24, r14
    1052:	09 95       	icall
    1054:	c8 0f       	add	r28, r24
    1056:	d9 1f       	adc	r29, r25
    1058:	01 50       	subi	r16, 0x01	; 1
    105a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    105c:	01 15       	cp	r16, r1
    105e:	11 05       	cpc	r17, r1
    1060:	71 f7       	brne	.-36     	; 0x103e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1062:	ce 01       	movw	r24, r28
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	08 95       	ret

00001076 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    1076:	2f 92       	push	r2
    1078:	3f 92       	push	r3
    107a:	4f 92       	push	r4
    107c:	5f 92       	push	r5
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	3b 01       	movw	r6, r22
    10a0:	4c 01       	movw	r8, r24
    10a2:	19 01       	movw	r2, r18
    10a4:	2a 01       	movw	r4, r20
    10a6:	6d 89       	ldd	r22, Y+21	; 0x15
    10a8:	7e 89       	ldd	r23, Y+22	; 0x16
    10aa:	8f 89       	ldd	r24, Y+23	; 0x17
    10ac:	98 8d       	ldd	r25, Y+24	; 0x18
    10ae:	6a 19       	sub	r22, r10
    10b0:	7b 09       	sbc	r23, r11
    10b2:	8c 09       	sbc	r24, r12
    10b4:	9d 09       	sbc	r25, r13
    10b6:	62 1a       	sub	r6, r18
    10b8:	73 0a       	sbc	r7, r19
    10ba:	84 0a       	sbc	r8, r20
    10bc:	95 0a       	sbc	r9, r21
    10be:	a4 01       	movw	r20, r8
    10c0:	93 01       	movw	r18, r6
    10c2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__mulsi3>
    10c6:	e2 18       	sub	r14, r2
    10c8:	f3 08       	sbc	r15, r3
    10ca:	04 09       	sbc	r16, r4
    10cc:	15 09       	sbc	r17, r5
    10ce:	a8 01       	movw	r20, r16
    10d0:	97 01       	movw	r18, r14
    10d2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__divmodsi4>
    10d6:	2a 0d       	add	r18, r10
    10d8:	3b 1d       	adc	r19, r11
    10da:	4c 1d       	adc	r20, r12
    10dc:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    10de:	b9 01       	movw	r22, r18
    10e0:	ca 01       	movw	r24, r20
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	af 90       	pop	r10
    10f6:	9f 90       	pop	r9
    10f8:	8f 90       	pop	r8
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	3f 90       	pop	r3
    1104:	2f 90       	pop	r2
    1106:	08 95       	ret

00001108 <main>:
#include <Arduino.h>

int main(void)
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
{
	init();
    110c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    1110:	0e 94 72 05 	call	0xae4	; 0xae4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1114:	c7 e3       	ldi	r28, 0x37	; 55
    1116:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1118:	0e 94 db 02 	call	0x5b6	; 0x5b6 <loop>
		if (serialEventRun) serialEventRun();
    111c:	20 97       	sbiw	r28, 0x00	; 0
    111e:	e1 f3       	breq	.-8      	; 0x1118 <main+0x10>
    1120:	0e 94 37 06 	call	0xc6e	; 0xc6e <_Z14serialEventRunv>
    1124:	f9 cf       	rjmp	.-14     	; 0x1118 <main+0x10>

00001126 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    113c:	80 91 55 05 	lds	r24, 0x0555
    1140:	90 91 56 05 	lds	r25, 0x0556
    1144:	a0 91 57 05 	lds	r26, 0x0557
    1148:	b0 91 58 05 	lds	r27, 0x0558
	unsigned char f = timer0_fract;
    114c:	30 91 59 05 	lds	r19, 0x0559

	m += MILLIS_INC;
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	a1 1d       	adc	r26, r1
    1154:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1156:	23 2f       	mov	r18, r19
    1158:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    115a:	2d 37       	cpi	r18, 0x7D	; 125
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__vector_16+0x40>
		f -= FRACT_MAX;
    115e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	a1 1d       	adc	r26, r1
    1164:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1166:	20 93 59 05 	sts	0x0559, r18
	timer0_millis = m;
    116a:	80 93 55 05 	sts	0x0555, r24
    116e:	90 93 56 05 	sts	0x0556, r25
    1172:	a0 93 57 05 	sts	0x0557, r26
    1176:	b0 93 58 05 	sts	0x0558, r27
	timer0_overflow_count++;
    117a:	80 91 51 05 	lds	r24, 0x0551
    117e:	90 91 52 05 	lds	r25, 0x0552
    1182:	a0 91 53 05 	lds	r26, 0x0553
    1186:	b0 91 54 05 	lds	r27, 0x0554
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	a1 1d       	adc	r26, r1
    118e:	b1 1d       	adc	r27, r1
    1190:	80 93 51 05 	sts	0x0551, r24
    1194:	90 93 52 05 	sts	0x0552, r25
    1198:	a0 93 53 05 	sts	0x0553, r26
    119c:	b0 93 54 05 	sts	0x0554, r27
}
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    11b6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    11b8:	f8 94       	cli
	m = timer0_millis;
    11ba:	20 91 55 05 	lds	r18, 0x0555
    11be:	30 91 56 05 	lds	r19, 0x0556
    11c2:	40 91 57 05 	lds	r20, 0x0557
    11c6:	50 91 58 05 	lds	r21, 0x0558
	SREG = oldSREG;
    11ca:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    11cc:	b9 01       	movw	r22, r18
    11ce:	ca 01       	movw	r24, r20
    11d0:	08 95       	ret

000011d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11d4:	84 b5       	in	r24, 0x24	; 36
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11da:	84 b5       	in	r24, 0x24	; 36
    11dc:	81 60       	ori	r24, 0x01	; 1
    11de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11e0:	85 b5       	in	r24, 0x25	; 37
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11e6:	85 b5       	in	r24, 0x25	; 37
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11ec:	ee e6       	ldi	r30, 0x6E	; 110
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11f6:	e1 e8       	ldi	r30, 0x81	; 129
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11fc:	80 81       	ld	r24, Z
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1202:	80 81       	ld	r24, Z
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1208:	e0 e8       	ldi	r30, 0x80	; 128
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1212:	e1 eb       	ldi	r30, 0xB1	; 177
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    121c:	e0 eb       	ldi	r30, 0xB0	; 176
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	81 60       	ori	r24, 0x01	; 1
    1224:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1226:	ea e7       	ldi	r30, 0x7A	; 122
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	84 60       	ori	r24, 0x04	; 4
    122e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1236:	80 81       	ld	r24, Z
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    123c:	80 81       	ld	r24, Z
    123e:	80 68       	ori	r24, 0x80	; 128
    1240:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1242:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1246:	08 95       	ret

00001248 <analogRead>:

int analogRead(uint8_t pin)
{
    1248:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    124a:	8e 30       	cpi	r24, 0x0E	; 14
    124c:	08 f0       	brcs	.+2      	; 0x1250 <analogRead+0x8>
    124e:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1250:	97 70       	andi	r25, 0x07	; 7
    1252:	80 91 e9 01 	lds	r24, 0x01E9
    1256:	82 95       	swap	r24
    1258:	88 0f       	add	r24, r24
    125a:	88 0f       	add	r24, r24
    125c:	80 7c       	andi	r24, 0xC0	; 192
    125e:	89 2b       	or	r24, r25
    1260:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1264:	80 91 7a 00 	lds	r24, 0x007A
    1268:	80 64       	ori	r24, 0x40	; 64
    126a:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    126e:	80 91 7a 00 	lds	r24, 0x007A
    1272:	86 fd       	sbrc	r24, 6
    1274:	fc cf       	rjmp	.-8      	; 0x126e <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1276:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    127a:	40 91 79 00 	lds	r20, 0x0079
    127e:	94 2f       	mov	r25, r20
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	28 2b       	or	r18, r24
    1286:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1288:	c9 01       	movw	r24, r18
    128a:	08 95       	ret

0000128c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    128c:	48 2f       	mov	r20, r24
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	ca 01       	movw	r24, r20
    1292:	86 56       	subi	r24, 0x66	; 102
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	fc 01       	movw	r30, r24
    1298:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    129a:	4a 57       	subi	r20, 0x7A	; 122
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	fa 01       	movw	r30, r20
    12a0:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    12a2:	88 23       	and	r24, r24
    12a4:	c1 f0       	breq	.+48     	; 0x12d6 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    12a6:	e8 2f       	mov	r30, r24
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	e8 59       	subi	r30, 0x98	; 152
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	a5 91       	lpm	r26, Z+
    12b4:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    12b6:	66 23       	and	r22, r22
    12b8:	41 f4       	brne	.+16     	; 0x12ca <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    12ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12bc:	f8 94       	cli
		*reg &= ~bit;
    12be:	8c 91       	ld	r24, X
    12c0:	20 95       	com	r18
    12c2:	82 23       	and	r24, r18
    12c4:	8c 93       	st	X, r24
		SREG = oldSREG;
    12c6:	9f bf       	out	0x3f, r25	; 63
    12c8:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    12ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12cc:	f8 94       	cli
		*reg |= bit;
    12ce:	8c 91       	ld	r24, X
    12d0:	82 2b       	or	r24, r18
    12d2:	8c 93       	st	X, r24
		SREG = oldSREG;
    12d4:	9f bf       	out	0x3f, r25	; 63
    12d6:	08 95       	ret

000012d8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    12d8:	48 2f       	mov	r20, r24
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	ca 01       	movw	r24, r20
    12de:	82 55       	subi	r24, 0x52	; 82
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	fc 01       	movw	r30, r24
    12e4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    12e6:	ca 01       	movw	r24, r20
    12e8:	86 56       	subi	r24, 0x66	; 102
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	fc 01       	movw	r30, r24
    12ee:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    12f0:	4a 57       	subi	r20, 0x7A	; 122
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	fa 01       	movw	r30, r20
    12f6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    12f8:	33 23       	and	r19, r19
    12fa:	09 f4       	brne	.+2      	; 0x12fe <digitalWrite+0x26>
    12fc:	40 c0       	rjmp	.+128    	; 0x137e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12fe:	22 23       	and	r18, r18
    1300:	51 f1       	breq	.+84     	; 0x1356 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1302:	23 30       	cpi	r18, 0x03	; 3
    1304:	71 f0       	breq	.+28     	; 0x1322 <digitalWrite+0x4a>
    1306:	24 30       	cpi	r18, 0x04	; 4
    1308:	28 f4       	brcc	.+10     	; 0x1314 <digitalWrite+0x3c>
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	a1 f0       	breq	.+40     	; 0x1336 <digitalWrite+0x5e>
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	11 f5       	brne	.+68     	; 0x1356 <digitalWrite+0x7e>
    1312:	14 c0       	rjmp	.+40     	; 0x133c <digitalWrite+0x64>
    1314:	26 30       	cpi	r18, 0x06	; 6
    1316:	b1 f0       	breq	.+44     	; 0x1344 <digitalWrite+0x6c>
    1318:	27 30       	cpi	r18, 0x07	; 7
    131a:	c1 f0       	breq	.+48     	; 0x134c <digitalWrite+0x74>
    131c:	24 30       	cpi	r18, 0x04	; 4
    131e:	d9 f4       	brne	.+54     	; 0x1356 <digitalWrite+0x7e>
    1320:	04 c0       	rjmp	.+8      	; 0x132a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1322:	80 91 80 00 	lds	r24, 0x0080
    1326:	8f 77       	andi	r24, 0x7F	; 127
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    132a:	80 91 80 00 	lds	r24, 0x0080
    132e:	8f 7d       	andi	r24, 0xDF	; 223
    1330:	80 93 80 00 	sts	0x0080, r24
    1334:	10 c0       	rjmp	.+32     	; 0x1356 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1336:	84 b5       	in	r24, 0x24	; 36
    1338:	8f 77       	andi	r24, 0x7F	; 127
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    133c:	84 b5       	in	r24, 0x24	; 36
    133e:	8f 7d       	andi	r24, 0xDF	; 223
    1340:	84 bd       	out	0x24, r24	; 36
    1342:	09 c0       	rjmp	.+18     	; 0x1356 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1344:	80 91 b0 00 	lds	r24, 0x00B0
    1348:	8f 77       	andi	r24, 0x7F	; 127
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    134c:	80 91 b0 00 	lds	r24, 0x00B0
    1350:	8f 7d       	andi	r24, 0xDF	; 223
    1352:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1356:	e3 2f       	mov	r30, r19
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	ee 58       	subi	r30, 0x8E	; 142
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	a5 91       	lpm	r26, Z+
    1364:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1366:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1368:	f8 94       	cli

	if (val == LOW) {
    136a:	66 23       	and	r22, r22
    136c:	21 f4       	brne	.+8      	; 0x1376 <digitalWrite+0x9e>
		*out &= ~bit;
    136e:	8c 91       	ld	r24, X
    1370:	90 95       	com	r25
    1372:	89 23       	and	r24, r25
    1374:	02 c0       	rjmp	.+4      	; 0x137a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1376:	8c 91       	ld	r24, X
    1378:	89 2b       	or	r24, r25
    137a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    137c:	2f bf       	out	0x3f, r18	; 63
    137e:	08 95       	ret

00001380 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1380:	68 2f       	mov	r22, r24
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	cb 01       	movw	r24, r22
    1386:	82 55       	subi	r24, 0x52	; 82
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	fc 01       	movw	r30, r24
    138c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    138e:	cb 01       	movw	r24, r22
    1390:	86 56       	subi	r24, 0x66	; 102
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	fc 01       	movw	r30, r24
    1396:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    1398:	6a 57       	subi	r22, 0x7A	; 122
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	fb 01       	movw	r30, r22
    139e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    13a0:	99 23       	and	r25, r25
    13a2:	19 f4       	brne	.+6      	; 0x13aa <digitalRead+0x2a>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3c c0       	rjmp	.+120    	; 0x1422 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13aa:	22 23       	and	r18, r18
    13ac:	51 f1       	breq	.+84     	; 0x1402 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    13ae:	23 30       	cpi	r18, 0x03	; 3
    13b0:	71 f0       	breq	.+28     	; 0x13ce <digitalRead+0x4e>
    13b2:	24 30       	cpi	r18, 0x04	; 4
    13b4:	28 f4       	brcc	.+10     	; 0x13c0 <digitalRead+0x40>
    13b6:	21 30       	cpi	r18, 0x01	; 1
    13b8:	a1 f0       	breq	.+40     	; 0x13e2 <digitalRead+0x62>
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	11 f5       	brne	.+68     	; 0x1402 <digitalRead+0x82>
    13be:	14 c0       	rjmp	.+40     	; 0x13e8 <digitalRead+0x68>
    13c0:	26 30       	cpi	r18, 0x06	; 6
    13c2:	b1 f0       	breq	.+44     	; 0x13f0 <digitalRead+0x70>
    13c4:	27 30       	cpi	r18, 0x07	; 7
    13c6:	c1 f0       	breq	.+48     	; 0x13f8 <digitalRead+0x78>
    13c8:	24 30       	cpi	r18, 0x04	; 4
    13ca:	d9 f4       	brne	.+54     	; 0x1402 <digitalRead+0x82>
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13ce:	80 91 80 00 	lds	r24, 0x0080
    13d2:	8f 77       	andi	r24, 0x7F	; 127
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13d6:	80 91 80 00 	lds	r24, 0x0080
    13da:	8f 7d       	andi	r24, 0xDF	; 223
    13dc:	80 93 80 00 	sts	0x0080, r24
    13e0:	10 c0       	rjmp	.+32     	; 0x1402 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13e2:	84 b5       	in	r24, 0x24	; 36
    13e4:	8f 77       	andi	r24, 0x7F	; 127
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13e8:	84 b5       	in	r24, 0x24	; 36
    13ea:	8f 7d       	andi	r24, 0xDF	; 223
    13ec:	84 bd       	out	0x24, r24	; 36
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13f0:	80 91 b0 00 	lds	r24, 0x00B0
    13f4:	8f 77       	andi	r24, 0x7F	; 127
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13f8:	80 91 b0 00 	lds	r24, 0x00B0
    13fc:	8f 7d       	andi	r24, 0xDF	; 223
    13fe:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    1402:	89 2f       	mov	r24, r25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	84 58       	subi	r24, 0x84	; 132
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	fc 01       	movw	r30, r24
    1410:	a5 91       	lpm	r26, Z+
    1412:	b4 91       	lpm	r27, Z+
    1414:	8c 91       	ld	r24, X
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	84 23       	and	r24, r20
    141c:	11 f0       	breq	.+4      	; 0x1422 <digitalRead+0xa2>
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    1422:	c9 01       	movw	r24, r18
    1424:	08 95       	ret

00001426 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	e8 2e       	mov	r14, r24
    143a:	f6 2e       	mov	r15, r22
    143c:	b4 2e       	mov	r11, r20
    143e:	c7 e0       	ldi	r28, 0x07	; 7
    1440:	d0 e0       	ldi	r29, 0x00	; 0
    1442:	02 2f       	mov	r16, r18
    1444:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    1446:	87 e0       	ldi	r24, 0x07	; 7
    1448:	c8 2e       	mov	r12, r24
    144a:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    144c:	bb 20       	and	r11, r11
    144e:	59 f4       	brne	.+22     	; 0x1466 <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1450:	b6 01       	movw	r22, r12
    1452:	6c 1b       	sub	r22, r28
    1454:	7d 0b       	sbc	r23, r29
    1456:	c8 01       	movw	r24, r16
    1458:	02 c0       	rjmp	.+4      	; 0x145e <shiftOut+0x38>
    145a:	95 95       	asr	r25
    145c:	87 95       	ror	r24
    145e:	6a 95       	dec	r22
    1460:	e2 f7       	brpl	.-8      	; 0x145a <shiftOut+0x34>
    1462:	bc 01       	movw	r22, r24
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    1466:	b8 01       	movw	r22, r16
    1468:	0c 2e       	mov	r0, r28
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <shiftOut+0x4a>
    146c:	75 95       	asr	r23
    146e:	67 95       	ror	r22
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <shiftOut+0x46>
    1474:	61 70       	andi	r22, 0x01	; 1
    1476:	8e 2d       	mov	r24, r14
    1478:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    147c:	8f 2d       	mov	r24, r15
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    1484:	8f 2d       	mov	r24, r15
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
    148c:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	cf 3f       	cpi	r28, 0xFF	; 255
    1492:	d9 07       	cpc	r29, r25
    1494:	d9 f6       	brne	.-74     	; 0x144c <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	08 95       	ret

000014aa <__mulsi3>:
    14aa:	62 9f       	mul	r22, r18
    14ac:	d0 01       	movw	r26, r0
    14ae:	73 9f       	mul	r23, r19
    14b0:	f0 01       	movw	r30, r0
    14b2:	82 9f       	mul	r24, r18
    14b4:	e0 0d       	add	r30, r0
    14b6:	f1 1d       	adc	r31, r1
    14b8:	64 9f       	mul	r22, r20
    14ba:	e0 0d       	add	r30, r0
    14bc:	f1 1d       	adc	r31, r1
    14be:	92 9f       	mul	r25, r18
    14c0:	f0 0d       	add	r31, r0
    14c2:	83 9f       	mul	r24, r19
    14c4:	f0 0d       	add	r31, r0
    14c6:	74 9f       	mul	r23, r20
    14c8:	f0 0d       	add	r31, r0
    14ca:	65 9f       	mul	r22, r21
    14cc:	f0 0d       	add	r31, r0
    14ce:	99 27       	eor	r25, r25
    14d0:	72 9f       	mul	r23, r18
    14d2:	b0 0d       	add	r27, r0
    14d4:	e1 1d       	adc	r30, r1
    14d6:	f9 1f       	adc	r31, r25
    14d8:	63 9f       	mul	r22, r19
    14da:	b0 0d       	add	r27, r0
    14dc:	e1 1d       	adc	r30, r1
    14de:	f9 1f       	adc	r31, r25
    14e0:	bd 01       	movw	r22, r26
    14e2:	cf 01       	movw	r24, r30
    14e4:	11 24       	eor	r1, r1
    14e6:	08 95       	ret

000014e8 <__divmodhi4>:
    14e8:	97 fb       	bst	r25, 7
    14ea:	09 2e       	mov	r0, r25
    14ec:	07 26       	eor	r0, r23
    14ee:	0a d0       	rcall	.+20     	; 0x1504 <__divmodhi4_neg1>
    14f0:	77 fd       	sbrc	r23, 7
    14f2:	04 d0       	rcall	.+8      	; 0x14fc <__divmodhi4_neg2>
    14f4:	49 d0       	rcall	.+146    	; 0x1588 <__udivmodhi4>
    14f6:	06 d0       	rcall	.+12     	; 0x1504 <__divmodhi4_neg1>
    14f8:	00 20       	and	r0, r0
    14fa:	1a f4       	brpl	.+6      	; 0x1502 <__divmodhi4_exit>

000014fc <__divmodhi4_neg2>:
    14fc:	70 95       	com	r23
    14fe:	61 95       	neg	r22
    1500:	7f 4f       	sbci	r23, 0xFF	; 255

00001502 <__divmodhi4_exit>:
    1502:	08 95       	ret

00001504 <__divmodhi4_neg1>:
    1504:	f6 f7       	brtc	.-4      	; 0x1502 <__divmodhi4_exit>
    1506:	90 95       	com	r25
    1508:	81 95       	neg	r24
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	08 95       	ret

0000150e <__udivmodsi4>:
    150e:	a1 e2       	ldi	r26, 0x21	; 33
    1510:	1a 2e       	mov	r1, r26
    1512:	aa 1b       	sub	r26, r26
    1514:	bb 1b       	sub	r27, r27
    1516:	fd 01       	movw	r30, r26
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <__udivmodsi4_ep>

0000151a <__udivmodsi4_loop>:
    151a:	aa 1f       	adc	r26, r26
    151c:	bb 1f       	adc	r27, r27
    151e:	ee 1f       	adc	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	a2 17       	cp	r26, r18
    1524:	b3 07       	cpc	r27, r19
    1526:	e4 07       	cpc	r30, r20
    1528:	f5 07       	cpc	r31, r21
    152a:	20 f0       	brcs	.+8      	; 0x1534 <__udivmodsi4_ep>
    152c:	a2 1b       	sub	r26, r18
    152e:	b3 0b       	sbc	r27, r19
    1530:	e4 0b       	sbc	r30, r20
    1532:	f5 0b       	sbc	r31, r21

00001534 <__udivmodsi4_ep>:
    1534:	66 1f       	adc	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	1a 94       	dec	r1
    153e:	69 f7       	brne	.-38     	; 0x151a <__udivmodsi4_loop>
    1540:	60 95       	com	r22
    1542:	70 95       	com	r23
    1544:	80 95       	com	r24
    1546:	90 95       	com	r25
    1548:	9b 01       	movw	r18, r22
    154a:	ac 01       	movw	r20, r24
    154c:	bd 01       	movw	r22, r26
    154e:	cf 01       	movw	r24, r30
    1550:	08 95       	ret

00001552 <__divmodsi4>:
    1552:	97 fb       	bst	r25, 7
    1554:	09 2e       	mov	r0, r25
    1556:	05 26       	eor	r0, r21
    1558:	0e d0       	rcall	.+28     	; 0x1576 <__divmodsi4_neg1>
    155a:	57 fd       	sbrc	r21, 7
    155c:	04 d0       	rcall	.+8      	; 0x1566 <__divmodsi4_neg2>
    155e:	d7 df       	rcall	.-82     	; 0x150e <__udivmodsi4>
    1560:	0a d0       	rcall	.+20     	; 0x1576 <__divmodsi4_neg1>
    1562:	00 1c       	adc	r0, r0
    1564:	38 f4       	brcc	.+14     	; 0x1574 <__divmodsi4_exit>

00001566 <__divmodsi4_neg2>:
    1566:	50 95       	com	r21
    1568:	40 95       	com	r20
    156a:	30 95       	com	r19
    156c:	21 95       	neg	r18
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	4f 4f       	sbci	r20, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255

00001574 <__divmodsi4_exit>:
    1574:	08 95       	ret

00001576 <__divmodsi4_neg1>:
    1576:	f6 f7       	brtc	.-4      	; 0x1574 <__divmodsi4_exit>
    1578:	90 95       	com	r25
    157a:	80 95       	com	r24
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	08 95       	ret

00001588 <__udivmodhi4>:
    1588:	aa 1b       	sub	r26, r26
    158a:	bb 1b       	sub	r27, r27
    158c:	51 e1       	ldi	r21, 0x11	; 17
    158e:	07 c0       	rjmp	.+14     	; 0x159e <__udivmodhi4_ep>

00001590 <__udivmodhi4_loop>:
    1590:	aa 1f       	adc	r26, r26
    1592:	bb 1f       	adc	r27, r27
    1594:	a6 17       	cp	r26, r22
    1596:	b7 07       	cpc	r27, r23
    1598:	10 f0       	brcs	.+4      	; 0x159e <__udivmodhi4_ep>
    159a:	a6 1b       	sub	r26, r22
    159c:	b7 0b       	sbc	r27, r23

0000159e <__udivmodhi4_ep>:
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	5a 95       	dec	r21
    15a4:	a9 f7       	brne	.-22     	; 0x1590 <__udivmodhi4_loop>
    15a6:	80 95       	com	r24
    15a8:	90 95       	com	r25
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	08 95       	ret

000015b0 <__tablejump2__>:
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31

000015b4 <__tablejump__>:
    15b4:	05 90       	lpm	r0, Z+
    15b6:	f4 91       	lpm	r31, Z+
    15b8:	e0 2d       	mov	r30, r0
    15ba:	09 94       	ijmp

000015bc <snprintf>:
    15bc:	ae e0       	ldi	r26, 0x0E	; 14
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 ee       	ldi	r30, 0xE4	; 228
    15c2:	fa e0       	ldi	r31, 0x0A	; 10
    15c4:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__prologue_saves__+0x1c>
    15c8:	0d 89       	ldd	r16, Y+21	; 0x15
    15ca:	1e 89       	ldd	r17, Y+22	; 0x16
    15cc:	8f 89       	ldd	r24, Y+23	; 0x17
    15ce:	98 8d       	ldd	r25, Y+24	; 0x18
    15d0:	97 ff       	sbrs	r25, 7
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <snprintf+0x1c>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e8       	ldi	r25, 0x80	; 128
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	1a 83       	std	Y+2, r17	; 0x02
    15e0:	09 83       	std	Y+1, r16	; 0x01
    15e2:	86 e0       	ldi	r24, 0x06	; 6
    15e4:	8c 83       	std	Y+4, r24	; 0x04
    15e6:	9e 01       	movw	r18, r28
    15e8:	25 5e       	subi	r18, 0xE5	; 229
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	ce 01       	movw	r24, r28
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	69 8d       	ldd	r22, Y+25	; 0x19
    15f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f4:	a9 01       	movw	r20, r18
    15f6:	0e 94 33 0b 	call	0x1666	; 0x1666 <vfprintf>
    15fa:	4d 81       	ldd	r20, Y+5	; 0x05
    15fc:	5e 81       	ldd	r21, Y+6	; 0x06
    15fe:	57 fd       	sbrc	r21, 7
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <snprintf+0x5a>
    1602:	2f 81       	ldd	r18, Y+7	; 0x07
    1604:	38 85       	ldd	r19, Y+8	; 0x08
    1606:	42 17       	cp	r20, r18
    1608:	53 07       	cpc	r21, r19
    160a:	0c f4       	brge	.+2      	; 0x160e <snprintf+0x52>
    160c:	9a 01       	movw	r18, r20
    160e:	02 0f       	add	r16, r18
    1610:	13 1f       	adc	r17, r19
    1612:	f8 01       	movw	r30, r16
    1614:	10 82       	st	Z, r1
    1616:	2e 96       	adiw	r28, 0x0e	; 14
    1618:	e4 e0       	ldi	r30, 0x04	; 4
    161a:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__epilogue_restores__+0x1c>

0000161e <sprintf>:
    161e:	ae e0       	ldi	r26, 0x0E	; 14
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e1       	ldi	r30, 0x15	; 21
    1624:	fb e0       	ldi	r31, 0x0B	; 11
    1626:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__prologue_saves__+0x1c>
    162a:	0d 89       	ldd	r16, Y+21	; 0x15
    162c:	1e 89       	ldd	r17, Y+22	; 0x16
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	8c 83       	std	Y+4, r24	; 0x04
    1632:	1a 83       	std	Y+2, r17	; 0x02
    1634:	09 83       	std	Y+1, r16	; 0x01
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	9f e7       	ldi	r25, 0x7F	; 127
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	9e 01       	movw	r18, r28
    1640:	27 5e       	subi	r18, 0xE7	; 231
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	6f 89       	ldd	r22, Y+23	; 0x17
    164a:	78 8d       	ldd	r23, Y+24	; 0x18
    164c:	a9 01       	movw	r20, r18
    164e:	0e 94 33 0b 	call	0x1666	; 0x1666 <vfprintf>
    1652:	2f 81       	ldd	r18, Y+7	; 0x07
    1654:	38 85       	ldd	r19, Y+8	; 0x08
    1656:	02 0f       	add	r16, r18
    1658:	13 1f       	adc	r17, r19
    165a:	f8 01       	movw	r30, r16
    165c:	10 82       	st	Z, r1
    165e:	2e 96       	adiw	r28, 0x0e	; 14
    1660:	e4 e0       	ldi	r30, 0x04	; 4
    1662:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__epilogue_restores__+0x1c>

00001666 <vfprintf>:
    1666:	ab e0       	ldi	r26, 0x0B	; 11
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__prologue_saves__>
    1672:	3c 01       	movw	r6, r24
    1674:	2b 01       	movw	r4, r22
    1676:	5a 01       	movw	r10, r20
    1678:	fc 01       	movw	r30, r24
    167a:	17 82       	std	Z+7, r1	; 0x07
    167c:	16 82       	std	Z+6, r1	; 0x06
    167e:	83 81       	ldd	r24, Z+3	; 0x03
    1680:	81 fd       	sbrc	r24, 1
    1682:	03 c0       	rjmp	.+6      	; 0x168a <vfprintf+0x24>
    1684:	6f ef       	ldi	r22, 0xFF	; 255
    1686:	7f ef       	ldi	r23, 0xFF	; 255
    1688:	c6 c1       	rjmp	.+908    	; 0x1a16 <vfprintf+0x3b0>
    168a:	9a e0       	ldi	r25, 0x0A	; 10
    168c:	89 2e       	mov	r8, r25
    168e:	1e 01       	movw	r2, r28
    1690:	08 94       	sec
    1692:	21 1c       	adc	r2, r1
    1694:	31 1c       	adc	r3, r1
    1696:	f3 01       	movw	r30, r6
    1698:	23 81       	ldd	r18, Z+3	; 0x03
    169a:	f2 01       	movw	r30, r4
    169c:	23 fd       	sbrc	r18, 3
    169e:	85 91       	lpm	r24, Z+
    16a0:	23 ff       	sbrs	r18, 3
    16a2:	81 91       	ld	r24, Z+
    16a4:	2f 01       	movw	r4, r30
    16a6:	88 23       	and	r24, r24
    16a8:	09 f4       	brne	.+2      	; 0x16ac <vfprintf+0x46>
    16aa:	b2 c1       	rjmp	.+868    	; 0x1a10 <vfprintf+0x3aa>
    16ac:	85 32       	cpi	r24, 0x25	; 37
    16ae:	39 f4       	brne	.+14     	; 0x16be <vfprintf+0x58>
    16b0:	23 fd       	sbrc	r18, 3
    16b2:	85 91       	lpm	r24, Z+
    16b4:	23 ff       	sbrs	r18, 3
    16b6:	81 91       	ld	r24, Z+
    16b8:	2f 01       	movw	r4, r30
    16ba:	85 32       	cpi	r24, 0x25	; 37
    16bc:	29 f4       	brne	.+10     	; 0x16c8 <vfprintf+0x62>
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	b3 01       	movw	r22, r6
    16c2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    16c6:	e7 cf       	rjmp	.-50     	; 0x1696 <vfprintf+0x30>
    16c8:	98 2f       	mov	r25, r24
    16ca:	ff 24       	eor	r15, r15
    16cc:	ee 24       	eor	r14, r14
    16ce:	99 24       	eor	r9, r9
    16d0:	ff e1       	ldi	r31, 0x1F	; 31
    16d2:	ff 15       	cp	r31, r15
    16d4:	d0 f0       	brcs	.+52     	; 0x170a <vfprintf+0xa4>
    16d6:	9b 32       	cpi	r25, 0x2B	; 43
    16d8:	69 f0       	breq	.+26     	; 0x16f4 <vfprintf+0x8e>
    16da:	9c 32       	cpi	r25, 0x2C	; 44
    16dc:	28 f4       	brcc	.+10     	; 0x16e8 <vfprintf+0x82>
    16de:	90 32       	cpi	r25, 0x20	; 32
    16e0:	59 f0       	breq	.+22     	; 0x16f8 <vfprintf+0x92>
    16e2:	93 32       	cpi	r25, 0x23	; 35
    16e4:	91 f4       	brne	.+36     	; 0x170a <vfprintf+0xa4>
    16e6:	0e c0       	rjmp	.+28     	; 0x1704 <vfprintf+0x9e>
    16e8:	9d 32       	cpi	r25, 0x2D	; 45
    16ea:	49 f0       	breq	.+18     	; 0x16fe <vfprintf+0x98>
    16ec:	90 33       	cpi	r25, 0x30	; 48
    16ee:	69 f4       	brne	.+26     	; 0x170a <vfprintf+0xa4>
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	24 c0       	rjmp	.+72     	; 0x173c <vfprintf+0xd6>
    16f4:	52 e0       	ldi	r21, 0x02	; 2
    16f6:	f5 2a       	or	r15, r21
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	f8 2a       	or	r15, r24
    16fc:	28 c0       	rjmp	.+80     	; 0x174e <vfprintf+0xe8>
    16fe:	98 e0       	ldi	r25, 0x08	; 8
    1700:	f9 2a       	or	r15, r25
    1702:	25 c0       	rjmp	.+74     	; 0x174e <vfprintf+0xe8>
    1704:	e0 e1       	ldi	r30, 0x10	; 16
    1706:	fe 2a       	or	r15, r30
    1708:	22 c0       	rjmp	.+68     	; 0x174e <vfprintf+0xe8>
    170a:	f7 fc       	sbrc	r15, 7
    170c:	29 c0       	rjmp	.+82     	; 0x1760 <vfprintf+0xfa>
    170e:	89 2f       	mov	r24, r25
    1710:	80 53       	subi	r24, 0x30	; 48
    1712:	8a 30       	cpi	r24, 0x0A	; 10
    1714:	70 f4       	brcc	.+28     	; 0x1732 <vfprintf+0xcc>
    1716:	f6 fe       	sbrs	r15, 6
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <vfprintf+0xbe>
    171a:	98 9c       	mul	r9, r8
    171c:	90 2c       	mov	r9, r0
    171e:	11 24       	eor	r1, r1
    1720:	98 0e       	add	r9, r24
    1722:	15 c0       	rjmp	.+42     	; 0x174e <vfprintf+0xe8>
    1724:	e8 9c       	mul	r14, r8
    1726:	e0 2c       	mov	r14, r0
    1728:	11 24       	eor	r1, r1
    172a:	e8 0e       	add	r14, r24
    172c:	f0 e2       	ldi	r31, 0x20	; 32
    172e:	ff 2a       	or	r15, r31
    1730:	0e c0       	rjmp	.+28     	; 0x174e <vfprintf+0xe8>
    1732:	9e 32       	cpi	r25, 0x2E	; 46
    1734:	29 f4       	brne	.+10     	; 0x1740 <vfprintf+0xda>
    1736:	f6 fc       	sbrc	r15, 6
    1738:	6b c1       	rjmp	.+726    	; 0x1a10 <vfprintf+0x3aa>
    173a:	40 e4       	ldi	r20, 0x40	; 64
    173c:	f4 2a       	or	r15, r20
    173e:	07 c0       	rjmp	.+14     	; 0x174e <vfprintf+0xe8>
    1740:	9c 36       	cpi	r25, 0x6C	; 108
    1742:	19 f4       	brne	.+6      	; 0x174a <vfprintf+0xe4>
    1744:	50 e8       	ldi	r21, 0x80	; 128
    1746:	f5 2a       	or	r15, r21
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0xe8>
    174a:	98 36       	cpi	r25, 0x68	; 104
    174c:	49 f4       	brne	.+18     	; 0x1760 <vfprintf+0xfa>
    174e:	f2 01       	movw	r30, r4
    1750:	23 fd       	sbrc	r18, 3
    1752:	95 91       	lpm	r25, Z+
    1754:	23 ff       	sbrs	r18, 3
    1756:	91 91       	ld	r25, Z+
    1758:	2f 01       	movw	r4, r30
    175a:	99 23       	and	r25, r25
    175c:	09 f0       	breq	.+2      	; 0x1760 <vfprintf+0xfa>
    175e:	b8 cf       	rjmp	.-144    	; 0x16d0 <vfprintf+0x6a>
    1760:	89 2f       	mov	r24, r25
    1762:	85 54       	subi	r24, 0x45	; 69
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	18 f0       	brcs	.+6      	; 0x176e <vfprintf+0x108>
    1768:	80 52       	subi	r24, 0x20	; 32
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	38 f4       	brcc	.+14     	; 0x177c <vfprintf+0x116>
    176e:	44 e0       	ldi	r20, 0x04	; 4
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	a4 0e       	add	r10, r20
    1774:	b5 1e       	adc	r11, r21
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	59 83       	std	Y+1, r21	; 0x01
    177a:	0f c0       	rjmp	.+30     	; 0x179a <vfprintf+0x134>
    177c:	93 36       	cpi	r25, 0x63	; 99
    177e:	31 f0       	breq	.+12     	; 0x178c <vfprintf+0x126>
    1780:	93 37       	cpi	r25, 0x73	; 115
    1782:	79 f0       	breq	.+30     	; 0x17a2 <vfprintf+0x13c>
    1784:	93 35       	cpi	r25, 0x53	; 83
    1786:	09 f0       	breq	.+2      	; 0x178a <vfprintf+0x124>
    1788:	56 c0       	rjmp	.+172    	; 0x1836 <vfprintf+0x1d0>
    178a:	20 c0       	rjmp	.+64     	; 0x17cc <vfprintf+0x166>
    178c:	f5 01       	movw	r30, r10
    178e:	80 81       	ld	r24, Z
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	42 e0       	ldi	r20, 0x02	; 2
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	a4 0e       	add	r10, r20
    1798:	b5 1e       	adc	r11, r21
    179a:	61 01       	movw	r12, r2
    179c:	01 e0       	ldi	r16, 0x01	; 1
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	12 c0       	rjmp	.+36     	; 0x17c6 <vfprintf+0x160>
    17a2:	f5 01       	movw	r30, r10
    17a4:	c0 80       	ld	r12, Z
    17a6:	d1 80       	ldd	r13, Z+1	; 0x01
    17a8:	f6 fc       	sbrc	r15, 6
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <vfprintf+0x14c>
    17ac:	6f ef       	ldi	r22, 0xFF	; 255
    17ae:	7f ef       	ldi	r23, 0xFF	; 255
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x150>
    17b2:	69 2d       	mov	r22, r9
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	42 e0       	ldi	r20, 0x02	; 2
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	a4 0e       	add	r10, r20
    17bc:	b5 1e       	adc	r11, r21
    17be:	c6 01       	movw	r24, r12
    17c0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <strnlen>
    17c4:	8c 01       	movw	r16, r24
    17c6:	5f e7       	ldi	r21, 0x7F	; 127
    17c8:	f5 22       	and	r15, r21
    17ca:	14 c0       	rjmp	.+40     	; 0x17f4 <vfprintf+0x18e>
    17cc:	f5 01       	movw	r30, r10
    17ce:	c0 80       	ld	r12, Z
    17d0:	d1 80       	ldd	r13, Z+1	; 0x01
    17d2:	f6 fc       	sbrc	r15, 6
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <vfprintf+0x176>
    17d6:	6f ef       	ldi	r22, 0xFF	; 255
    17d8:	7f ef       	ldi	r23, 0xFF	; 255
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x17a>
    17dc:	69 2d       	mov	r22, r9
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	42 e0       	ldi	r20, 0x02	; 2
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	a4 0e       	add	r10, r20
    17e6:	b5 1e       	adc	r11, r21
    17e8:	c6 01       	movw	r24, r12
    17ea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <strnlen_P>
    17ee:	8c 01       	movw	r16, r24
    17f0:	50 e8       	ldi	r21, 0x80	; 128
    17f2:	f5 2a       	or	r15, r21
    17f4:	f3 fe       	sbrs	r15, 3
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <vfprintf+0x1a0>
    17f8:	1a c0       	rjmp	.+52     	; 0x182e <vfprintf+0x1c8>
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	b3 01       	movw	r22, r6
    1800:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    1804:	ea 94       	dec	r14
    1806:	8e 2d       	mov	r24, r14
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	08 17       	cp	r16, r24
    180c:	19 07       	cpc	r17, r25
    180e:	a8 f3       	brcs	.-22     	; 0x17fa <vfprintf+0x194>
    1810:	0e c0       	rjmp	.+28     	; 0x182e <vfprintf+0x1c8>
    1812:	f6 01       	movw	r30, r12
    1814:	f7 fc       	sbrc	r15, 7
    1816:	85 91       	lpm	r24, Z+
    1818:	f7 fe       	sbrs	r15, 7
    181a:	81 91       	ld	r24, Z+
    181c:	6f 01       	movw	r12, r30
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b3 01       	movw	r22, r6
    1822:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    1826:	e1 10       	cpse	r14, r1
    1828:	ea 94       	dec	r14
    182a:	01 50       	subi	r16, 0x01	; 1
    182c:	10 40       	sbci	r17, 0x00	; 0
    182e:	01 15       	cp	r16, r1
    1830:	11 05       	cpc	r17, r1
    1832:	79 f7       	brne	.-34     	; 0x1812 <vfprintf+0x1ac>
    1834:	ea c0       	rjmp	.+468    	; 0x1a0a <vfprintf+0x3a4>
    1836:	94 36       	cpi	r25, 0x64	; 100
    1838:	11 f0       	breq	.+4      	; 0x183e <vfprintf+0x1d8>
    183a:	99 36       	cpi	r25, 0x69	; 105
    183c:	69 f5       	brne	.+90     	; 0x1898 <vfprintf+0x232>
    183e:	f7 fe       	sbrs	r15, 7
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x1ec>
    1842:	f5 01       	movw	r30, r10
    1844:	20 81       	ld	r18, Z
    1846:	31 81       	ldd	r19, Z+1	; 0x01
    1848:	42 81       	ldd	r20, Z+2	; 0x02
    184a:	53 81       	ldd	r21, Z+3	; 0x03
    184c:	84 e0       	ldi	r24, 0x04	; 4
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0a c0       	rjmp	.+20     	; 0x1866 <vfprintf+0x200>
    1852:	f5 01       	movw	r30, r10
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	9c 01       	movw	r18, r24
    185a:	44 27       	eor	r20, r20
    185c:	37 fd       	sbrc	r19, 7
    185e:	40 95       	com	r20
    1860:	54 2f       	mov	r21, r20
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a8 0e       	add	r10, r24
    1868:	b9 1e       	adc	r11, r25
    186a:	9f e6       	ldi	r25, 0x6F	; 111
    186c:	f9 22       	and	r15, r25
    186e:	57 ff       	sbrs	r21, 7
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <vfprintf+0x21e>
    1872:	50 95       	com	r21
    1874:	40 95       	com	r20
    1876:	30 95       	com	r19
    1878:	21 95       	neg	r18
    187a:	3f 4f       	sbci	r19, 0xFF	; 255
    187c:	4f 4f       	sbci	r20, 0xFF	; 255
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	e0 e8       	ldi	r30, 0x80	; 128
    1882:	fe 2a       	or	r15, r30
    1884:	ca 01       	movw	r24, r20
    1886:	b9 01       	movw	r22, r18
    1888:	a1 01       	movw	r20, r2
    188a:	2a e0       	ldi	r18, 0x0A	; 10
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__ultoa_invert>
    1892:	d8 2e       	mov	r13, r24
    1894:	d2 18       	sub	r13, r2
    1896:	40 c0       	rjmp	.+128    	; 0x1918 <vfprintf+0x2b2>
    1898:	95 37       	cpi	r25, 0x75	; 117
    189a:	29 f4       	brne	.+10     	; 0x18a6 <vfprintf+0x240>
    189c:	1f 2d       	mov	r17, r15
    189e:	1f 7e       	andi	r17, 0xEF	; 239
    18a0:	2a e0       	ldi	r18, 0x0A	; 10
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	1d c0       	rjmp	.+58     	; 0x18e0 <vfprintf+0x27a>
    18a6:	1f 2d       	mov	r17, r15
    18a8:	19 7f       	andi	r17, 0xF9	; 249
    18aa:	9f 36       	cpi	r25, 0x6F	; 111
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <vfprintf+0x260>
    18ae:	90 37       	cpi	r25, 0x70	; 112
    18b0:	20 f4       	brcc	.+8      	; 0x18ba <vfprintf+0x254>
    18b2:	98 35       	cpi	r25, 0x58	; 88
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <vfprintf+0x252>
    18b6:	ac c0       	rjmp	.+344    	; 0x1a10 <vfprintf+0x3aa>
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <vfprintf+0x272>
    18ba:	90 37       	cpi	r25, 0x70	; 112
    18bc:	39 f0       	breq	.+14     	; 0x18cc <vfprintf+0x266>
    18be:	98 37       	cpi	r25, 0x78	; 120
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <vfprintf+0x25e>
    18c2:	a6 c0       	rjmp	.+332    	; 0x1a10 <vfprintf+0x3aa>
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <vfprintf+0x268>
    18c6:	28 e0       	ldi	r18, 0x08	; 8
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	0a c0       	rjmp	.+20     	; 0x18e0 <vfprintf+0x27a>
    18cc:	10 61       	ori	r17, 0x10	; 16
    18ce:	14 fd       	sbrc	r17, 4
    18d0:	14 60       	ori	r17, 0x04	; 4
    18d2:	20 e1       	ldi	r18, 0x10	; 16
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <vfprintf+0x27a>
    18d8:	14 fd       	sbrc	r17, 4
    18da:	16 60       	ori	r17, 0x06	; 6
    18dc:	20 e1       	ldi	r18, 0x10	; 16
    18de:	32 e0       	ldi	r19, 0x02	; 2
    18e0:	17 ff       	sbrs	r17, 7
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <vfprintf+0x28e>
    18e4:	f5 01       	movw	r30, r10
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	44 e0       	ldi	r20, 0x04	; 4
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	08 c0       	rjmp	.+16     	; 0x1904 <vfprintf+0x29e>
    18f4:	f5 01       	movw	r30, r10
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	bc 01       	movw	r22, r24
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	42 e0       	ldi	r20, 0x02	; 2
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	a4 0e       	add	r10, r20
    1906:	b5 1e       	adc	r11, r21
    1908:	a1 01       	movw	r20, r2
    190a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__ultoa_invert>
    190e:	d8 2e       	mov	r13, r24
    1910:	d2 18       	sub	r13, r2
    1912:	8f e7       	ldi	r24, 0x7F	; 127
    1914:	f8 2e       	mov	r15, r24
    1916:	f1 22       	and	r15, r17
    1918:	f6 fe       	sbrs	r15, 6
    191a:	0b c0       	rjmp	.+22     	; 0x1932 <vfprintf+0x2cc>
    191c:	5e ef       	ldi	r21, 0xFE	; 254
    191e:	f5 22       	and	r15, r21
    1920:	d9 14       	cp	r13, r9
    1922:	38 f4       	brcc	.+14     	; 0x1932 <vfprintf+0x2cc>
    1924:	f4 fe       	sbrs	r15, 4
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <vfprintf+0x2d0>
    1928:	f2 fc       	sbrc	r15, 2
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <vfprintf+0x2d0>
    192c:	8f ee       	ldi	r24, 0xEF	; 239
    192e:	f8 22       	and	r15, r24
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfprintf+0x2d0>
    1932:	1d 2d       	mov	r17, r13
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <vfprintf+0x2d2>
    1936:	19 2d       	mov	r17, r9
    1938:	f4 fe       	sbrs	r15, 4
    193a:	0d c0       	rjmp	.+26     	; 0x1956 <vfprintf+0x2f0>
    193c:	fe 01       	movw	r30, r28
    193e:	ed 0d       	add	r30, r13
    1940:	f1 1d       	adc	r31, r1
    1942:	80 81       	ld	r24, Z
    1944:	80 33       	cpi	r24, 0x30	; 48
    1946:	19 f4       	brne	.+6      	; 0x194e <vfprintf+0x2e8>
    1948:	99 ee       	ldi	r25, 0xE9	; 233
    194a:	f9 22       	and	r15, r25
    194c:	08 c0       	rjmp	.+16     	; 0x195e <vfprintf+0x2f8>
    194e:	1f 5f       	subi	r17, 0xFF	; 255
    1950:	f2 fe       	sbrs	r15, 2
    1952:	05 c0       	rjmp	.+10     	; 0x195e <vfprintf+0x2f8>
    1954:	03 c0       	rjmp	.+6      	; 0x195c <vfprintf+0x2f6>
    1956:	8f 2d       	mov	r24, r15
    1958:	86 78       	andi	r24, 0x86	; 134
    195a:	09 f0       	breq	.+2      	; 0x195e <vfprintf+0x2f8>
    195c:	1f 5f       	subi	r17, 0xFF	; 255
    195e:	0f 2d       	mov	r16, r15
    1960:	f3 fc       	sbrc	r15, 3
    1962:	14 c0       	rjmp	.+40     	; 0x198c <vfprintf+0x326>
    1964:	f0 fe       	sbrs	r15, 0
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <vfprintf+0x320>
    1968:	1e 15       	cp	r17, r14
    196a:	10 f0       	brcs	.+4      	; 0x1970 <vfprintf+0x30a>
    196c:	9d 2c       	mov	r9, r13
    196e:	0b c0       	rjmp	.+22     	; 0x1986 <vfprintf+0x320>
    1970:	9d 2c       	mov	r9, r13
    1972:	9e 0c       	add	r9, r14
    1974:	91 1a       	sub	r9, r17
    1976:	1e 2d       	mov	r17, r14
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <vfprintf+0x320>
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	b3 01       	movw	r22, r6
    1980:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    1984:	1f 5f       	subi	r17, 0xFF	; 255
    1986:	1e 15       	cp	r17, r14
    1988:	c0 f3       	brcs	.-16     	; 0x197a <vfprintf+0x314>
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <vfprintf+0x32e>
    198c:	1e 15       	cp	r17, r14
    198e:	10 f4       	brcc	.+4      	; 0x1994 <vfprintf+0x32e>
    1990:	e1 1a       	sub	r14, r17
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <vfprintf+0x330>
    1994:	ee 24       	eor	r14, r14
    1996:	04 ff       	sbrs	r16, 4
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <vfprintf+0x352>
    199a:	80 e3       	ldi	r24, 0x30	; 48
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	b3 01       	movw	r22, r6
    19a0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    19a4:	02 ff       	sbrs	r16, 2
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <vfprintf+0x37c>
    19a8:	01 fd       	sbrc	r16, 1
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <vfprintf+0x34c>
    19ac:	88 e7       	ldi	r24, 0x78	; 120
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e c0       	rjmp	.+28     	; 0x19ce <vfprintf+0x368>
    19b2:	88 e5       	ldi	r24, 0x58	; 88
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0b c0       	rjmp	.+22     	; 0x19ce <vfprintf+0x368>
    19b8:	80 2f       	mov	r24, r16
    19ba:	86 78       	andi	r24, 0x86	; 134
    19bc:	91 f0       	breq	.+36     	; 0x19e2 <vfprintf+0x37c>
    19be:	01 ff       	sbrs	r16, 1
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0x360>
    19c2:	8b e2       	ldi	r24, 0x2B	; 43
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <vfprintf+0x362>
    19c6:	80 e2       	ldi	r24, 0x20	; 32
    19c8:	f7 fc       	sbrc	r15, 7
    19ca:	8d e2       	ldi	r24, 0x2D	; 45
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b3 01       	movw	r22, r6
    19d0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <vfprintf+0x37c>
    19d6:	80 e3       	ldi	r24, 0x30	; 48
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	b3 01       	movw	r22, r6
    19dc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    19e0:	9a 94       	dec	r9
    19e2:	d9 14       	cp	r13, r9
    19e4:	c0 f3       	brcs	.-16     	; 0x19d6 <vfprintf+0x370>
    19e6:	da 94       	dec	r13
    19e8:	f1 01       	movw	r30, r2
    19ea:	ed 0d       	add	r30, r13
    19ec:	f1 1d       	adc	r31, r1
    19ee:	80 81       	ld	r24, Z
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	b3 01       	movw	r22, r6
    19f4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    19f8:	dd 20       	and	r13, r13
    19fa:	a9 f7       	brne	.-22     	; 0x19e6 <vfprintf+0x380>
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0x3a4>
    19fe:	80 e2       	ldi	r24, 0x20	; 32
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	b3 01       	movw	r22, r6
    1a04:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <fputc>
    1a08:	ea 94       	dec	r14
    1a0a:	ee 20       	and	r14, r14
    1a0c:	c1 f7       	brne	.-16     	; 0x19fe <vfprintf+0x398>
    1a0e:	43 ce       	rjmp	.-890    	; 0x1696 <vfprintf+0x30>
    1a10:	f3 01       	movw	r30, r6
    1a12:	66 81       	ldd	r22, Z+6	; 0x06
    1a14:	77 81       	ldd	r23, Z+7	; 0x07
    1a16:	cb 01       	movw	r24, r22
    1a18:	2b 96       	adiw	r28, 0x0b	; 11
    1a1a:	e2 e1       	ldi	r30, 0x12	; 18
    1a1c:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__epilogue_restores__>

00001a20 <strnlen_P>:
    1a20:	fc 01       	movw	r30, r24
    1a22:	05 90       	lpm	r0, Z+
    1a24:	61 50       	subi	r22, 0x01	; 1
    1a26:	70 40       	sbci	r23, 0x00	; 0
    1a28:	01 10       	cpse	r0, r1
    1a2a:	d8 f7       	brcc	.-10     	; 0x1a22 <strnlen_P+0x2>
    1a2c:	80 95       	com	r24
    1a2e:	90 95       	com	r25
    1a30:	8e 0f       	add	r24, r30
    1a32:	9f 1f       	adc	r25, r31
    1a34:	08 95       	ret

00001a36 <strnlen>:
    1a36:	fc 01       	movw	r30, r24
    1a38:	61 50       	subi	r22, 0x01	; 1
    1a3a:	70 40       	sbci	r23, 0x00	; 0
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	01 10       	cpse	r0, r1
    1a40:	d8 f7       	brcc	.-10     	; 0x1a38 <strnlen+0x2>
    1a42:	80 95       	com	r24
    1a44:	90 95       	com	r25
    1a46:	8e 0f       	add	r24, r30
    1a48:	9f 1f       	adc	r25, r31
    1a4a:	08 95       	ret

00001a4c <fputc>:
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	8c 01       	movw	r16, r24
    1a56:	eb 01       	movw	r28, r22
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	81 ff       	sbrs	r24, 1
    1a5c:	1b c0       	rjmp	.+54     	; 0x1a94 <fputc+0x48>
    1a5e:	82 ff       	sbrs	r24, 2
    1a60:	0d c0       	rjmp	.+26     	; 0x1a7c <fputc+0x30>
    1a62:	2e 81       	ldd	r18, Y+6	; 0x06
    1a64:	3f 81       	ldd	r19, Y+7	; 0x07
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	28 17       	cp	r18, r24
    1a6c:	39 07       	cpc	r19, r25
    1a6e:	64 f4       	brge	.+24     	; 0x1a88 <fputc+0x3c>
    1a70:	e8 81       	ld	r30, Y
    1a72:	f9 81       	ldd	r31, Y+1	; 0x01
    1a74:	01 93       	st	Z+, r16
    1a76:	f9 83       	std	Y+1, r31	; 0x01
    1a78:	e8 83       	st	Y, r30
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <fputc+0x3c>
    1a7c:	e8 85       	ldd	r30, Y+8	; 0x08
    1a7e:	f9 85       	ldd	r31, Y+9	; 0x09
    1a80:	80 2f       	mov	r24, r16
    1a82:	09 95       	icall
    1a84:	89 2b       	or	r24, r25
    1a86:	31 f4       	brne	.+12     	; 0x1a94 <fputc+0x48>
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	9f 83       	std	Y+7, r25	; 0x07
    1a90:	8e 83       	std	Y+6, r24	; 0x06
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <fputc+0x4c>
    1a94:	0f ef       	ldi	r16, 0xFF	; 255
    1a96:	1f ef       	ldi	r17, 0xFF	; 255
    1a98:	c8 01       	movw	r24, r16
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <__ultoa_invert>:
    1aa4:	fa 01       	movw	r30, r20
    1aa6:	aa 27       	eor	r26, r26
    1aa8:	28 30       	cpi	r18, 0x08	; 8
    1aaa:	51 f1       	breq	.+84     	; 0x1b00 <__ultoa_invert+0x5c>
    1aac:	20 31       	cpi	r18, 0x10	; 16
    1aae:	81 f1       	breq	.+96     	; 0x1b10 <__ultoa_invert+0x6c>
    1ab0:	e8 94       	clt
    1ab2:	6f 93       	push	r22
    1ab4:	6e 7f       	andi	r22, 0xFE	; 254
    1ab6:	6e 5f       	subi	r22, 0xFE	; 254
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	8f 4f       	sbci	r24, 0xFF	; 255
    1abc:	9f 4f       	sbci	r25, 0xFF	; 255
    1abe:	af 4f       	sbci	r26, 0xFF	; 255
    1ac0:	b1 e0       	ldi	r27, 0x01	; 1
    1ac2:	3e d0       	rcall	.+124    	; 0x1b40 <__ultoa_invert+0x9c>
    1ac4:	b4 e0       	ldi	r27, 0x04	; 4
    1ac6:	3c d0       	rcall	.+120    	; 0x1b40 <__ultoa_invert+0x9c>
    1ac8:	67 0f       	add	r22, r23
    1aca:	78 1f       	adc	r23, r24
    1acc:	89 1f       	adc	r24, r25
    1ace:	9a 1f       	adc	r25, r26
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	68 0f       	add	r22, r24
    1ad4:	79 1f       	adc	r23, r25
    1ad6:	8a 1f       	adc	r24, r26
    1ad8:	91 1d       	adc	r25, r1
    1ada:	a1 1d       	adc	r26, r1
    1adc:	6a 0f       	add	r22, r26
    1ade:	71 1d       	adc	r23, r1
    1ae0:	81 1d       	adc	r24, r1
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	20 d0       	rcall	.+64     	; 0x1b28 <__ultoa_invert+0x84>
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <__ultoa_invert+0x48>
    1aea:	68 94       	set
    1aec:	3f 91       	pop	r19
    1aee:	2a e0       	ldi	r18, 0x0A	; 10
    1af0:	26 9f       	mul	r18, r22
    1af2:	11 24       	eor	r1, r1
    1af4:	30 19       	sub	r19, r0
    1af6:	30 5d       	subi	r19, 0xD0	; 208
    1af8:	31 93       	st	Z+, r19
    1afa:	de f6       	brtc	.-74     	; 0x1ab2 <__ultoa_invert+0xe>
    1afc:	cf 01       	movw	r24, r30
    1afe:	08 95       	ret
    1b00:	46 2f       	mov	r20, r22
    1b02:	47 70       	andi	r20, 0x07	; 7
    1b04:	40 5d       	subi	r20, 0xD0	; 208
    1b06:	41 93       	st	Z+, r20
    1b08:	b3 e0       	ldi	r27, 0x03	; 3
    1b0a:	0f d0       	rcall	.+30     	; 0x1b2a <__ultoa_invert+0x86>
    1b0c:	c9 f7       	brne	.-14     	; 0x1b00 <__ultoa_invert+0x5c>
    1b0e:	f6 cf       	rjmp	.-20     	; 0x1afc <__ultoa_invert+0x58>
    1b10:	46 2f       	mov	r20, r22
    1b12:	4f 70       	andi	r20, 0x0F	; 15
    1b14:	40 5d       	subi	r20, 0xD0	; 208
    1b16:	4a 33       	cpi	r20, 0x3A	; 58
    1b18:	18 f0       	brcs	.+6      	; 0x1b20 <__ultoa_invert+0x7c>
    1b1a:	49 5d       	subi	r20, 0xD9	; 217
    1b1c:	31 fd       	sbrc	r19, 1
    1b1e:	40 52       	subi	r20, 0x20	; 32
    1b20:	41 93       	st	Z+, r20
    1b22:	02 d0       	rcall	.+4      	; 0x1b28 <__ultoa_invert+0x84>
    1b24:	a9 f7       	brne	.-22     	; 0x1b10 <__ultoa_invert+0x6c>
    1b26:	ea cf       	rjmp	.-44     	; 0x1afc <__ultoa_invert+0x58>
    1b28:	b4 e0       	ldi	r27, 0x04	; 4
    1b2a:	a6 95       	lsr	r26
    1b2c:	97 95       	ror	r25
    1b2e:	87 95       	ror	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	ba 95       	dec	r27
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <__ultoa_invert+0x86>
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	61 05       	cpc	r22, r1
    1b3c:	71 05       	cpc	r23, r1
    1b3e:	08 95       	ret
    1b40:	9b 01       	movw	r18, r22
    1b42:	ac 01       	movw	r20, r24
    1b44:	0a 2e       	mov	r0, r26
    1b46:	06 94       	lsr	r0
    1b48:	57 95       	ror	r21
    1b4a:	47 95       	ror	r20
    1b4c:	37 95       	ror	r19
    1b4e:	27 95       	ror	r18
    1b50:	ba 95       	dec	r27
    1b52:	c9 f7       	brne	.-14     	; 0x1b46 <__ultoa_invert+0xa2>
    1b54:	62 0f       	add	r22, r18
    1b56:	73 1f       	adc	r23, r19
    1b58:	84 1f       	adc	r24, r20
    1b5a:	95 1f       	adc	r25, r21
    1b5c:	a0 1d       	adc	r26, r0
    1b5e:	08 95       	ret

00001b60 <__prologue_saves__>:
    1b60:	2f 92       	push	r2
    1b62:	3f 92       	push	r3
    1b64:	4f 92       	push	r4
    1b66:	5f 92       	push	r5
    1b68:	6f 92       	push	r6
    1b6a:	7f 92       	push	r7
    1b6c:	8f 92       	push	r8
    1b6e:	9f 92       	push	r9
    1b70:	af 92       	push	r10
    1b72:	bf 92       	push	r11
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	ca 1b       	sub	r28, r26
    1b8a:	db 0b       	sbc	r29, r27
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	09 94       	ijmp

00001b98 <__epilogue_restores__>:
    1b98:	2a 88       	ldd	r2, Y+18	; 0x12
    1b9a:	39 88       	ldd	r3, Y+17	; 0x11
    1b9c:	48 88       	ldd	r4, Y+16	; 0x10
    1b9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ba0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ba2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ba4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ba6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ba8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1baa:	b9 84       	ldd	r11, Y+9	; 0x09
    1bac:	c8 84       	ldd	r12, Y+8	; 0x08
    1bae:	df 80       	ldd	r13, Y+7	; 0x07
    1bb0:	ee 80       	ldd	r14, Y+6	; 0x06
    1bb2:	fd 80       	ldd	r15, Y+5	; 0x05
    1bb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bb6:	1b 81       	ldd	r17, Y+3	; 0x03
    1bb8:	aa 81       	ldd	r26, Y+2	; 0x02
    1bba:	b9 81       	ldd	r27, Y+1	; 0x01
    1bbc:	ce 0f       	add	r28, r30
    1bbe:	d1 1d       	adc	r29, r1
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	ed 01       	movw	r28, r26
    1bcc:	08 95       	ret

00001bce <_exit>:
    1bce:	f8 94       	cli

00001bd0 <__stop_program>:
    1bd0:	ff cf       	rjmp	.-2      	; 0x1bd0 <__stop_program>
