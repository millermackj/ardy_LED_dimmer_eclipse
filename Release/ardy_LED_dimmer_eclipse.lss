
ardy_LED_dimmer_eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00002496  0000252a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ac  008001d8  008001d8  00002602  2**0
                  ALLOC
  3 .stab         00003bac  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001164  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000728  00000000  00000000  00007314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001123  00000000  00000000  00007a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007902  00000000  00000000  00008b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c67  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004a24  00000000  00000000  000120c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c10  00000000  00000000  00016aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000216c  00000000  00000000  000176fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004e2a  00000000  00000000  00019868  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c8  00000000  00000000  0001e692  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
    }
}

int LedControl::getDeviceCount() {
    return maxDevices;
}
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_16>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_18>
      4c:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_19>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <port_to_mode_PGM>:
      86:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000090 <port_to_output_PGM>:
      90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_input_PGM>:
      9a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <digital_pin_to_bit_mask_PGM>:
      b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c8:	04 08 10 20                                         ... 

000000cc <digital_pin_to_timer_PGM>:
      cc:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      dc:	00 00 00 00                                         ....

000000e0 <__ctors_start>:
      e0:	92 01       	movw	r18, r4
      e2:	f4 07       	cpc	r31, r20

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	11 e0       	ldi	r17, 0x01	; 1
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e6 e9       	ldi	r30, 0x96	; 150
      f8:	f4 e2       	ldi	r31, 0x24	; 36
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	a8 3d       	cpi	r26, 0xD8	; 216
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	14 e0       	ldi	r17, 0x04	; 4
     108:	a8 ed       	ldi	r26, 0xD8	; 216
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a4 38       	cpi	r26, 0x84	; 132
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>

00000116 <__do_global_ctors>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	c4 ee       	ldi	r28, 0xE4	; 228
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	04 c0       	rjmp	.+8      	; 0x126 <.do_global_ctors_start>

0000011e <.do_global_ctors_loop>:
     11e:	22 97       	sbiw	r28, 0x02	; 2
     120:	fe 01       	movw	r30, r28
     122:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__tablejump__>

00000126 <.do_global_ctors_start>:
     126:	c0 3e       	cpi	r28, 0xE0	; 224
     128:	d1 07       	cpc	r29, r17
     12a:	c9 f7       	brne	.-14     	; 0x11e <.do_global_ctors_loop>
     12c:	0e 94 48 0a 	call	0x1490	; 0x1490 <main>
     130:	0c 94 49 12 	jmp	0x2492	; 0x2492 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <_Z11step_pulsermP13pulser_struct>:
  // calculate dimmer percentage to a tenth of a percent
  dimmer_pct = map(dimmer_cts, 0 , 1025, 0, 1000);
//  	pulser.pulse_up_period = (int)map(round(dimmer_cts), 0 , 873, 0, (long int)pulser.carrier_period);
}

void step_pulser(long unsigned int current_time, pulser_struct* pulser){
     138:	cf 92       	push	r12
     13a:	df 92       	push	r13
     13c:	ef 92       	push	r14
     13e:	ff 92       	push	r15
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	6b 01       	movw	r12, r22
     14a:	7c 01       	movw	r14, r24
     14c:	ea 01       	movw	r28, r20
  if(current_time >= pulser->carrier_clock){
     14e:	8a 85       	ldd	r24, Y+10	; 0x0a
     150:	9b 85       	ldd	r25, Y+11	; 0x0b
     152:	ac 85       	ldd	r26, Y+12	; 0x0c
     154:	bd 85       	ldd	r27, Y+13	; 0x0d
     156:	c8 16       	cp	r12, r24
     158:	d9 06       	cpc	r13, r25
     15a:	ea 06       	cpc	r14, r26
     15c:	fb 06       	cpc	r15, r27
     15e:	b0 f1       	brcs	.+108    	; 0x1cc <_Z11step_pulsermP13pulser_struct+0x94>
    	pulser->pulse_down_period = pulser->carrier_period - pulser->pulse_up_period;
     160:	08 81       	ld	r16, Y
     162:	19 81       	ldd	r17, Y+1	; 0x01
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	f8 01       	movw	r30, r16
     16a:	e8 1b       	sub	r30, r24
     16c:	f9 0b       	sbc	r31, r25
     16e:	fd 83       	std	Y+5, r31	; 0x05
     170:	ec 83       	std	Y+4, r30	; 0x04
      pulser->step_period_up = pulser->pulse_up_period / impulse_num_samples;
     172:	64 e6       	ldi	r22, 0x64	; 100
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divmodhi4>
     17a:	7f 83       	std	Y+7, r23	; 0x07
     17c:	6e 83       	std	Y+6, r22	; 0x06
      pulser->step_period_down = pulser->pulse_down_period / impulse_num_samples;
     17e:	cf 01       	movw	r24, r30
     180:	64 e6       	ldi	r22, 0x64	; 100
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divmodhi4>
     188:	79 87       	std	Y+9, r23	; 0x09
     18a:	68 87       	std	Y+8, r22	; 0x08
      pulser->carrier_clock = current_time + pulser->carrier_period;
     18c:	22 27       	eor	r18, r18
     18e:	17 fd       	sbrc	r17, 7
     190:	20 95       	com	r18
     192:	32 2f       	mov	r19, r18
     194:	0c 0d       	add	r16, r12
     196:	1d 1d       	adc	r17, r13
     198:	2e 1d       	adc	r18, r14
     19a:	3f 1d       	adc	r19, r15
     19c:	0a 87       	std	Y+10, r16	; 0x0a
     19e:	1b 87       	std	Y+11, r17	; 0x0b
     1a0:	2c 87       	std	Y+12, r18	; 0x0c
     1a2:	3d 87       	std	Y+13, r19	; 0x0d
    	pulser->index = 0;
     1a4:	1f 8a       	std	Y+23, r1	; 0x17
     1a6:	1e 8a       	std	Y+22, r1	; 0x16
    	pulser->step_clock = current_time + pulser->offset_time;
     1a8:	88 8d       	ldd	r24, Y+24	; 0x18
     1aa:	99 8d       	ldd	r25, Y+25	; 0x19
     1ac:	aa 27       	eor	r26, r26
     1ae:	97 fd       	sbrc	r25, 7
     1b0:	a0 95       	com	r26
     1b2:	ba 2f       	mov	r27, r26
     1b4:	8c 0d       	add	r24, r12
     1b6:	9d 1d       	adc	r25, r13
     1b8:	ae 1d       	adc	r26, r14
     1ba:	bf 1d       	adc	r27, r15
     1bc:	8a 8b       	std	Y+18, r24	; 0x12
     1be:	9b 8b       	std	Y+19, r25	; 0x13
     1c0:	ac 8b       	std	Y+20, r26	; 0x14
     1c2:	bd 8b       	std	Y+21, r27	; 0x15
    	pulser->down_or_up = UP;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	9b 8f       	std	Y+27, r25	; 0x1b
     1ca:	8a 8f       	std	Y+26, r24	; 0x1a
    }
//    analogWrite(LED_PWM_PIN, impulse_array[pulser->index]);
//    showLED((long int)impulse_array[pulser->index] * 1000, 4);

    if(current_time >= pulser->step_clock){
     1cc:	4a 89       	ldd	r20, Y+18	; 0x12
     1ce:	5b 89       	ldd	r21, Y+19	; 0x13
     1d0:	6c 89       	ldd	r22, Y+20	; 0x14
     1d2:	7d 89       	ldd	r23, Y+21	; 0x15
     1d4:	c4 16       	cp	r12, r20
     1d6:	d5 06       	cpc	r13, r21
     1d8:	e6 06       	cpc	r14, r22
     1da:	f7 06       	cpc	r15, r23
     1dc:	c8 f1       	brcs	.+114    	; 0x250 <_Z11step_pulsermP13pulser_struct+0x118>
    	if (pulser->down_or_up == UP && pulser->index < impulse_num_samples - 1) {
     1de:	8a 8d       	ldd	r24, Y+26	; 0x1a
     1e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	c1 f4       	brne	.+48     	; 0x216 <_Z11step_pulsermP13pulser_struct+0xde>
     1e6:	2e 89       	ldd	r18, Y+22	; 0x16
     1e8:	3f 89       	ldd	r19, Y+23	; 0x17
     1ea:	23 36       	cpi	r18, 0x63	; 99
     1ec:	31 05       	cpc	r19, r1
     1ee:	9c f4       	brge	.+38     	; 0x216 <_Z11step_pulsermP13pulser_struct+0xde>
    		pulser->step_clock += pulser->step_period_up;
     1f0:	8e 81       	ldd	r24, Y+6	; 0x06
     1f2:	9f 81       	ldd	r25, Y+7	; 0x07
     1f4:	aa 27       	eor	r26, r26
     1f6:	97 fd       	sbrc	r25, 7
     1f8:	a0 95       	com	r26
     1fa:	ba 2f       	mov	r27, r26
     1fc:	84 0f       	add	r24, r20
     1fe:	95 1f       	adc	r25, r21
     200:	a6 1f       	adc	r26, r22
     202:	b7 1f       	adc	r27, r23
     204:	8a 8b       	std	Y+18, r24	; 0x12
     206:	9b 8b       	std	Y+19, r25	; 0x13
     208:	ac 8b       	std	Y+20, r26	; 0x14
     20a:	bd 8b       	std	Y+21, r27	; 0x15
    		pulser->index++;
     20c:	2f 5f       	subi	r18, 0xFF	; 255
     20e:	3f 4f       	sbci	r19, 0xFF	; 255
     210:	3f 8b       	std	Y+23, r19	; 0x17
     212:	2e 8b       	std	Y+22, r18	; 0x16
     214:	1d c0       	rjmp	.+58     	; 0x250 <_Z11step_pulsermP13pulser_struct+0x118>
    	}
    	else if(pulser->index > 0){
     216:	6e 89       	ldd	r22, Y+22	; 0x16
     218:	7f 89       	ldd	r23, Y+23	; 0x17
     21a:	16 16       	cp	r1, r22
     21c:	17 06       	cpc	r1, r23
     21e:	c4 f4       	brge	.+48     	; 0x250 <_Z11step_pulsermP13pulser_struct+0x118>
    		pulser->down_or_up = DOWN;
     220:	1b 8e       	std	Y+27, r1	; 0x1b
     222:	1a 8e       	std	Y+26, r1	; 0x1a
    		pulser->step_clock += pulser->step_period_down;
     224:	28 85       	ldd	r18, Y+8	; 0x08
     226:	39 85       	ldd	r19, Y+9	; 0x09
     228:	44 27       	eor	r20, r20
     22a:	37 fd       	sbrc	r19, 7
     22c:	40 95       	com	r20
     22e:	54 2f       	mov	r21, r20
     230:	8a 89       	ldd	r24, Y+18	; 0x12
     232:	9b 89       	ldd	r25, Y+19	; 0x13
     234:	ac 89       	ldd	r26, Y+20	; 0x14
     236:	bd 89       	ldd	r27, Y+21	; 0x15
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	8a 8b       	std	Y+18, r24	; 0x12
     242:	9b 8b       	std	Y+19, r25	; 0x13
     244:	ac 8b       	std	Y+20, r26	; 0x14
     246:	bd 8b       	std	Y+21, r27	; 0x15
    		pulser->index--;
     248:	61 50       	subi	r22, 0x01	; 1
     24a:	70 40       	sbci	r23, 0x00	; 0
     24c:	7f 8b       	std	Y+23, r23	; 0x17
     24e:	6e 8b       	std	Y+22, r22	; 0x16
    	}
    }

}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	df 90       	pop	r13
     25e:	cf 90       	pop	r12
     260:	08 95       	ret

00000262 <_Z17calculate_cadencemP14encoder_struct>:
  	}
  }
  encoder->last_state = encoder->pin_state;
}

void calculate_cadence(long unsigned int current_time, encoder_struct* cadence_enc){
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	8b 01       	movw	r16, r22
     270:	9c 01       	movw	r18, r24
     272:	ea 01       	movw	r28, r20
	if(cadence_enc->last_period != 0){
     274:	4a 89       	ldd	r20, Y+18	; 0x12
     276:	5b 89       	ldd	r21, Y+19	; 0x13
     278:	41 15       	cp	r20, r1
     27a:	51 05       	cpc	r21, r1
     27c:	09 f4       	brne	.+2      	; 0x280 <_Z17calculate_cadencemP14encoder_struct+0x1e>
     27e:	4b c0       	rjmp	.+150    	; 0x316 <_Z17calculate_cadencemP14encoder_struct+0xb4>
		if((current_time - cadence_enc->startTime) > cadence_enc->max_period){
     280:	8e 81       	ldd	r24, Y+6	; 0x06
     282:	9f 81       	ldd	r25, Y+7	; 0x07
     284:	a8 85       	ldd	r26, Y+8	; 0x08
     286:	b9 85       	ldd	r27, Y+9	; 0x09
     288:	78 01       	movw	r14, r16
     28a:	89 01       	movw	r16, r18
     28c:	e8 1a       	sub	r14, r24
     28e:	f9 0a       	sbc	r15, r25
     290:	0a 0b       	sbc	r16, r26
     292:	1b 0b       	sbc	r17, r27
     294:	88 8d       	ldd	r24, Y+24	; 0x18
     296:	99 8d       	ldd	r25, Y+25	; 0x19
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	8e 15       	cp	r24, r14
     29e:	9f 05       	cpc	r25, r15
     2a0:	a0 07       	cpc	r26, r16
     2a2:	b1 07       	cpc	r27, r17
     2a4:	28 f4       	brcc	.+10     	; 0x2b0 <_Z17calculate_cadencemP14encoder_struct+0x4e>
			cadence_enc->hertz = 0;
     2a6:	1c 86       	std	Y+12, r1	; 0x0c
     2a8:	1d 86       	std	Y+13, r1	; 0x0d
     2aa:	1e 86       	std	Y+14, r1	; 0x0e
     2ac:	1f 86       	std	Y+15, r1	; 0x0f
     2ae:	33 c0       	rjmp	.+102    	; 0x316 <_Z17calculate_cadencemP14encoder_struct+0xb4>
		}
		else if(current_time - cadence_enc->startTime > cadence_enc->last_period)
     2b0:	ca 01       	movw	r24, r20
     2b2:	aa 27       	eor	r26, r26
     2b4:	97 fd       	sbrc	r25, 7
     2b6:	a0 95       	com	r26
     2b8:	ba 2f       	mov	r27, r26
     2ba:	6c 89       	ldd	r22, Y+20	; 0x14
     2bc:	7d 89       	ldd	r23, Y+21	; 0x15
     2be:	8e 15       	cp	r24, r14
     2c0:	9f 05       	cpc	r25, r15
     2c2:	a0 07       	cpc	r26, r16
     2c4:	b1 07       	cpc	r27, r17
     2c6:	90 f4       	brcc	.+36     	; 0x2ec <_Z17calculate_cadencemP14encoder_struct+0x8a>
			cadence_enc->hertz = (1000L*1000L)/((current_time - cadence_enc->startTime)*cadence_enc->cts_per_rev);
     2c8:	9b 01       	movw	r18, r22
     2ca:	44 27       	eor	r20, r20
     2cc:	37 fd       	sbrc	r19, 7
     2ce:	40 95       	com	r20
     2d0:	54 2f       	mov	r21, r20
     2d2:	c8 01       	movw	r24, r16
     2d4:	b7 01       	movw	r22, r14
     2d6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__mulsi3>
     2da:	9b 01       	movw	r18, r22
     2dc:	ac 01       	movw	r20, r24
     2de:	60 e4       	ldi	r22, 0x40	; 64
     2e0:	72 e4       	ldi	r23, 0x42	; 66
     2e2:	8f e0       	ldi	r24, 0x0F	; 15
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
     2ea:	11 c0       	rjmp	.+34     	; 0x30e <_Z17calculate_cadencemP14encoder_struct+0xac>
		else{
			cadence_enc->hertz = (1000L*1000L)/(cadence_enc->last_period*cadence_enc->cts_per_rev);
     2ec:	46 9f       	mul	r20, r22
     2ee:	90 01       	movw	r18, r0
     2f0:	47 9f       	mul	r20, r23
     2f2:	30 0d       	add	r19, r0
     2f4:	56 9f       	mul	r21, r22
     2f6:	30 0d       	add	r19, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	44 27       	eor	r20, r20
     2fc:	37 fd       	sbrc	r19, 7
     2fe:	40 95       	com	r20
     300:	54 2f       	mov	r21, r20
     302:	60 e4       	ldi	r22, 0x40	; 64
     304:	72 e4       	ldi	r23, 0x42	; 66
     306:	8f e0       	ldi	r24, 0x0F	; 15
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     30e:	2c 87       	std	Y+12, r18	; 0x0c
     310:	3d 87       	std	Y+13, r19	; 0x0d
     312:	4e 87       	std	Y+14, r20	; 0x0e
     314:	5f 87       	std	Y+15, r21	; 0x0f
		}
	}
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	08 95       	ret

00000324 <_GLOBAL__I_dimmer_cts_new>:
			sprintf(outputbuffer, "<r>%lu.%03lu\t%ld.%03ld</r>\n", current_time/1000,
					current_time % 1000, (60*cadence_enc.hertz)/1000, (60*cadence_enc.hertz) % 1000);
			Serial.write(outputbuffer);
		}
  }
}
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17

double alpha = .1;
char outputbuffer[128];

// instantiate LED Display controller -- the 4th argument is the number of displays
LedControl ledDisplay = LedControl(LED_DATA_PIN, LED_CLOCK_PIN, LED_CSLOAD_PIN, 1);
     328:	8e e5       	ldi	r24, 0x5E	; 94
     32a:	93 e0       	ldi	r25, 0x03	; 3
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	42 e0       	ldi	r20, 0x02	; 2
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	24 e0       	ldi	r18, 0x04	; 4
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	01 e0       	ldi	r16, 0x01	; 1
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN10LedControlC1Eiiii>
			sprintf(outputbuffer, "<r>%lu.%03lu\t%ld.%03ld</r>\n", current_time/1000,
					current_time % 1000, (60*cadence_enc.hertz)/1000, (60*cadence_enc.hertz) % 1000);
			Serial.write(outputbuffer);
		}
  }
}
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	db 01       	movw	r26, r22
     34c:	0d 90       	ld	r0, X+
     34e:	00 20       	and	r0, r0
     350:	e9 f7       	brne	.-6      	; 0x34c <_ZN5Print5writeEPKc+0x6>
     352:	11 97       	sbiw	r26, 0x01	; 1
     354:	a6 1b       	sub	r26, r22
     356:	b7 0b       	sbc	r27, r23
     358:	ec 01       	movw	r28, r24
     35a:	e8 81       	ld	r30, Y
     35c:	f9 81       	ldd	r31, Y+1	; 0x01
     35e:	02 80       	ldd	r0, Z+2	; 0x02
     360:	f3 81       	ldd	r31, Z+3	; 0x03
     362:	e0 2d       	mov	r30, r0
     364:	ad 01       	movw	r20, r26
     366:	09 95       	icall
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <_Z12poll_encodermP14encoder_struct>:
    	}
    }

}

void poll_encoder(long unsigned int current_time, encoder_struct* encoder){
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	7b 01       	movw	r14, r22
     37c:	8c 01       	movw	r16, r24
     37e:	ea 01       	movw	r28, r20
  if(!digitalRead(encoder->pin_num)){
     380:	88 89       	ldd	r24, Y+16	; 0x10
     382:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <digitalRead>
     386:	28 81       	ld	r18, Y
     388:	39 81       	ldd	r19, Y+1	; 0x01
     38a:	89 2b       	or	r24, r25
     38c:	69 f4       	brne	.+26     	; 0x3a8 <_Z12poll_encodermP14encoder_struct+0x3a>
    if(encoder->debounce_cnt < encoder->debounce_min)
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	9b 81       	ldd	r25, Y+3	; 0x03
     392:	28 17       	cp	r18, r24
     394:	39 07       	cpc	r19, r25
     396:	1c f4       	brge	.+6      	; 0x39e <_Z12poll_encodermP14encoder_struct+0x30>
    	encoder->debounce_cnt++;
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	0a c0       	rjmp	.+20     	; 0x3b2 <_Z12poll_encodermP14encoder_struct+0x44>
    else{ // debounce count is equal to or greater than minimum
    	encoder->pin_state = HIGH;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9d 83       	std	Y+5, r25	; 0x05
     3a4:	8c 83       	std	Y+4, r24	; 0x04
     3a6:	0a c0       	rjmp	.+20     	; 0x3bc <_Z12poll_encodermP14encoder_struct+0x4e>
    }
  }
  else{
    if(encoder->debounce_cnt > 0)
     3a8:	12 16       	cp	r1, r18
     3aa:	13 06       	cpc	r1, r19
     3ac:	2c f4       	brge	.+10     	; 0x3b8 <_Z12poll_encodermP14encoder_struct+0x4a>
    	encoder->debounce_cnt--;
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	30 40       	sbci	r19, 0x00	; 0
     3b2:	39 83       	std	Y+1, r19	; 0x01
     3b4:	28 83       	st	Y, r18
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_Z12poll_encodermP14encoder_struct+0x4e>
    else{ // debounce count is at zero
    	encoder->pin_state = LOW;
     3b8:	1d 82       	std	Y+5, r1	; 0x05
     3ba:	1c 82       	std	Y+4, r1	; 0x04
    }
  }

  if (encoder->last_state != encoder->pin_state){
     3bc:	6c 81       	ldd	r22, Y+4	; 0x04
     3be:	7d 81       	ldd	r23, Y+5	; 0x05
     3c0:	8e 89       	ldd	r24, Y+22	; 0x16
     3c2:	9f 89       	ldd	r25, Y+23	; 0x17
     3c4:	86 17       	cp	r24, r22
     3c6:	97 07       	cpc	r25, r23
     3c8:	91 f0       	breq	.+36     	; 0x3ee <_Z12poll_encodermP14encoder_struct+0x80>
  	digitalWrite(LED_PIN, encoder->pin_state);
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
  	if(encoder->pin_state == LOW){ // detect falling edge
     3d0:	8c 81       	ldd	r24, Y+4	; 0x04
     3d2:	9d 81       	ldd	r25, Y+5	; 0x05
     3d4:	89 2b       	or	r24, r25
     3d6:	59 f4       	brne	.+22     	; 0x3ee <_Z12poll_encodermP14encoder_struct+0x80>
//    		cadence_enc->last_period = (cadence_enc->alpha*(current_time - cadence_enc->startTime)
//    				+ (1000L - cadence_enc->alpha)*cadence_enc->last_period)/1000;
  		encoder->last_period = (current_time - encoder->startTime);
     3d8:	8e 81       	ldd	r24, Y+6	; 0x06
     3da:	9f 81       	ldd	r25, Y+7	; 0x07
     3dc:	97 01       	movw	r18, r14
     3de:	28 1b       	sub	r18, r24
     3e0:	39 0b       	sbc	r19, r25
     3e2:	3b 8b       	std	Y+19, r19	; 0x13
     3e4:	2a 8b       	std	Y+18, r18	; 0x12
  		encoder->startTime = current_time;
     3e6:	ee 82       	std	Y+6, r14	; 0x06
     3e8:	ff 82       	std	Y+7, r15	; 0x07
     3ea:	08 87       	std	Y+8, r16	; 0x08
     3ec:	19 87       	std	Y+9, r17	; 0x09
  	}
  }
  encoder->last_state = encoder->pin_state;
     3ee:	8c 81       	ldd	r24, Y+4	; 0x04
     3f0:	9d 81       	ldd	r25, Y+5	; 0x05
     3f2:	9f 8b       	std	Y+23, r25	; 0x17
     3f4:	8e 8b       	std	Y+22, r24	; 0x16
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <_Z18poll_potentiometerv>:
	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
	}
}

void poll_potentiometer(){
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
  dimmer_cts_new = (analogRead(POT_PIN)/5) * 5;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <analogRead>
     41a:	65 e0       	ldi	r22, 0x05	; 5
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divmodhi4>
     422:	cb 01       	movw	r24, r22
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	86 0f       	add	r24, r22
     42e:	97 1f       	adc	r25, r23
     430:	9c 01       	movw	r18, r24
     432:	44 27       	eor	r20, r20
     434:	37 fd       	sbrc	r19, 7
     436:	40 95       	com	r20
     438:	54 2f       	mov	r21, r20
     43a:	20 93 d8 01 	sts	0x01D8, r18
     43e:	30 93 d9 01 	sts	0x01D9, r19
     442:	40 93 da 01 	sts	0x01DA, r20
     446:	50 93 db 01 	sts	0x01DB, r21
  if (dimmer_cts_new != dimmer_cts && dimmer_debounce < dimmer_debounce_limit){
     44a:	80 91 dc 01 	lds	r24, 0x01DC
     44e:	90 91 dd 01 	lds	r25, 0x01DD
     452:	a0 91 de 01 	lds	r26, 0x01DE
     456:	b0 91 df 01 	lds	r27, 0x01DF
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	4a 07       	cpc	r20, r26
     460:	5b 07       	cpc	r21, r27
     462:	d9 f0       	breq	.+54     	; 0x49a <_Z18poll_potentiometerv+0x96>
     464:	80 91 e0 01 	lds	r24, 0x01E0
     468:	90 91 e1 01 	lds	r25, 0x01E1
     46c:	60 91 3e 01 	lds	r22, 0x013E
     470:	70 91 3f 01 	lds	r23, 0x013F
     474:	86 17       	cp	r24, r22
     476:	97 07       	cpc	r25, r23
     478:	84 f4       	brge	.+32     	; 0x49a <_Z18poll_potentiometerv+0x96>
  	dimmer_debounce++;
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 e1 01 	sts	0x01E1, r25
     480:	80 93 e0 01 	sts	0x01E0, r24
  	if (dimmer_debounce == dimmer_debounce_limit){
     484:	86 17       	cp	r24, r22
     486:	97 07       	cpc	r25, r23
     488:	61 f4       	brne	.+24     	; 0x4a2 <_Z18poll_potentiometerv+0x9e>
  		dimmer_cts = dimmer_cts_new;
     48a:	20 93 dc 01 	sts	0x01DC, r18
     48e:	30 93 dd 01 	sts	0x01DD, r19
     492:	40 93 de 01 	sts	0x01DE, r20
     496:	50 93 df 01 	sts	0x01DF, r21
  		dimmer_debounce = 0;
  	}
  }
  else{ // reset debounce count
  	dimmer_debounce = 0;
     49a:	10 92 e1 01 	sts	0x01E1, r1
     49e:	10 92 e0 01 	sts	0x01E0, r1
  }
  // calculate dimmer percentage to a tenth of a percent
  dimmer_pct = map(dimmer_cts, 0 , 1025, 0, 1000);
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <_Z18poll_potentiometerv+0xa0>
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <_Z18poll_potentiometerv+0xa2>
     4a6:	60 91 dc 01 	lds	r22, 0x01DC
     4aa:	70 91 dd 01 	lds	r23, 0x01DD
     4ae:	80 91 de 01 	lds	r24, 0x01DE
     4b2:	90 91 df 01 	lds	r25, 0x01DF
     4b6:	28 ee       	ldi	r18, 0xE8	; 232
     4b8:	33 e0       	ldi	r19, 0x03	; 3
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	ed b7       	in	r30, 0x3d	; 61
     4c0:	fe b7       	in	r31, 0x3e	; 62
     4c2:	21 83       	std	Z+1, r18	; 0x01
     4c4:	32 83       	std	Z+2, r19	; 0x02
     4c6:	43 83       	std	Z+3, r20	; 0x03
     4c8:	54 83       	std	Z+4, r21	; 0x04
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	e1 e0       	ldi	r30, 0x01	; 1
     4d4:	ee 2e       	mov	r14, r30
     4d6:	e4 e0       	ldi	r30, 0x04	; 4
     4d8:	fe 2e       	mov	r15, r30
     4da:	01 2d       	mov	r16, r1
     4dc:	11 2d       	mov	r17, r1
     4de:	aa 24       	eor	r10, r10
     4e0:	bb 24       	eor	r11, r11
     4e2:	65 01       	movw	r12, r10
     4e4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z3maplllll>
     4e8:	60 93 e2 01 	sts	0x01E2, r22
     4ec:	70 93 e3 01 	sts	0x01E3, r23
     4f0:	80 93 e4 01 	sts	0x01E4, r24
     4f4:	90 93 e5 01 	sts	0x01E5, r25
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
//  	pulser.pulse_up_period = (int)map(round(dimmer_cts), 0 , 873, 0, (long int)pulser.carrier_period);
}
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	df 90       	pop	r13
     50a:	cf 90       	pop	r12
     50c:	bf 90       	pop	r11
     50e:	af 90       	pop	r10
     510:	08 95       	ret

00000512 <_Z7showLEDli>:
	ledDisplay.setIntensity(0, 12);
	ledDisplay.clearDisplay(0);
}

// method that takes a number in millis and displays it to the hundredth on LED display
void showLED(long dispNumMill, int sigfigs) {
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	28 97       	sbiw	r28, 0x08	; 8
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	4b 01       	movw	r8, r22
     544:	5c 01       	movw	r10, r24
     546:	2a 01       	movw	r4, r20
	// flag for negative value -- light up last decimal if negative
	bool neg = (dispNumMill < 0);

	int decipoint = 2; // decimal point after third digit from right by default

	dispNumMill = abs(dispNumMill);
     548:	7b 01       	movw	r14, r22
     54a:	8c 01       	movw	r16, r24
     54c:	97 ff       	sbrs	r25, 7
     54e:	07 c0       	rjmp	.+14     	; 0x55e <_Z7showLEDli+0x4c>
     550:	ee 24       	eor	r14, r14
     552:	ff 24       	eor	r15, r15
     554:	87 01       	movw	r16, r14
     556:	e6 1a       	sub	r14, r22
     558:	f7 0a       	sbc	r15, r23
     55a:	08 0b       	sbc	r16, r24
     55c:	19 0b       	sbc	r17, r25

	if (dispNumMill >= 100000) { // if number is bigger than a hundred, move decimal to right.
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	e8 16       	cp	r14, r24
     562:	86 e8       	ldi	r24, 0x86	; 134
     564:	f8 06       	cpc	r15, r24
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	08 07       	cpc	r16, r24
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	18 07       	cpc	r17, r24
     56e:	24 f4       	brge	.+8      	; 0x578 <_Z7showLEDli+0x66>
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	68 2e       	mov	r6, r24
     574:	71 2c       	mov	r7, r1
     576:	28 c0       	rjmp	.+80     	; 0x5c8 <_Z7showLEDli+0xb6>
		decipoint = 1;
		dispNumMill = dispNumMill / 10;
     578:	c8 01       	movw	r24, r16
     57a:	b7 01       	movw	r22, r14
     57c:	2a e0       	ldi	r18, 0x0A	; 10
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     588:	c9 01       	movw	r24, r18
     58a:	da 01       	movw	r26, r20
     58c:	7c 01       	movw	r14, r24
     58e:	8d 01       	movw	r16, r26
	}

	if (dispNumMill >= 100000) { // if number is still bigger than a hundred, remove decimal point
     590:	90 ea       	ldi	r25, 0xA0	; 160
     592:	e9 16       	cp	r14, r25
     594:	96 e8       	ldi	r25, 0x86	; 134
     596:	f9 06       	cpc	r15, r25
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	09 07       	cpc	r16, r25
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	19 07       	cpc	r17, r25
     5a0:	24 f4       	brge	.+8      	; 0x5aa <_Z7showLEDli+0x98>
     5a2:	b1 e0       	ldi	r27, 0x01	; 1
     5a4:	6b 2e       	mov	r6, r27
     5a6:	71 2c       	mov	r7, r1
     5a8:	0f c0       	rjmp	.+30     	; 0x5c8 <_Z7showLEDli+0xb6>
		decipoint = -1;
		dispNumMill = dispNumMill / 10;
     5aa:	c8 01       	movw	r24, r16
     5ac:	b7 01       	movw	r22, r14
     5ae:	2a e0       	ldi	r18, 0x0A	; 10
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     5ba:	c9 01       	movw	r24, r18
     5bc:	da 01       	movw	r26, r20
     5be:	7c 01       	movw	r14, r24
     5c0:	8d 01       	movw	r16, r26
     5c2:	66 24       	eor	r6, r6
     5c4:	6a 94       	dec	r6
     5c6:	76 2c       	mov	r7, r6
	}

	int remainder = dispNumMill % 10;
     5c8:	c8 01       	movw	r24, r16
     5ca:	b7 01       	movw	r22, r14
     5cc:	2a e0       	ldi	r18, 0x0A	; 10
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
	// do some rounding if necessary

	if (remainder >= 5)
     5d8:	65 30       	cpi	r22, 0x05	; 5
     5da:	71 05       	cpc	r23, r1
     5dc:	8c f0       	brlt	.+34     	; 0x600 <_Z7showLEDli+0xee>
		dispNumMill = dispNumMill - remainder + 10;
     5de:	8a e0       	ldi	r24, 0x0A	; 10
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	a0 e0       	ldi	r26, 0x00	; 0
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	e8 0e       	add	r14, r24
     5e8:	f9 1e       	adc	r15, r25
     5ea:	0a 1f       	adc	r16, r26
     5ec:	1b 1f       	adc	r17, r27
     5ee:	cb 01       	movw	r24, r22
     5f0:	aa 27       	eor	r26, r26
     5f2:	97 fd       	sbrc	r25, 7
     5f4:	a0 95       	com	r26
     5f6:	ba 2f       	mov	r27, r26
     5f8:	e8 1a       	sub	r14, r24
     5fa:	f9 0a       	sbc	r15, r25
     5fc:	0a 0b       	sbc	r16, r26
     5fe:	1b 0b       	sbc	r17, r27

	int dig[4]; // array to store display digits

	// determine digit values by extracting them from dispNumMill

	dig[3] = (dispNumMill % 100000) / 10000;
     600:	c8 01       	movw	r24, r16
     602:	b7 01       	movw	r22, r14
     604:	20 ea       	ldi	r18, 0xA0	; 160
     606:	36 e8       	ldi	r19, 0x86	; 134
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     610:	20 e1       	ldi	r18, 0x10	; 16
     612:	37 e2       	ldi	r19, 0x27	; 39
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     61c:	38 87       	std	Y+8, r19	; 0x08
     61e:	2f 83       	std	Y+7, r18	; 0x07
	dig[2] = (dispNumMill % 10000) / 1000;
     620:	c8 01       	movw	r24, r16
     622:	b7 01       	movw	r22, r14
     624:	20 e1       	ldi	r18, 0x10	; 16
     626:	37 e2       	ldi	r19, 0x27	; 39
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     630:	28 ee       	ldi	r18, 0xE8	; 232
     632:	33 e0       	ldi	r19, 0x03	; 3
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     63c:	3e 83       	std	Y+6, r19	; 0x06
     63e:	2d 83       	std	Y+5, r18	; 0x05
	dig[1] = (dispNumMill % 1000) / 100;
     640:	c8 01       	movw	r24, r16
     642:	b7 01       	movw	r22, r14
     644:	28 ee       	ldi	r18, 0xE8	; 232
     646:	33 e0       	ldi	r19, 0x03	; 3
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     650:	24 e6       	ldi	r18, 0x64	; 100
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     65c:	3c 83       	std	Y+4, r19	; 0x04
     65e:	2b 83       	std	Y+3, r18	; 0x03
	dig[0] = (dispNumMill % 100) / 10;
     660:	c8 01       	movw	r24, r16
     662:	b7 01       	movw	r22, r14
     664:	24 e6       	ldi	r18, 0x64	; 100
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     670:	2a e0       	ldi	r18, 0x0A	; 10
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     67c:	3a 83       	std	Y+2, r19	; 0x02
     67e:	29 83       	std	Y+1, r18	; 0x01
     680:	6e 01       	movw	r12, r28
     682:	08 94       	sec
     684:	c1 1c       	adc	r12, r1
     686:	d1 1c       	adc	r13, r1
     688:	f6 01       	movw	r30, r12
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < 4 - sigfigs; i++) {
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	84 19       	sub	r24, r4
     694:	95 09       	sbc	r25, r5
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <_Z7showLEDli+0x18e>
		dig[i] = 0;
     698:	11 92       	st	Z+, r1
     69a:	11 92       	st	Z+, r1
	dig[3] = (dispNumMill % 100000) / 10000;
	dig[2] = (dispNumMill % 10000) / 1000;
	dig[1] = (dispNumMill % 1000) / 100;
	dig[0] = (dispNumMill % 100) / 10;

	for (int i = 0; i < 4 - sigfigs; i++) {
     69c:	2f 5f       	subi	r18, 0xFF	; 255
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
     6a0:	28 17       	cp	r18, r24
     6a2:	39 07       	cpc	r19, r25
     6a4:	cc f3       	brlt	.-14     	; 0x698 <_Z7showLEDli+0x186>
     6a6:	ee 24       	eor	r14, r14
     6a8:	ff 24       	eor	r15, r15
		dig[i] = 0;
	}

	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
     6aa:	88 24       	eor	r8, r8
     6ac:	b7 fc       	sbrc	r11, 7
     6ae:	83 94       	inc	r8
     6b0:	99 24       	eor	r9, r9
     6b2:	aa 24       	eor	r10, r10
     6b4:	bb 24       	eor	r11, r11
     6b6:	18 2d       	mov	r17, r8
     6b8:	d6 01       	movw	r26, r12
     6ba:	2c 91       	ld	r18, X
     6bc:	e6 14       	cp	r14, r6
     6be:	f7 04       	cpc	r15, r7
     6c0:	11 f4       	brne	.+4      	; 0x6c6 <_Z7showLEDli+0x1b4>
     6c2:	01 e0       	ldi	r16, 0x01	; 1
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <_Z7showLEDli+0x1c0>
     6c6:	e1 14       	cp	r14, r1
     6c8:	f1 04       	cpc	r15, r1
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <_Z7showLEDli+0x1be>
     6cc:	00 e0       	ldi	r16, 0x00	; 0
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <_Z7showLEDli+0x1c0>
     6d0:	01 2f       	mov	r16, r17
     6d2:	8e e5       	ldi	r24, 0x5E	; 94
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	a7 01       	movw	r20, r14
     6dc:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN10LedControl8setDigitEiihh>

	for (int i = 0; i < 4 - sigfigs; i++) {
		dig[i] = 0;
	}

	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
     6e0:	08 94       	sec
     6e2:	e1 1c       	adc	r14, r1
     6e4:	f1 1c       	adc	r15, r1
     6e6:	e2 e0       	ldi	r30, 0x02	; 2
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ce 0e       	add	r12, r30
     6ec:	df 1e       	adc	r13, r31
     6ee:	f4 e0       	ldi	r31, 0x04	; 4
     6f0:	ef 16       	cp	r14, r31
     6f2:	f1 04       	cpc	r15, r1
     6f4:	09 f7       	brne	.-62     	; 0x6b8 <_Z7showLEDli+0x1a6>
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
	}
}
     6f6:	28 96       	adiw	r28, 0x08	; 8
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	9f 90       	pop	r9
     718:	8f 90       	pop	r8
     71a:	7f 90       	pop	r7
     71c:	6f 90       	pop	r6
     71e:	5f 90       	pop	r5
     720:	4f 90       	pop	r4
     722:	08 95       	ret

00000724 <loop>:
			cadence_enc->hertz = (1000L*1000L)/(cadence_enc->last_period*cadence_enc->cts_per_rev);
		}
	}
}

void loop() {
     724:	6f 92       	push	r6
     726:	7f 92       	push	r7
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
	long unsigned int current_time = millis();
     73c:	0e 94 9f 0a 	call	0x153e	; 0x153e <millis>
     740:	3b 01       	movw	r6, r22
     742:	4c 01       	movw	r8, r24
  if(current_time >= sample_clock){
     744:	80 91 ee 01 	lds	r24, 0x01EE
     748:	90 91 ef 01 	lds	r25, 0x01EF
     74c:	a0 91 f0 01 	lds	r26, 0x01F0
     750:	b0 91 f1 01 	lds	r27, 0x01F1
     754:	68 16       	cp	r6, r24
     756:	79 06       	cpc	r7, r25
     758:	8a 06       	cpc	r8, r26
     75a:	9b 06       	cpc	r9, r27
     75c:	08 f4       	brcc	.+2      	; 0x760 <loop+0x3c>
     75e:	2e c1       	rjmp	.+604    	; 0x9bc <__stack+0xbd>
  	// reset sampling clock
  	sample_clock += SAMPLE_PERIOD;
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	a1 1d       	adc	r26, r1
     764:	b1 1d       	adc	r27, r1
     766:	80 93 ee 01 	sts	0x01EE, r24
     76a:	90 93 ef 01 	sts	0x01EF, r25
     76e:	a0 93 f0 01 	sts	0x01F0, r26
     772:	b0 93 f1 01 	sts	0x01F1, r27

  	// poll the potentiometer once each sample period
  	poll_potentiometer();
     776:	0e 94 02 02 	call	0x404	; 0x404 <_Z18poll_potentiometerv>

  	// dim the LED string using potentiometer as a reference
    analogWrite(LED_PWM_PIN, map(dimmer_cts, 0, 1025, 0, 255));
     77a:	00 d0       	rcall	.+0      	; 0x77c <loop+0x58>
     77c:	00 d0       	rcall	.+0      	; 0x77e <loop+0x5a>
     77e:	60 91 dc 01 	lds	r22, 0x01DC
     782:	70 91 dd 01 	lds	r23, 0x01DD
     786:	80 91 de 01 	lds	r24, 0x01DE
     78a:	90 91 df 01 	lds	r25, 0x01DF
     78e:	2f ef       	ldi	r18, 0xFF	; 255
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	ed b7       	in	r30, 0x3d	; 61
     798:	fe b7       	in	r31, 0x3e	; 62
     79a:	21 83       	std	Z+1, r18	; 0x01
     79c:	32 83       	std	Z+2, r19	; 0x02
     79e:	43 83       	std	Z+3, r20	; 0x03
     7a0:	54 83       	std	Z+4, r21	; 0x04
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	e1 e0       	ldi	r30, 0x01	; 1
     7ac:	ee 2e       	mov	r14, r30
     7ae:	e4 e0       	ldi	r30, 0x04	; 4
     7b0:	fe 2e       	mov	r15, r30
     7b2:	01 2d       	mov	r16, r1
     7b4:	11 2d       	mov	r17, r1
     7b6:	aa 24       	eor	r10, r10
     7b8:	bb 24       	eor	r11, r11
     7ba:	65 01       	movw	r12, r10
     7bc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z3maplllll>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	8b e0       	ldi	r24, 0x0B	; 11
     7ce:	b9 01       	movw	r22, r18
     7d0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <analogWrite>

    // step through impulse routine
    step_pulser(current_time, &pulser);
     7d4:	c4 01       	movw	r24, r8
     7d6:	b3 01       	movw	r22, r6
     7d8:	42 ec       	ldi	r20, 0xC2	; 194
     7da:	52 e0       	ldi	r21, 0x02	; 2
     7dc:	0e 94 9c 00 	call	0x138	; 0x138 <_Z11step_pulsermP13pulser_struct>

    // poll the cadence encoder
    poll_encoder(current_time, &cadence_enc);
     7e0:	c4 01       	movw	r24, r8
     7e2:	b3 01       	movw	r22, r6
     7e4:	46 eb       	ldi	r20, 0xB6	; 182
     7e6:	53 e0       	ldi	r21, 0x03	; 3
     7e8:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z12poll_encodermP14encoder_struct>

		if(current_time >= calc_cadence_clock){
     7ec:	80 91 ea 01 	lds	r24, 0x01EA
     7f0:	90 91 eb 01 	lds	r25, 0x01EB
     7f4:	a0 91 ec 01 	lds	r26, 0x01EC
     7f8:	b0 91 ed 01 	lds	r27, 0x01ED
     7fc:	68 16       	cp	r6, r24
     7fe:	79 06       	cpc	r7, r25
     800:	8a 06       	cpc	r8, r26
     802:	9b 06       	cpc	r9, r27
     804:	d0 f0       	brcs	.+52     	; 0x83a <loop+0x116>
			calc_cadence_clock = current_time + calc_cadence_period;
     806:	80 91 42 01 	lds	r24, 0x0142
     80a:	90 91 43 01 	lds	r25, 0x0143
     80e:	aa 27       	eor	r26, r26
     810:	97 fd       	sbrc	r25, 7
     812:	a0 95       	com	r26
     814:	ba 2f       	mov	r27, r26
     816:	86 0d       	add	r24, r6
     818:	97 1d       	adc	r25, r7
     81a:	a8 1d       	adc	r26, r8
     81c:	b9 1d       	adc	r27, r9
     81e:	80 93 ea 01 	sts	0x01EA, r24
     822:	90 93 eb 01 	sts	0x01EB, r25
     826:	a0 93 ec 01 	sts	0x01EC, r26
     82a:	b0 93 ed 01 	sts	0x01ED, r27
			calculate_cadence(current_time, &cadence_enc);
     82e:	c4 01       	movw	r24, r8
     830:	b3 01       	movw	r22, r6
     832:	46 eb       	ldi	r20, 0xB6	; 182
     834:	53 e0       	ldi	r21, 0x03	; 3
     836:	0e 94 31 01 	call	0x262	; 0x262 <_Z17calculate_cadencemP14encoder_struct>
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }

		if(current_time >= update_display_clock){
     83a:	80 91 f2 01 	lds	r24, 0x01F2
     83e:	90 91 f3 01 	lds	r25, 0x01F3
     842:	a0 91 f4 01 	lds	r26, 0x01F4
     846:	b0 91 f5 01 	lds	r27, 0x01F5
     84a:	68 16       	cp	r6, r24
     84c:	79 06       	cpc	r7, r25
     84e:	8a 06       	cpc	r8, r26
     850:	9b 06       	cpc	r9, r27
     852:	30 f1       	brcs	.+76     	; 0x8a0 <loop+0x17c>
			update_display_clock = current_time + update_display_period;
     854:	80 91 40 01 	lds	r24, 0x0140
     858:	90 91 41 01 	lds	r25, 0x0141
     85c:	aa 27       	eor	r26, r26
     85e:	97 fd       	sbrc	r25, 7
     860:	a0 95       	com	r26
     862:	ba 2f       	mov	r27, r26
     864:	86 0d       	add	r24, r6
     866:	97 1d       	adc	r25, r7
     868:	a8 1d       	adc	r26, r8
     86a:	b9 1d       	adc	r27, r9
     86c:	80 93 f2 01 	sts	0x01F2, r24
     870:	90 93 f3 01 	sts	0x01F3, r25
     874:	a0 93 f4 01 	sts	0x01F4, r26
     878:	b0 93 f5 01 	sts	0x01F5, r27
			showLED(60*cadence_enc.hertz,4);
     87c:	60 91 c2 03 	lds	r22, 0x03C2
     880:	70 91 c3 03 	lds	r23, 0x03C3
     884:	80 91 c4 03 	lds	r24, 0x03C4
     888:	90 91 c5 03 	lds	r25, 0x03C5
     88c:	2c e3       	ldi	r18, 0x3C	; 60
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__mulsi3>
     898:	44 e0       	ldi	r20, 0x04	; 4
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	0e 94 89 02 	call	0x512	; 0x512 <_Z7showLEDli>
//			showLED((long int)pulser.pulse_up_period * 1000, 4);
//			showLED(dimmer_pct * 100, 4);
//			showLED(dimmer_cts * 1000, 4);
		}
		if(current_time >= post_to_serial_clock){
     8a0:	80 91 f6 01 	lds	r24, 0x01F6
     8a4:	90 91 f7 01 	lds	r25, 0x01F7
     8a8:	a0 91 f8 01 	lds	r26, 0x01F8
     8ac:	b0 91 f9 01 	lds	r27, 0x01F9
     8b0:	68 16       	cp	r6, r24
     8b2:	79 06       	cpc	r7, r25
     8b4:	8a 06       	cpc	r8, r26
     8b6:	9b 06       	cpc	r9, r27
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <loop+0x198>
     8ba:	80 c0       	rjmp	.+256    	; 0x9bc <__stack+0xbd>
			post_to_serial_clock = current_time + post_to_serial_period;
     8bc:	80 91 44 01 	lds	r24, 0x0144
     8c0:	90 91 45 01 	lds	r25, 0x0145
     8c4:	aa 27       	eor	r26, r26
     8c6:	97 fd       	sbrc	r25, 7
     8c8:	a0 95       	com	r26
     8ca:	ba 2f       	mov	r27, r26
     8cc:	86 0d       	add	r24, r6
     8ce:	97 1d       	adc	r25, r7
     8d0:	a8 1d       	adc	r26, r8
     8d2:	b9 1d       	adc	r27, r9
     8d4:	80 93 f6 01 	sts	0x01F6, r24
     8d8:	90 93 f7 01 	sts	0x01F7, r25
     8dc:	a0 93 f8 01 	sts	0x01F8, r26
     8e0:	b0 93 f9 01 	sts	0x01F9, r27
//			Serial.write("<r>");
//			Serial.write(cadence_enc.hertz / 1000);
//			Serial.write(".");
//			Serial.write(cadence_enc.hertz % 1000);
			sprintf(outputbuffer, "<r>%lu.%03lu\t%ld.%03ld</r>\n", current_time/1000,
					current_time % 1000, (60*cadence_enc.hertz)/1000, (60*cadence_enc.hertz) % 1000);
     8e4:	60 91 c2 03 	lds	r22, 0x03C2
     8e8:	70 91 c3 03 	lds	r23, 0x03C3
     8ec:	80 91 c4 03 	lds	r24, 0x03C4
     8f0:	90 91 c5 03 	lds	r25, 0x03C5
     8f4:	2c e3       	ldi	r18, 0x3C	; 60
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__mulsi3>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	8d b7       	in	r24, 0x3d	; 61
     906:	9e b7       	in	r25, 0x3e	; 62
     908:	44 97       	sbiw	r24, 0x14	; 20
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	9e bf       	out	0x3e, r25	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	8d bf       	out	0x3d, r24	; 61
     914:	0d b7       	in	r16, 0x3d	; 61
     916:	1e b7       	in	r17, 0x3e	; 62
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	9e ed       	ldi	r25, 0xDE	; 222
     91e:	a9 2e       	mov	r10, r25
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	b9 2e       	mov	r11, r25
     924:	ed b7       	in	r30, 0x3d	; 61
     926:	fe b7       	in	r31, 0x3e	; 62
     928:	b2 82       	std	Z+2, r11	; 0x02
     92a:	a1 82       	std	Z+1, r10	; 0x01
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	f8 01       	movw	r30, r16
     932:	93 83       	std	Z+3, r25	; 0x03
     934:	82 83       	std	Z+2, r24	; 0x02
     936:	c4 01       	movw	r24, r8
     938:	b3 01       	movw	r22, r6
     93a:	28 ee       	ldi	r18, 0xE8	; 232
     93c:	33 e0       	ldi	r19, 0x03	; 3
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
     946:	f8 01       	movw	r30, r16
     948:	24 83       	std	Z+4, r18	; 0x04
     94a:	35 83       	std	Z+5, r19	; 0x05
     94c:	46 83       	std	Z+6, r20	; 0x06
     94e:	57 83       	std	Z+7, r21	; 0x07
     950:	c4 01       	movw	r24, r8
     952:	b3 01       	movw	r22, r6
     954:	28 ee       	ldi	r18, 0xE8	; 232
     956:	33 e0       	ldi	r19, 0x03	; 3
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
     960:	f8 01       	movw	r30, r16
     962:	60 87       	std	Z+8, r22	; 0x08
     964:	71 87       	std	Z+9, r23	; 0x09
     966:	82 87       	std	Z+10, r24	; 0x0a
     968:	93 87       	std	Z+11, r25	; 0x0b
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	28 ee       	ldi	r18, 0xE8	; 232
     970:	33 e0       	ldi	r19, 0x03	; 3
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     97a:	f8 01       	movw	r30, r16
     97c:	24 87       	std	Z+12, r18	; 0x0c
     97e:	35 87       	std	Z+13, r19	; 0x0d
     980:	46 87       	std	Z+14, r20	; 0x0e
     982:	57 87       	std	Z+15, r21	; 0x0f
     984:	c7 01       	movw	r24, r14
     986:	b6 01       	movw	r22, r12
     988:	28 ee       	ldi	r18, 0xE8	; 232
     98a:	33 e0       	ldi	r19, 0x03	; 3
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
     994:	f8 01       	movw	r30, r16
     996:	60 8b       	std	Z+16, r22	; 0x10
     998:	71 8b       	std	Z+17, r23	; 0x11
     99a:	82 8b       	std	Z+18, r24	; 0x12
     99c:	93 8b       	std	Z+19, r25	; 0x13
     99e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <sprintf>
			Serial.write(outputbuffer);
     9a2:	8d b7       	in	r24, 0x3d	; 61
     9a4:	9e b7       	in	r25, 0x3e	; 62
     9a6:	44 96       	adiw	r24, 0x14	; 20
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	9e bf       	out	0x3e, r25	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	8d bf       	out	0x3d, r24	; 61
     9b2:	8c e5       	ldi	r24, 0x5C	; 92
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	b5 01       	movw	r22, r10
     9b8:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN5Print5writeEPKc>
		}
  }
}
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	08 95       	ret

000009d6 <_Z11initLedDispv>:
		array[i] = -(int)((double)peak_value*0.5*(cos((pi/(double)array_length)*(double)i) - 1.0));
	}
}

// a little setup code for the LED display
void initLedDisp() {
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
	ledDisplay.shutdown(0, false);
     9da:	0e e5       	ldi	r16, 0x5E	; 94
     9dc:	13 e0       	ldi	r17, 0x03	; 3
     9de:	c8 01       	movw	r24, r16
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN10LedControl8shutdownEib>
	ledDisplay.setIntensity(0, 12);
     9ea:	c8 01       	movw	r24, r16
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4c e0       	ldi	r20, 0x0C	; 12
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN10LedControl12setIntensityEii>
	ledDisplay.clearDisplay(0);
     9f8:	c8 01       	movw	r24, r16
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN10LedControl12clearDisplayEi>
}
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <_Z12init_impulsePiii>:
  pulser.offset_time = 0; // start pulse at beginning of each carrier period

  init_impulse(impulse_array, impulse_num_samples, 255);
}

void init_impulse(int * array, int array_length, int peak_value){
     a08:	2f 92       	push	r2
     a0a:	3f 92       	push	r3
     a0c:	4f 92       	push	r4
     a0e:	5f 92       	push	r5
     a10:	6f 92       	push	r6
     a12:	7f 92       	push	r7
     a14:	8f 92       	push	r8
     a16:	9f 92       	push	r9
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <_Z12init_impulsePiii+0x26>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <_Z12init_impulsePiii+0x28>
     a30:	00 d0       	rcall	.+0      	; 0xa32 <_Z12init_impulsePiii+0x2a>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	7c 83       	std	Y+4, r23	; 0x04
     a38:	6b 83       	std	Y+3, r22	; 0x03
     a3a:	9a 83       	std	Y+2, r25	; 0x02
     a3c:	89 83       	std	Y+1, r24	; 0x01
     a3e:	1e 82       	std	Y+6, r1	; 0x06
     a40:	1d 82       	std	Y+5, r1	; 0x05
	int i = 0;
	for(i = 0; i < array_length; i ++){
//		array[i] = (int)((double)peak_value*0.5*(cos((2.0*pi*(double)i)/(double)array_length - pi) + 1.0));
		array[i] = -(int)((double)peak_value*0.5*(cos((pi/(double)array_length)*(double)i) - 1.0));
     a42:	1b 01       	movw	r2, r22
     a44:	44 24       	eor	r4, r4
     a46:	37 fc       	sbrc	r3, 7
     a48:	40 94       	com	r4
     a4a:	54 2c       	mov	r5, r4
     a4c:	3a 01       	movw	r6, r20
     a4e:	88 24       	eor	r8, r8
     a50:	77 fc       	sbrc	r7, 7
     a52:	80 94       	com	r8
     a54:	98 2c       	mov	r9, r8
     a56:	4c c0       	rjmp	.+152    	; 0xaf0 <_Z12init_impulsePiii+0xe8>
     a58:	c2 01       	movw	r24, r4
     a5a:	b1 01       	movw	r22, r2
     a5c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__floatsisf>
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	6b ed       	ldi	r22, 0xDB	; 219
     a66:	7f e0       	ldi	r23, 0x0F	; 15
     a68:	89 e4       	ldi	r24, 0x49	; 73
     a6a:	90 e4       	ldi	r25, 0x40	; 64
     a6c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__divsf3>
     a70:	7b 01       	movw	r14, r22
     a72:	8c 01       	movw	r16, r24
     a74:	2d 81       	ldd	r18, Y+5	; 0x05
     a76:	3e 81       	ldd	r19, Y+6	; 0x06
     a78:	b9 01       	movw	r22, r18
     a7a:	88 27       	eor	r24, r24
     a7c:	77 fd       	sbrc	r23, 7
     a7e:	80 95       	com	r24
     a80:	98 2f       	mov	r25, r24
     a82:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__floatsisf>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	c8 01       	movw	r24, r16
     a8c:	b7 01       	movw	r22, r14
     a8e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__mulsf3>
     a92:	0e 94 de 0c 	call	0x19bc	; 0x19bc <cos>
     a96:	5b 01       	movw	r10, r22
     a98:	6c 01       	movw	r12, r24
     a9a:	c4 01       	movw	r24, r8
     a9c:	b3 01       	movw	r22, r6
     a9e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__floatsisf>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__mulsf3>
     aae:	7b 01       	movw	r14, r22
     ab0:	8c 01       	movw	r16, r24
     ab2:	c6 01       	movw	r24, r12
     ab4:	b5 01       	movw	r22, r10
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e8       	ldi	r20, 0x80	; 128
     abc:	5f e3       	ldi	r21, 0x3F	; 63
     abe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__subsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c8 01       	movw	r24, r16
     ac8:	b7 01       	movw	r22, r14
     aca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__mulsf3>
     ace:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__fixsfsi>
     ad2:	70 95       	com	r23
     ad4:	61 95       	neg	r22
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	e9 81       	ldd	r30, Y+1	; 0x01
     ada:	fa 81       	ldd	r31, Y+2	; 0x02
     adc:	61 93       	st	Z+, r22
     ade:	71 93       	st	Z+, r23
     ae0:	fa 83       	std	Y+2, r31	; 0x02
     ae2:	e9 83       	std	Y+1, r30	; 0x01
  init_impulse(impulse_array, impulse_num_samples, 255);
}

void init_impulse(int * array, int array_length, int peak_value){
	int i = 0;
	for(i = 0; i < array_length; i ++){
     ae4:	2d 81       	ldd	r18, Y+5	; 0x05
     ae6:	3e 81       	ldd	r19, Y+6	; 0x06
     ae8:	2f 5f       	subi	r18, 0xFF	; 255
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	3e 83       	std	Y+6, r19	; 0x06
     aee:	2d 83       	std	Y+5, r18	; 0x05
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	eb 81       	ldd	r30, Y+3	; 0x03
     af6:	fc 81       	ldd	r31, Y+4	; 0x04
     af8:	8e 17       	cp	r24, r30
     afa:	9f 07       	cpc	r25, r31
     afc:	0c f4       	brge	.+2      	; 0xb00 <_Z12init_impulsePiii+0xf8>
     afe:	ac cf       	rjmp	.-168    	; 0xa58 <_Z12init_impulsePiii+0x50>
//		array[i] = (int)((double)peak_value*0.5*(cos((2.0*pi*(double)i)/(double)array_length - pi) + 1.0));
		array[i] = -(int)((double)peak_value*0.5*(cos((pi/(double)array_length)*(double)i) - 1.0));
	}
}
     b00:	26 96       	adiw	r28, 0x06	; 6
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	7f 90       	pop	r7
     b26:	6f 90       	pop	r6
     b28:	5f 90       	pop	r5
     b2a:	4f 90       	pop	r4
     b2c:	3f 90       	pop	r3
     b2e:	2f 90       	pop	r2
     b30:	08 95       	ret

00000b32 <setup>:
// instantiate LED Display controller -- the 4th argument is the number of displays
LedControl ledDisplay = LedControl(LED_DATA_PIN, LED_CLOCK_PIN, LED_CSLOAD_PIN, 1);
encoder_struct cadence_enc;
current_sensor_struct current_sensor;

void setup() {
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
	Serial.begin(115200);
     b36:	0c e5       	ldi	r16, 0x5C	; 92
     b38:	14 e0       	ldi	r17, 0x04	; 4
     b3a:	c8 01       	movw	r24, r16
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	52 ec       	ldi	r21, 0xC2	; 194
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN14HardwareSerial5beginEm>
	Serial.write("<h>time\tspeed</h>\n");
     b48:	c8 01       	movw	r24, r16
     b4a:	6c e1       	ldi	r22, 0x1C	; 28
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN5Print5writeEPKc>
	Serial.write("<u>ms\trpm</u>\n");
     b52:	c8 01       	movw	r24, r16
     b54:	6f e2       	ldi	r22, 0x2F	; 47
     b56:	71 e0       	ldi	r23, 0x01	; 1
     b58:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN5Print5writeEPKc>
  pinMode(LED_PWM_PIN, OUTPUT);
     b5c:	8b e0       	ldi	r24, 0x0B	; 11
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
  //pinMode(POT_PIN, INPUT);
  pinMode(INTERRUPTER_PIN, INPUT);
     b64:	87 e0       	ldi	r24, 0x07	; 7
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
  pinMode(LED_PIN, OUTPUT);
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
  initLedDisp();
     b74:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z11initLedDispv>
  blink_clock = millis();
     b78:	0e 94 9f 0a 	call	0x153e	; 0x153e <millis>
     b7c:	60 93 e6 01 	sts	0x01E6, r22
     b80:	70 93 e7 01 	sts	0x01E7, r23
     b84:	80 93 e8 01 	sts	0x01E8, r24
     b88:	90 93 e9 01 	sts	0x01E9, r25
  cadence_enc.max_hertz = 5;
     b8c:	25 e0       	ldi	r18, 0x05	; 5
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	30 93 c1 03 	sts	0x03C1, r19
     b94:	20 93 c0 03 	sts	0x03C0, r18
  cadence_enc.max_period = 5000;
     b98:	48 e8       	ldi	r20, 0x88	; 136
     b9a:	53 e1       	ldi	r21, 0x13	; 19
     b9c:	50 93 cf 03 	sts	0x03CF, r21
     ba0:	40 93 ce 03 	sts	0x03CE, r20
  cadence_enc.pin_num = INTERRUPTER_PIN;
     ba4:	87 e0       	ldi	r24, 0x07	; 7
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	90 93 c7 03 	sts	0x03C7, r25
     bac:	80 93 c6 03 	sts	0x03C6, r24
  cadence_enc.debounce_min = 5;
     bb0:	30 93 b9 03 	sts	0x03B9, r19
     bb4:	20 93 b8 03 	sts	0x03B8, r18
  cadence_enc.alpha = 800;
     bb8:	80 e2       	ldi	r24, 0x20	; 32
     bba:	93 e0       	ldi	r25, 0x03	; 3
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	80 93 d0 03 	sts	0x03D0, r24
     bc4:	90 93 d1 03 	sts	0x03D1, r25
     bc8:	a0 93 d2 03 	sts	0x03D2, r26
     bcc:	b0 93 d3 03 	sts	0x03D3, r27
  cadence_enc.cts_per_rev = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	90 93 cb 03 	sts	0x03CB, r25
     bd8:	80 93 ca 03 	sts	0x03CA, r24
  cadence_enc.hertz = 0;
     bdc:	10 92 c2 03 	sts	0x03C2, r1
     be0:	10 92 c3 03 	sts	0x03C3, r1
     be4:	10 92 c4 03 	sts	0x03C4, r1
     be8:	10 92 c5 03 	sts	0x03C5, r1

  pulser.carrier_clock = 0;
     bec:	10 92 cc 02 	sts	0x02CC, r1
     bf0:	10 92 cd 02 	sts	0x02CD, r1
     bf4:	10 92 ce 02 	sts	0x02CE, r1
     bf8:	10 92 cf 02 	sts	0x02CF, r1
  pulser.carrier_period = 5000;
     bfc:	50 93 c3 02 	sts	0x02C3, r21
     c00:	40 93 c2 02 	sts	0x02C2, r20
  pulser.step_clock = 0;
     c04:	10 92 d4 02 	sts	0x02D4, r1
     c08:	10 92 d5 02 	sts	0x02D5, r1
     c0c:	10 92 d6 02 	sts	0x02D6, r1
     c10:	10 92 d7 02 	sts	0x02D7, r1
  pulser.pulse_up_period = 1000;
     c14:	88 ee       	ldi	r24, 0xE8	; 232
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	90 93 c5 02 	sts	0x02C5, r25
     c1c:	80 93 c4 02 	sts	0x02C4, r24
  pulser.pulse_down_period = 3500;
     c20:	8c ea       	ldi	r24, 0xAC	; 172
     c22:	9d e0       	ldi	r25, 0x0D	; 13
     c24:	90 93 c7 02 	sts	0x02C7, r25
     c28:	80 93 c6 02 	sts	0x02C6, r24
  pulser.step_period_up = pulser.pulse_up_period / impulse_num_samples;
     c2c:	8a e0       	ldi	r24, 0x0A	; 10
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	90 93 c9 02 	sts	0x02C9, r25
     c34:	80 93 c8 02 	sts	0x02C8, r24
  pulser.step_period_down = pulser.pulse_down_period / impulse_num_samples;
     c38:	83 e2       	ldi	r24, 0x23	; 35
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	90 93 cb 02 	sts	0x02CB, r25
     c40:	80 93 ca 02 	sts	0x02CA, r24
  pulser.index = 0;
     c44:	10 92 d9 02 	sts	0x02D9, r1
     c48:	10 92 d8 02 	sts	0x02D8, r1
  pulser.offset_time = 0; // start pulse at beginning of each carrier period
     c4c:	10 92 db 02 	sts	0x02DB, r1
     c50:	10 92 da 02 	sts	0x02DA, r1

  init_impulse(impulse_array, impulse_num_samples, 255);
     c54:	8a ef       	ldi	r24, 0xFA	; 250
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	64 e6       	ldi	r22, 0x64	; 100
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	4f ef       	ldi	r20, 0xFF	; 255
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12init_impulsePiii>
}
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     c6a:	08 95       	ret

00000c6c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     c84:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c88:	20 91 14 04 	lds	r18, 0x0414
     c8c:	30 91 15 04 	lds	r19, 0x0415
     c90:	2f 5f       	subi	r18, 0xFF	; 255
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	2f 73       	andi	r18, 0x3F	; 63
     c96:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     c98:	80 91 16 04 	lds	r24, 0x0416
     c9c:	90 91 17 04 	lds	r25, 0x0417
     ca0:	28 17       	cp	r18, r24
     ca2:	39 07       	cpc	r19, r25
     ca4:	59 f0       	breq	.+22     	; 0xcbc <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
     ca6:	e0 91 14 04 	lds	r30, 0x0414
     caa:	f0 91 15 04 	lds	r31, 0x0415
     cae:	ec 52       	subi	r30, 0x2C	; 44
     cb0:	fc 4f       	sbci	r31, 0xFC	; 252
     cb2:	40 83       	st	Z, r20
    buffer->head = i;
     cb4:	30 93 15 04 	sts	0x0415, r19
     cb8:	20 93 14 04 	sts	0x0414, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	0f 90       	pop	r0
     cd0:	1f 90       	pop	r1
     cd2:	18 95       	reti

00000cd4 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     cd4:	e0 91 68 04 	lds	r30, 0x0468
     cd8:	f0 91 69 04 	lds	r31, 0x0469
     cdc:	e0 5c       	subi	r30, 0xC0	; 192
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	81 91       	ld	r24, Z+
     ce2:	91 91       	ld	r25, Z+
     ce4:	20 81       	ld	r18, Z
     ce6:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     ce8:	82 1b       	sub	r24, r18
     cea:	93 0b       	sbc	r25, r19
     cec:	8f 73       	andi	r24, 0x3F	; 63
     cee:	90 70       	andi	r25, 0x00	; 0
     cf0:	89 2b       	or	r24, r25
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <_Z14serialEventRunv+0x24>
     cf4:	0e 94 35 06 	call	0xc6a	; 0xc6a <_Z11serialEventv>
     cf8:	08 95       	ret

00000cfa <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	2f 93       	push	r18
     d06:	3f 93       	push	r19
     d08:	4f 93       	push	r20
     d0a:	5f 93       	push	r21
     d0c:	6f 93       	push	r22
     d0e:	7f 93       	push	r23
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
     d14:	af 93       	push	r26
     d16:	bf 93       	push	r27
     d18:	ef 93       	push	r30
     d1a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     d1c:	20 91 58 04 	lds	r18, 0x0458
     d20:	30 91 59 04 	lds	r19, 0x0459
     d24:	80 91 5a 04 	lds	r24, 0x045A
     d28:	90 91 5b 04 	lds	r25, 0x045B
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	31 f4       	brne	.+12     	; 0xd3e <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     d32:	80 91 c1 00 	lds	r24, 0x00C1
     d36:	8f 7d       	andi	r24, 0xDF	; 223
     d38:	80 93 c1 00 	sts	0x00C1, r24
     d3c:	16 c0       	rjmp	.+44     	; 0xd6a <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     d3e:	e0 91 5a 04 	lds	r30, 0x045A
     d42:	f0 91 5b 04 	lds	r31, 0x045B
     d46:	e8 5e       	subi	r30, 0xE8	; 232
     d48:	fb 4f       	sbci	r31, 0xFB	; 251
     d4a:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     d4c:	80 91 5a 04 	lds	r24, 0x045A
     d50:	90 91 5b 04 	lds	r25, 0x045B
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	60 e4       	ldi	r22, 0x40	; 64
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divmodhi4>
     d5e:	90 93 5b 04 	sts	0x045B, r25
     d62:	80 93 5a 04 	sts	0x045A, r24
	
  #if defined(UDR0)
    UDR0 = c;
     d66:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     d8c:	af 92       	push	r10
     d8e:	bf 92       	push	r11
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
     da0:	7a 01       	movw	r14, r20
     da2:	8b 01       	movw	r16, r22
     da4:	dd 24       	eor	r13, r13
     da6:	40 30       	cpi	r20, 0x00	; 0
     da8:	81 ee       	ldi	r24, 0xE1	; 225
     daa:	58 07       	cpc	r21, r24
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	68 07       	cpc	r22, r24
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	78 07       	cpc	r23, r24
     db4:	11 f0       	breq	.+4      	; 0xdba <_ZN14HardwareSerial5beginEm+0x2e>
     db6:	dd 24       	eor	r13, r13
     db8:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	a9 2e       	mov	r10, r25
     dbe:	b1 2c       	mov	r11, r1
     dc0:	ec 89       	ldd	r30, Y+20	; 0x14
     dc2:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     dc4:	dd 20       	and	r13, r13
     dc6:	69 f0       	breq	.+26     	; 0xde2 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     dc8:	c5 01       	movw	r24, r10
     dca:	0e 8c       	ldd	r0, Y+30	; 0x1e
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <_ZN14HardwareSerial5beginEm+0x46>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <_ZN14HardwareSerial5beginEm+0x42>
     dd6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	79 e0       	ldi	r23, 0x09	; 9
     ddc:	8d e3       	ldi	r24, 0x3D	; 61
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     de2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     de4:	60 e8       	ldi	r22, 0x80	; 128
     de6:	74 e8       	ldi	r23, 0x84	; 132
     de8:	8e e1       	ldi	r24, 0x1E	; 30
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a8 01       	movw	r20, r16
     dee:	97 01       	movw	r18, r14
     df0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	30 40       	sbci	r19, 0x00	; 0
     df8:	40 40       	sbci	r20, 0x00	; 0
     dfa:	50 40       	sbci	r21, 0x00	; 0
     dfc:	56 95       	lsr	r21
     dfe:	47 95       	ror	r20
     e00:	37 95       	ror	r19
     e02:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     e04:	80 e1       	ldi	r24, 0x10	; 16
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	38 07       	cpc	r19, r24
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <_ZN14HardwareSerial5beginEm+0x88>
     e0c:	dd 20       	and	r13, r13
     e0e:	11 f0       	breq	.+4      	; 0xe14 <_ZN14HardwareSerial5beginEm+0x88>
     e10:	dd 24       	eor	r13, r13
     e12:	d6 cf       	rjmp	.-84     	; 0xdc0 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e14:	e8 89       	ldd	r30, Y+16	; 0x10
     e16:	f9 89       	ldd	r31, Y+17	; 0x11
     e18:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     e1a:	ea 89       	ldd	r30, Y+18	; 0x12
     e1c:	fb 89       	ldd	r31, Y+19	; 0x13
     e1e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     e20:	ee 89       	ldd	r30, Y+22	; 0x16
     e22:	ff 89       	ldd	r31, Y+23	; 0x17
     e24:	40 81       	ld	r20, Z
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	c9 01       	movw	r24, r18
     e2c:	0a 8c       	ldd	r0, Y+26	; 0x1a
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <_ZN14HardwareSerial5beginEm+0xa8>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <_ZN14HardwareSerial5beginEm+0xa4>
     e38:	48 2b       	or	r20, r24
     e3a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     e3c:	ee 89       	ldd	r30, Y+22	; 0x16
     e3e:	ff 89       	ldd	r31, Y+23	; 0x17
     e40:	40 81       	ld	r20, Z
     e42:	c9 01       	movw	r24, r18
     e44:	0b 8c       	ldd	r0, Y+27	; 0x1b
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <_ZN14HardwareSerial5beginEm+0xc0>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <_ZN14HardwareSerial5beginEm+0xbc>
     e50:	48 2b       	or	r20, r24
     e52:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     e54:	ee 89       	ldd	r30, Y+22	; 0x16
     e56:	ff 89       	ldd	r31, Y+23	; 0x17
     e58:	40 81       	ld	r20, Z
     e5a:	c9 01       	movw	r24, r18
     e5c:	0c 8c       	ldd	r0, Y+28	; 0x1c
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <_ZN14HardwareSerial5beginEm+0xd8>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <_ZN14HardwareSerial5beginEm+0xd4>
     e68:	48 2b       	or	r20, r24
     e6a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     e6c:	ee 89       	ldd	r30, Y+22	; 0x16
     e6e:	ff 89       	ldd	r31, Y+23	; 0x17
     e70:	80 81       	ld	r24, Z
     e72:	0d 8c       	ldd	r0, Y+29	; 0x1d
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <_ZN14HardwareSerial5beginEm+0xee>
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <_ZN14HardwareSerial5beginEm+0xea>
     e7e:	20 95       	com	r18
     e80:	28 23       	and	r18, r24
     e82:	20 83       	st	Z, r18
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	08 95       	ret

00000e98 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     e98:	dc 01       	movw	r26, r24
     e9a:	1c 96       	adiw	r26, 0x0c	; 12
     e9c:	ed 91       	ld	r30, X+
     e9e:	fc 91       	ld	r31, X
     ea0:	1d 97       	sbiw	r26, 0x0d	; 13
     ea2:	e0 5c       	subi	r30, 0xC0	; 192
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	21 91       	ld	r18, Z+
     ea8:	31 91       	ld	r19, Z+
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	28 1b       	sub	r18, r24
     eb0:	39 0b       	sbc	r19, r25
     eb2:	2f 73       	andi	r18, 0x3F	; 63
     eb4:	30 70       	andi	r19, 0x00	; 0
}
     eb6:	c9 01       	movw	r24, r18
     eb8:	08 95       	ret

00000eba <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     eba:	dc 01       	movw	r26, r24
     ebc:	1c 96       	adiw	r26, 0x0c	; 12
     ebe:	ed 91       	ld	r30, X+
     ec0:	fc 91       	ld	r31, X
     ec2:	1d 97       	sbiw	r26, 0x0d	; 13
     ec4:	e0 5c       	subi	r30, 0xC0	; 192
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	20 81       	ld	r18, Z
     eca:	31 81       	ldd	r19, Z+1	; 0x01
     ecc:	e0 54       	subi	r30, 0x40	; 64
     ece:	f0 40       	sbci	r31, 0x00	; 0
     ed0:	df 01       	movw	r26, r30
     ed2:	ae 5b       	subi	r26, 0xBE	; 190
     ed4:	bf 4f       	sbci	r27, 0xFF	; 255
     ed6:	8d 91       	ld	r24, X+
     ed8:	9c 91       	ld	r25, X
     eda:	11 97       	sbiw	r26, 0x01	; 1
     edc:	28 17       	cp	r18, r24
     ede:	39 07       	cpc	r19, r25
     ee0:	19 f4       	brne	.+6      	; 0xee8 <_ZN14HardwareSerial4peekEv+0x2e>
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     ee8:	8d 91       	ld	r24, X+
     eea:	9c 91       	ld	r25, X
     eec:	e8 0f       	add	r30, r24
     eee:	f9 1f       	adc	r31, r25
     ef0:	80 81       	ld	r24, Z
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     ef6:	c9 01       	movw	r24, r18
     ef8:	08 95       	ret

00000efa <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     efa:	dc 01       	movw	r26, r24
     efc:	1c 96       	adiw	r26, 0x0c	; 12
     efe:	ed 91       	ld	r30, X+
     f00:	fc 91       	ld	r31, X
     f02:	1d 97       	sbiw	r26, 0x0d	; 13
     f04:	e0 5c       	subi	r30, 0xC0	; 192
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	20 81       	ld	r18, Z
     f0a:	31 81       	ldd	r19, Z+1	; 0x01
     f0c:	e0 54       	subi	r30, 0x40	; 64
     f0e:	f0 40       	sbci	r31, 0x00	; 0
     f10:	df 01       	movw	r26, r30
     f12:	ae 5b       	subi	r26, 0xBE	; 190
     f14:	bf 4f       	sbci	r27, 0xFF	; 255
     f16:	8d 91       	ld	r24, X+
     f18:	9c 91       	ld	r25, X
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	19 f4       	brne	.+6      	; 0xf28 <_ZN14HardwareSerial4readEv+0x2e>
     f22:	2f ef       	ldi	r18, 0xFF	; 255
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	10 c0       	rjmp	.+32     	; 0xf48 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	11 97       	sbiw	r26, 0x01	; 1
     f2e:	e8 0f       	add	r30, r24
     f30:	f9 1f       	adc	r31, r25
     f32:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     f34:	8d 91       	ld	r24, X+
     f36:	9c 91       	ld	r25, X
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	8f 73       	andi	r24, 0x3F	; 63
     f3e:	90 70       	andi	r25, 0x00	; 0
     f40:	11 96       	adiw	r26, 0x01	; 1
     f42:	9c 93       	st	X, r25
     f44:	8e 93       	st	-X, r24
    return c;
     f46:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     f48:	c9 01       	movw	r24, r18
     f4a:	08 95       	ret

00000f4c <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     f4c:	fc 01       	movw	r30, r24
     f4e:	86 85       	ldd	r24, Z+14	; 0x0e
     f50:	97 85       	ldd	r25, Z+15	; 0x0f
     f52:	dc 01       	movw	r26, r24
     f54:	a0 5c       	subi	r26, 0xC0	; 192
     f56:	bf 4f       	sbci	r27, 0xFF	; 255
     f58:	fc 01       	movw	r30, r24
     f5a:	ee 5b       	subi	r30, 0xBE	; 190
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	2d 91       	ld	r18, X+
     f60:	3c 91       	ld	r19, X
     f62:	11 97       	sbiw	r26, 0x01	; 1
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	c1 f7       	brne	.-16     	; 0xf5e <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
     f6e:	08 95       	ret

00000f70 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     f78:	ee 85       	ldd	r30, Y+14	; 0x0e
     f7a:	ff 85       	ldd	r31, Y+15	; 0x0f
     f7c:	e0 5c       	subi	r30, 0xC0	; 192
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	e0 54       	subi	r30, 0x40	; 64
     f86:	f0 40       	sbci	r31, 0x00	; 0
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	60 e4       	ldi	r22, 0x40	; 64
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divmodhi4>
     f92:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     f94:	df 01       	movw	r26, r30
     f96:	ae 5b       	subi	r26, 0xBE	; 190
     f98:	bf 4f       	sbci	r27, 0xFF	; 255
     f9a:	8d 91       	ld	r24, X+
     f9c:	9c 91       	ld	r25, X
     f9e:	11 97       	sbiw	r26, 0x01	; 1
     fa0:	28 17       	cp	r18, r24
     fa2:	39 07       	cpc	r19, r25
     fa4:	d1 f3       	breq	.-12     	; 0xf9a <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     fa6:	e0 5c       	subi	r30, 0xC0	; 192
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	e0 54       	subi	r30, 0x40	; 64
     fb0:	f0 40       	sbci	r31, 0x00	; 0
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	40 83       	st	Z, r20
  _tx_buffer->head = i;
     fb8:	ee 85       	ldd	r30, Y+14	; 0x0e
     fba:	ff 85       	ldd	r31, Y+15	; 0x0f
     fbc:	e0 5c       	subi	r30, 0xC0	; 192
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	31 83       	std	Z+1, r19	; 0x01
     fc2:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     fc4:	ee 89       	ldd	r30, Y+22	; 0x16
     fc6:	ff 89       	ldd	r31, Y+23	; 0x17
     fc8:	20 81       	ld	r18, Z
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0d 8c       	ldd	r0, Y+29	; 0x1d
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <_ZN14HardwareSerial5writeEh+0x66>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <_ZN14HardwareSerial5writeEh+0x62>
     fda:	28 2b       	or	r18, r24
     fdc:	20 83       	st	Z, r18
  
  return 1;
}
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fe8:	10 92 5f 04 	sts	0x045F, r1
     fec:	10 92 5e 04 	sts	0x045E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     ff0:	88 ee       	ldi	r24, 0xE8	; 232
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	80 93 60 04 	sts	0x0460, r24
     ffc:	90 93 61 04 	sts	0x0461, r25
    1000:	a0 93 62 04 	sts	0x0462, r26
    1004:	b0 93 63 04 	sts	0x0463, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1008:	8b e4       	ldi	r24, 0x4B	; 75
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	90 93 5d 04 	sts	0x045D, r25
    1010:	80 93 5c 04 	sts	0x045C, r24
{
  _rx_buffer = rx_buffer;
    1014:	84 ed       	ldi	r24, 0xD4	; 212
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	90 93 69 04 	sts	0x0469, r25
    101c:	80 93 68 04 	sts	0x0468, r24
  _tx_buffer = tx_buffer;
    1020:	88 e1       	ldi	r24, 0x18	; 24
    1022:	94 e0       	ldi	r25, 0x04	; 4
    1024:	90 93 6b 04 	sts	0x046B, r25
    1028:	80 93 6a 04 	sts	0x046A, r24
  _ubrrh = ubrrh;
    102c:	85 ec       	ldi	r24, 0xC5	; 197
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 6d 04 	sts	0x046D, r25
    1034:	80 93 6c 04 	sts	0x046C, r24
  _ubrrl = ubrrl;
    1038:	84 ec       	ldi	r24, 0xC4	; 196
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	90 93 6f 04 	sts	0x046F, r25
    1040:	80 93 6e 04 	sts	0x046E, r24
  _ucsra = ucsra;
    1044:	80 ec       	ldi	r24, 0xC0	; 192
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	90 93 71 04 	sts	0x0471, r25
    104c:	80 93 70 04 	sts	0x0470, r24
  _ucsrb = ucsrb;
    1050:	81 ec       	ldi	r24, 0xC1	; 193
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	90 93 73 04 	sts	0x0473, r25
    1058:	80 93 72 04 	sts	0x0472, r24
  _udr = udr;
    105c:	86 ec       	ldi	r24, 0xC6	; 198
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	90 93 75 04 	sts	0x0475, r25
    1064:	80 93 74 04 	sts	0x0474, r24
  _rxen = rxen;
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	80 93 76 04 	sts	0x0476, r24
  _txen = txen;
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	80 93 77 04 	sts	0x0477, r24
  _rxcie = rxcie;
    1074:	87 e0       	ldi	r24, 0x07	; 7
    1076:	80 93 78 04 	sts	0x0478, r24
  _udrie = udrie;
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	80 93 79 04 	sts	0x0479, r24
  _u2x = u2x;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 7a 04 	sts	0x047A, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1086:	08 95       	ret

00001088 <_ZN10LedControl11spiTransferEihh>:
	v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
}

void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <_ZN10LedControl11spiTransferEihh+0x1a>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	7c 01       	movw	r14, r24
    10a8:	49 83       	std	Y+1, r20	; 0x01
    10aa:	2a 83       	std	Y+2, r18	; 0x02
    //Create an array with the data to shift out
    int offset=addr*2;
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    int maxbytes=maxDevices*2;
    10b0:	86 e5       	ldi	r24, 0x56	; 86
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	e8 0e       	add	r14, r24
    10b6:	f9 1e       	adc	r15, r25
    10b8:	f7 01       	movw	r30, r14
    10ba:	00 81       	ld	r16, Z
    10bc:	11 81       	ldd	r17, Z+1	; 0x01
    10be:	8a ea       	ldi	r24, 0xAA	; 170
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	e8 0e       	add	r14, r24
    10c4:	f9 1e       	adc	r15, r25
    10c6:	00 0f       	add	r16, r16
    10c8:	11 1f       	adc	r17, r17
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <_ZN10LedControl11spiTransferEihh+0x52>

    for(int i=0;i<maxbytes;i++)
	spidata[i]=(byte)0;
    10d0:	f7 01       	movw	r30, r14
    10d2:	e8 0f       	add	r30, r24
    10d4:	f9 1f       	adc	r31, r25
    10d6:	10 82       	st	Z, r1
void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
    //Create an array with the data to shift out
    int offset=addr*2;
    int maxbytes=maxDevices*2;

    for(int i=0;i<maxbytes;i++)
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	80 17       	cp	r24, r16
    10dc:	91 07       	cpc	r25, r17
    10de:	c4 f3       	brlt	.-16     	; 0x10d0 <_ZN10LedControl11spiTransferEihh+0x48>
	spidata[i]=(byte)0;
    //put our device data into the array
    spidata[offset+1]=opcode;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	f7 01       	movw	r30, r14
    10e4:	e6 0f       	add	r30, r22
    10e6:	f7 1f       	adc	r31, r23
    10e8:	81 83       	std	Z+1, r24	; 0x01
    spidata[offset]=data;
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	80 83       	st	Z, r24
    //enable the line 
    digitalWrite(SPI_CS,LOW);
    10ee:	f7 01       	movw	r30, r14
    10f0:	ec 5a       	subi	r30, 0xAC	; 172
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	80 81       	ld	r24, Z
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
    10fc:	01 50       	subi	r16, 0x01	; 1
    10fe:	10 40       	sbci	r17, 0x00	; 0
    1100:	67 01       	movw	r12, r14
    1102:	c0 0e       	add	r12, r16
    1104:	d1 1e       	adc	r13, r17
    1106:	0f 5f       	subi	r16, 0xFF	; 255
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    //Now shift out the data 
    for(int i=maxbytes;i>0;i--)
 	shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);
    110a:	90 e5       	ldi	r25, 0x50	; 80
    110c:	89 2e       	mov	r8, r25
    110e:	91 2c       	mov	r9, r1
    1110:	8e 0c       	add	r8, r14
    1112:	9f 1c       	adc	r9, r15
    1114:	82 e5       	ldi	r24, 0x52	; 82
    1116:	a8 2e       	mov	r10, r24
    1118:	b1 2c       	mov	r11, r1
    111a:	ae 0c       	add	r10, r14
    111c:	bf 1c       	adc	r11, r15
    111e:	0e c0       	rjmp	.+28     	; 0x113c <_ZN10LedControl11spiTransferEihh+0xb4>
    1120:	01 50       	subi	r16, 0x01	; 1
    1122:	10 40       	sbci	r17, 0x00	; 0
    1124:	f4 01       	movw	r30, r8
    1126:	80 81       	ld	r24, Z
    1128:	f5 01       	movw	r30, r10
    112a:	60 81       	ld	r22, Z
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	f6 01       	movw	r30, r12
    1130:	20 81       	ld	r18, Z
    1132:	0e 94 37 0c 	call	0x186e	; 0x186e <shiftOut>
    1136:	08 94       	sec
    1138:	c1 08       	sbc	r12, r1
    113a:	d1 08       	sbc	r13, r1
    spidata[offset+1]=opcode;
    spidata[offset]=data;
    //enable the line 
    digitalWrite(SPI_CS,LOW);
    //Now shift out the data 
    for(int i=maxbytes;i>0;i--)
    113c:	10 16       	cp	r1, r16
    113e:	11 06       	cpc	r1, r17
    1140:	7c f3       	brlt	.-34     	; 0x1120 <_ZN10LedControl11spiTransferEihh+0x98>
 	shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);
    //latch the data onto the display
    digitalWrite(SPI_CS,HIGH);
    1142:	84 e5       	ldi	r24, 0x54	; 84
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	e8 0e       	add	r14, r24
    1148:	f9 1e       	adc	r15, r25
    114a:	f7 01       	movw	r30, r14
    114c:	80 81       	ld	r24, Z
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
}    
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	08 95       	ret

00001172 <_ZN10LedControl8setDigitEiihh>:
	val=val & 0x01;
	setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
    1172:	0f 93       	push	r16
    1174:	dc 01       	movw	r26, r24
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
    1176:	77 fd       	sbrc	r23, 7
    1178:	25 c0       	rjmp	.+74     	; 0x11c4 <_ZN10LedControl8setDigitEiihh+0x52>
    117a:	aa 5a       	subi	r26, 0xAA	; 170
    117c:	bf 4f       	sbci	r27, 0xFF	; 255
    117e:	8d 91       	ld	r24, X+
    1180:	9c 91       	ld	r25, X
    1182:	11 97       	sbiw	r26, 0x01	; 1
    1184:	a6 55       	subi	r26, 0x56	; 86
    1186:	b0 40       	sbci	r27, 0x00	; 0
    1188:	68 17       	cp	r22, r24
    118a:	79 07       	cpc	r23, r25
    118c:	dc f4       	brge	.+54     	; 0x11c4 <_ZN10LedControl8setDigitEiihh+0x52>
	return;
    if(digit<0 || digit>7 || value>15)
    118e:	48 30       	cpi	r20, 0x08	; 8
    1190:	51 05       	cpc	r21, r1
    1192:	c0 f4       	brcc	.+48     	; 0x11c4 <_ZN10LedControl8setDigitEiihh+0x52>
    1194:	20 31       	cpi	r18, 0x10	; 16
    1196:	b0 f4       	brcc	.+44     	; 0x11c4 <_ZN10LedControl8setDigitEiihh+0x52>
	return;
    offset=addr*8;
    v=charTable[value];
    1198:	e2 2f       	mov	r30, r18
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	e9 5a       	subi	r30, 0xA9	; 169
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	20 81       	ld	r18, Z
    if(dp)
    11a2:	01 11       	cpse	r16, r1
	v|=B10000000;
    11a4:	20 68       	ori	r18, 0x80	; 128
    status[offset+digit]=v;
    11a6:	fb 01       	movw	r30, r22
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	8a 95       	dec	r24
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <_ZN10LedControl8setDigitEiihh+0x38>
    11b2:	ea 0f       	add	r30, r26
    11b4:	fb 1f       	adc	r31, r27
    11b6:	e4 0f       	add	r30, r20
    11b8:	f5 1f       	adc	r31, r21
    11ba:	20 8b       	std	Z+16, r18	; 0x10
    spiTransfer(addr, digit+1,v);
    11bc:	4f 5f       	subi	r20, 0xFF	; 255
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
    
}
    11c4:	0f 91       	pop	r16
    11c6:	08 95       	ret

000011c8 <_ZN10LedControl12clearDisplayEi>:
    if(intensity>=0 || intensity<16)	
	spiTransfer(addr, OP_INTENSITY,intensity);
    
}

void LedControl::clearDisplay(int addr) {
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
    11d8:	7b 01       	movw	r14, r22
    int offset;

    if(addr<0 || addr>=maxDevices)
    11da:	77 fd       	sbrc	r23, 7
    11dc:	22 c0       	rjmp	.+68     	; 0x1222 <_ZN10LedControl12clearDisplayEi+0x5a>
    11de:	ca 5a       	subi	r28, 0xAA	; 170
    11e0:	df 4f       	sbci	r29, 0xFF	; 255
    11e2:	88 81       	ld	r24, Y
    11e4:	99 81       	ldd	r25, Y+1	; 0x01
    11e6:	c6 55       	subi	r28, 0x56	; 86
    11e8:	d0 40       	sbci	r29, 0x00	; 0
    11ea:	68 17       	cp	r22, r24
    11ec:	79 07       	cpc	r23, r25
    11ee:	cc f4       	brge	.+50     	; 0x1222 <_ZN10LedControl12clearDisplayEi+0x5a>
    11f0:	8b 01       	movw	r16, r22
    11f2:	0e 5f       	subi	r16, 0xFE	; 254
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	53 e0       	ldi	r21, 0x03	; 3
    11f8:	00 0f       	add	r16, r16
    11fa:	11 1f       	adc	r17, r17
    11fc:	5a 95       	dec	r21
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <_ZN10LedControl12clearDisplayEi+0x30>
    1200:	0c 0f       	add	r16, r28
    1202:	1d 1f       	adc	r17, r29
    1204:	dd 24       	eor	r13, r13
    1206:	d3 94       	inc	r13
	return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
	status[offset+i]=0;
    1208:	f8 01       	movw	r30, r16
    120a:	11 92       	st	Z+, r1
    120c:	8f 01       	movw	r16, r30
	spiTransfer(addr, i+1,status[offset+i]);
    120e:	ce 01       	movw	r24, r28
    1210:	b7 01       	movw	r22, r14
    1212:	4d 2d       	mov	r20, r13
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
    121a:	d3 94       	inc	r13
    int offset;

    if(addr<0 || addr>=maxDevices)
	return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
    121c:	f9 e0       	ldi	r31, 0x09	; 9
    121e:	df 16       	cp	r13, r31
    1220:	99 f7       	brne	.-26     	; 0x1208 <_ZN10LedControl12clearDisplayEi+0x40>
	status[offset+i]=0;
	spiTransfer(addr, i+1,status[offset+i]);
    }
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	08 95       	ret

00001232 <_ZN10LedControl12setIntensityEii>:
	return;
    if(limit>=0 || limit<8)
    	spiTransfer(addr, OP_SCANLIMIT,limit);
}

void LedControl::setIntensity(int addr, int intensity) {
    1232:	fc 01       	movw	r30, r24
    1234:	24 2f       	mov	r18, r20
    if(addr<0 || addr>=maxDevices)
    1236:	77 fd       	sbrc	r23, 7
    1238:	0d c0       	rjmp	.+26     	; 0x1254 <_ZN10LedControl12setIntensityEii+0x22>
    123a:	ea 5a       	subi	r30, 0xAA	; 170
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	e6 55       	subi	r30, 0x56	; 86
    1244:	f0 40       	sbci	r31, 0x00	; 0
    1246:	68 17       	cp	r22, r24
    1248:	79 07       	cpc	r23, r25
    124a:	24 f4       	brge	.+8      	; 0x1254 <_ZN10LedControl12setIntensityEii+0x22>
	return;
    if(intensity>=0 || intensity<16)	
	spiTransfer(addr, OP_INTENSITY,intensity);
    124c:	cf 01       	movw	r24, r30
    124e:	4a e0       	ldi	r20, 0x0A	; 10
    1250:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
    1254:	08 95       	ret

00001256 <_ZN10LedControl12setScanLimitEii>:
	spiTransfer(addr, OP_SHUTDOWN,0);
    else
	spiTransfer(addr, OP_SHUTDOWN,1);
}
	
void LedControl::setScanLimit(int addr, int limit) {
    1256:	fc 01       	movw	r30, r24
    1258:	24 2f       	mov	r18, r20
    if(addr<0 || addr>=maxDevices)
    125a:	77 fd       	sbrc	r23, 7
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <_ZN10LedControl12setScanLimitEii+0x22>
    125e:	ea 5a       	subi	r30, 0xAA	; 170
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	e6 55       	subi	r30, 0x56	; 86
    1268:	f0 40       	sbci	r31, 0x00	; 0
    126a:	68 17       	cp	r22, r24
    126c:	79 07       	cpc	r23, r25
    126e:	24 f4       	brge	.+8      	; 0x1278 <_ZN10LedControl12setScanLimitEii+0x22>
	return;
    if(limit>=0 || limit<8)
    	spiTransfer(addr, OP_SCANLIMIT,limit);
    1270:	cf 01       	movw	r24, r30
    1272:	4b e0       	ldi	r20, 0x0B	; 11
    1274:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
    1278:	08 95       	ret

0000127a <_ZN10LedControl8shutdownEib>:

int LedControl::getDeviceCount() {
    return maxDevices;
}

void LedControl::shutdown(int addr, bool b) {
    127a:	fc 01       	movw	r30, r24
    if(addr<0 || addr>=maxDevices)
    127c:	77 fd       	sbrc	r23, 7
    127e:	16 c0       	rjmp	.+44     	; 0x12ac <_ZN10LedControl8shutdownEib+0x32>
    1280:	ea 5a       	subi	r30, 0xAA	; 170
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	e6 55       	subi	r30, 0x56	; 86
    128a:	f0 40       	sbci	r31, 0x00	; 0
    128c:	68 17       	cp	r22, r24
    128e:	79 07       	cpc	r23, r25
    1290:	6c f4       	brge	.+26     	; 0x12ac <_ZN10LedControl8shutdownEib+0x32>
	return;
    if(b)
    1292:	44 23       	and	r20, r20
    1294:	31 f0       	breq	.+12     	; 0x12a2 <_ZN10LedControl8shutdownEib+0x28>
	spiTransfer(addr, OP_SHUTDOWN,0);
    1296:	cf 01       	movw	r24, r30
    1298:	4c e0       	ldi	r20, 0x0C	; 12
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
    12a0:	08 95       	ret
    else
	spiTransfer(addr, OP_SHUTDOWN,1);
    12a2:	cf 01       	movw	r24, r30
    12a4:	4c e0       	ldi	r20, 0x0C	; 12
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
    12ac:	08 95       	ret

000012ae <_ZN10LedControlC1Eiiii>:
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	ec 01       	movw	r28, r24
    12c0:	6b 01       	movw	r12, r22
    SPI_MOSI=dataPin;
    12c2:	c0 5b       	subi	r28, 0xB0	; 176
    12c4:	df 4f       	sbci	r29, 0xFF	; 255
    12c6:	69 93       	st	Y+, r22
    12c8:	79 93       	st	Y+, r23
    SPI_CLK=clkPin;
    12ca:	49 93       	st	Y+, r20
    12cc:	59 93       	st	Y+, r21
    SPI_CS=csPin;
    12ce:	39 83       	std	Y+1, r19	; 0x01
    12d0:	28 83       	st	Y, r18
    12d2:	c4 55       	subi	r28, 0x54	; 84
    12d4:	d0 40       	sbci	r29, 0x00	; 0
    if(numDevices<=0 || numDevices>8 )
    12d6:	c8 01       	movw	r24, r16
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	08 97       	sbiw	r24, 0x08	; 8
    12dc:	10 f0       	brcs	.+4      	; 0x12e2 <_ZN10LedControlC1Eiiii+0x34>
    12de:	08 e0       	ldi	r16, 0x08	; 8
    12e0:	10 e0       	ldi	r17, 0x00	; 0
	numDevices=8;
    maxDevices=numDevices;
    12e2:	ca 5a       	subi	r28, 0xAA	; 170
    12e4:	df 4f       	sbci	r29, 0xFF	; 255
    12e6:	19 83       	std	Y+1, r17	; 0x01
    12e8:	08 83       	st	Y, r16
    12ea:	c6 55       	subi	r28, 0x56	; 86
    12ec:	d0 40       	sbci	r29, 0x00	; 0
    pinMode(SPI_MOSI,OUTPUT);
    12ee:	8e 01       	movw	r16, r28
    12f0:	00 5b       	subi	r16, 0xB0	; 176
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	f8 01       	movw	r30, r16
    12f6:	80 81       	ld	r24, Z
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
    pinMode(SPI_CLK,OUTPUT);
    12fe:	fe 01       	movw	r30, r28
    1300:	ee 5a       	subi	r30, 0xAE	; 174
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
    pinMode(SPI_CS,OUTPUT);
    130c:	74 e5       	ldi	r23, 0x54	; 84
    130e:	e7 2e       	mov	r14, r23
    1310:	f1 2c       	mov	r15, r1
    1312:	ec 0e       	add	r14, r28
    1314:	fd 1e       	adc	r15, r29
    1316:	f7 01       	movw	r30, r14
    1318:	80 81       	ld	r24, Z
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
    digitalWrite(SPI_CS,HIGH);
    1320:	f7 01       	movw	r30, r14
    1322:	80 81       	ld	r24, Z
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
    SPI_MOSI=dataPin;
    132a:	f8 01       	movw	r30, r16
    132c:	d1 82       	std	Z+1, r13	; 0x01
    132e:	c0 82       	st	Z, r12
    1330:	fe 01       	movw	r30, r28
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    for(int i=0;i<64;i++) 
	status[i]=0x00;
    1336:	10 8a       	std	Z+16, r1	; 0x10
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	31 96       	adiw	r30, 0x01	; 1
    133c:	80 34       	cpi	r24, 0x40	; 64
    133e:	91 05       	cpc	r25, r1
    1340:	d1 f7       	brne	.-12     	; 0x1336 <_ZN10LedControlC1Eiiii+0x88>
    1342:	00 e0       	ldi	r16, 0x00	; 0
    1344:	10 e0       	ldi	r17, 0x00	; 0
	status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
    1346:	66 e5       	ldi	r22, 0x56	; 86
    1348:	c6 2e       	mov	r12, r22
    134a:	d1 2c       	mov	r13, r1
    134c:	cc 0e       	add	r12, r28
    134e:	dd 1e       	adc	r13, r29
    1350:	1d c0       	rjmp	.+58     	; 0x138c <_ZN10LedControlC1Eiiii+0xde>
	spiTransfer(i,OP_DISPLAYTEST,0);
    1352:	ce 01       	movw	r24, r28
    1354:	b8 01       	movw	r22, r16
    1356:	4f e0       	ldi	r20, 0x0F	; 15
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
	//scanlimit is set to max on startup
	setScanLimit(i,7);
    135e:	ce 01       	movw	r24, r28
    1360:	b8 01       	movw	r22, r16
    1362:	47 e0       	ldi	r20, 0x07	; 7
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	0e 94 2b 09 	call	0x1256	; 0x1256 <_ZN10LedControl12setScanLimitEii>
	//decode is done in source
	spiTransfer(i,OP_DECODEMODE,0);
    136a:	ce 01       	movw	r24, r28
    136c:	b8 01       	movw	r22, r16
    136e:	49 e0       	ldi	r20, 0x09	; 9
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN10LedControl11spiTransferEihh>
	clearDisplay(i);
    1376:	ce 01       	movw	r24, r28
    1378:	b8 01       	movw	r22, r16
    137a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN10LedControl12clearDisplayEi>
	//we go into shutdown-mode on startup
	shutdown(i,true);
    137e:	ce 01       	movw	r24, r28
    1380:	b8 01       	movw	r22, r16
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN10LedControl8shutdownEib>
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
	status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
    1388:	0f 5f       	subi	r16, 0xFF	; 255
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	f6 01       	movw	r30, r12
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	08 17       	cp	r16, r24
    1394:	19 07       	cpc	r17, r25
    1396:	ec f2       	brlt	.-70     	; 0x1352 <_ZN10LedControlC1Eiiii+0xa4>
	spiTransfer(i,OP_DECODEMODE,0);
	clearDisplay(i);
	//we go into shutdown-mode on startup
	shutdown(i,true);
    }
}
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	08 95       	ret

000013aa <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	7c 01       	movw	r14, r24
    13bc:	6b 01       	movw	r12, r22
    13be:	8a 01       	movw	r16, r20
    13c0:	c0 e0       	ldi	r28, 0x00	; 0
    13c2:	d0 e0       	ldi	r29, 0x00	; 0
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    13c6:	d6 01       	movw	r26, r12
    13c8:	6d 91       	ld	r22, X+
    13ca:	6d 01       	movw	r12, r26
    13cc:	d7 01       	movw	r26, r14
    13ce:	ed 91       	ld	r30, X+
    13d0:	fc 91       	ld	r31, X
    13d2:	01 90       	ld	r0, Z+
    13d4:	f0 81       	ld	r31, Z
    13d6:	e0 2d       	mov	r30, r0
    13d8:	c7 01       	movw	r24, r14
    13da:	09 95       	icall
    13dc:	c8 0f       	add	r28, r24
    13de:	d9 1f       	adc	r29, r25
    13e0:	01 50       	subi	r16, 0x01	; 1
    13e2:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    13e4:	01 15       	cp	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	71 f7       	brne	.-36     	; 0x13c6 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    13ea:	ce 01       	movw	r24, r28
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    13fe:	2f 92       	push	r2
    1400:	3f 92       	push	r3
    1402:	4f 92       	push	r4
    1404:	5f 92       	push	r5
    1406:	6f 92       	push	r6
    1408:	7f 92       	push	r7
    140a:	8f 92       	push	r8
    140c:	9f 92       	push	r9
    140e:	af 92       	push	r10
    1410:	bf 92       	push	r11
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	3b 01       	movw	r6, r22
    1428:	4c 01       	movw	r8, r24
    142a:	19 01       	movw	r2, r18
    142c:	2a 01       	movw	r4, r20
    142e:	6d 89       	ldd	r22, Y+21	; 0x15
    1430:	7e 89       	ldd	r23, Y+22	; 0x16
    1432:	8f 89       	ldd	r24, Y+23	; 0x17
    1434:	98 8d       	ldd	r25, Y+24	; 0x18
    1436:	6a 19       	sub	r22, r10
    1438:	7b 09       	sbc	r23, r11
    143a:	8c 09       	sbc	r24, r12
    143c:	9d 09       	sbc	r25, r13
    143e:	62 1a       	sub	r6, r18
    1440:	73 0a       	sbc	r7, r19
    1442:	84 0a       	sbc	r8, r20
    1444:	95 0a       	sbc	r9, r21
    1446:	a4 01       	movw	r20, r8
    1448:	93 01       	movw	r18, r6
    144a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__mulsi3>
    144e:	e2 18       	sub	r14, r2
    1450:	f3 08       	sbc	r15, r3
    1452:	04 09       	sbc	r16, r4
    1454:	15 09       	sbc	r17, r5
    1456:	a8 01       	movw	r20, r16
    1458:	97 01       	movw	r18, r14
    145a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__divmodsi4>
    145e:	2a 0d       	add	r18, r10
    1460:	3b 1d       	adc	r19, r11
    1462:	4c 1d       	adc	r20, r12
    1464:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    1466:	b9 01       	movw	r22, r18
    1468:	ca 01       	movw	r24, r20
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	bf 90       	pop	r11
    147c:	af 90       	pop	r10
    147e:	9f 90       	pop	r9
    1480:	8f 90       	pop	r8
    1482:	7f 90       	pop	r7
    1484:	6f 90       	pop	r6
    1486:	5f 90       	pop	r5
    1488:	4f 90       	pop	r4
    148a:	3f 90       	pop	r3
    148c:	2f 90       	pop	r2
    148e:	08 95       	ret

00001490 <main>:
#include <Arduino.h>

int main(void)
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
{
	init();
    1494:	0e 94 ad 0a 	call	0x155a	; 0x155a <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    1498:	0e 94 99 05 	call	0xb32	; 0xb32 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    149c:	ca e6       	ldi	r28, 0x6A	; 106
    149e:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    14a0:	0e 94 92 03 	call	0x724	; 0x724 <loop>
		if (serialEventRun) serialEventRun();
    14a4:	20 97       	sbiw	r28, 0x00	; 0
    14a6:	e1 f3       	breq	.-8      	; 0x14a0 <main+0x10>
    14a8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_Z14serialEventRunv>
    14ac:	f9 cf       	rjmp	.-14     	; 0x14a0 <main+0x10>

000014ae <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    14c4:	80 91 7f 04 	lds	r24, 0x047F
    14c8:	90 91 80 04 	lds	r25, 0x0480
    14cc:	a0 91 81 04 	lds	r26, 0x0481
    14d0:	b0 91 82 04 	lds	r27, 0x0482
	unsigned char f = timer0_fract;
    14d4:	30 91 83 04 	lds	r19, 0x0483

	m += MILLIS_INC;
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	a1 1d       	adc	r26, r1
    14dc:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    14de:	23 2f       	mov	r18, r19
    14e0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    14e2:	2d 37       	cpi	r18, 0x7D	; 125
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <__vector_16+0x40>
		f -= FRACT_MAX;
    14e6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	a1 1d       	adc	r26, r1
    14ec:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    14ee:	20 93 83 04 	sts	0x0483, r18
	timer0_millis = m;
    14f2:	80 93 7f 04 	sts	0x047F, r24
    14f6:	90 93 80 04 	sts	0x0480, r25
    14fa:	a0 93 81 04 	sts	0x0481, r26
    14fe:	b0 93 82 04 	sts	0x0482, r27
	timer0_overflow_count++;
    1502:	80 91 7b 04 	lds	r24, 0x047B
    1506:	90 91 7c 04 	lds	r25, 0x047C
    150a:	a0 91 7d 04 	lds	r26, 0x047D
    150e:	b0 91 7e 04 	lds	r27, 0x047E
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	a1 1d       	adc	r26, r1
    1516:	b1 1d       	adc	r27, r1
    1518:	80 93 7b 04 	sts	0x047B, r24
    151c:	90 93 7c 04 	sts	0x047C, r25
    1520:	a0 93 7d 04 	sts	0x047D, r26
    1524:	b0 93 7e 04 	sts	0x047E, r27
}
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    153e:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1540:	f8 94       	cli
	m = timer0_millis;
    1542:	20 91 7f 04 	lds	r18, 0x047F
    1546:	30 91 80 04 	lds	r19, 0x0480
    154a:	40 91 81 04 	lds	r20, 0x0481
    154e:	50 91 82 04 	lds	r21, 0x0482
	SREG = oldSREG;
    1552:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1554:	b9 01       	movw	r22, r18
    1556:	ca 01       	movw	r24, r20
    1558:	08 95       	ret

0000155a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    155a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    155c:	84 b5       	in	r24, 0x24	; 36
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1562:	84 b5       	in	r24, 0x24	; 36
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1568:	85 b5       	in	r24, 0x25	; 37
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    156e:	85 b5       	in	r24, 0x25	; 37
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1574:	ee e6       	ldi	r30, 0x6E	; 110
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    157e:	e1 e8       	ldi	r30, 0x81	; 129
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1584:	80 81       	ld	r24, Z
    1586:	82 60       	ori	r24, 0x02	; 2
    1588:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    158a:	80 81       	ld	r24, Z
    158c:	81 60       	ori	r24, 0x01	; 1
    158e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1590:	e0 e8       	ldi	r30, 0x80	; 128
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	81 60       	ori	r24, 0x01	; 1
    1598:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    159a:	e1 eb       	ldi	r30, 0xB1	; 177
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	84 60       	ori	r24, 0x04	; 4
    15a2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    15a4:	e0 eb       	ldi	r30, 0xB0	; 176
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	81 60       	ori	r24, 0x01	; 1
    15ac:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    15ae:	ea e7       	ldi	r30, 0x7A	; 122
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	84 60       	ori	r24, 0x04	; 4
    15b6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    15b8:	80 81       	ld	r24, Z
    15ba:	82 60       	ori	r24, 0x02	; 2
    15bc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    15be:	80 81       	ld	r24, Z
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    15c4:	80 81       	ld	r24, Z
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    15ca:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    15ce:	08 95       	ret

000015d0 <analogRead>:

int analogRead(uint8_t pin)
{
    15d0:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    15d2:	8e 30       	cpi	r24, 0x0E	; 14
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <analogRead+0x8>
    15d6:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    15d8:	97 70       	andi	r25, 0x07	; 7
    15da:	80 91 46 01 	lds	r24, 0x0146
    15de:	82 95       	swap	r24
    15e0:	88 0f       	add	r24, r24
    15e2:	88 0f       	add	r24, r24
    15e4:	80 7c       	andi	r24, 0xC0	; 192
    15e6:	89 2b       	or	r24, r25
    15e8:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    15ec:	80 91 7a 00 	lds	r24, 0x007A
    15f0:	80 64       	ori	r24, 0x40	; 64
    15f2:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    15f6:	80 91 7a 00 	lds	r24, 0x007A
    15fa:	86 fd       	sbrc	r24, 6
    15fc:	fc cf       	rjmp	.-8      	; 0x15f6 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    15fe:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    1602:	40 91 79 00 	lds	r20, 0x0079
    1606:	94 2f       	mov	r25, r20
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	28 2b       	or	r18, r24
    160e:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1610:	c9 01       	movw	r24, r18
    1612:	08 95       	ret

00001614 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	18 2f       	mov	r17, r24
    161c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <pinMode>
	if (val == 0)
    1624:	20 97       	sbiw	r28, 0x00	; 0
    1626:	09 f4       	brne	.+2      	; 0x162a <analogWrite+0x16>
    1628:	4a c0       	rjmp	.+148    	; 0x16be <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    162a:	cf 3f       	cpi	r28, 0xFF	; 255
    162c:	d1 05       	cpc	r29, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <analogWrite+0x1e>
    1630:	49 c0       	rjmp	.+146    	; 0x16c4 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1632:	e1 2f       	mov	r30, r17
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	e4 53       	subi	r30, 0x34	; 52
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	84 91       	lpm	r24, Z+
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	c1 f0       	breq	.+48     	; 0x1670 <analogWrite+0x5c>
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	28 f4       	brcc	.+10     	; 0x164e <analogWrite+0x3a>
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	51 f0       	breq	.+20     	; 0x165c <analogWrite+0x48>
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	b1 f5       	brne	.+108    	; 0x16b8 <analogWrite+0xa4>
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <analogWrite+0x52>
    164e:	86 30       	cpi	r24, 0x06	; 6
    1650:	19 f1       	breq	.+70     	; 0x1698 <analogWrite+0x84>
    1652:	87 30       	cpi	r24, 0x07	; 7
    1654:	49 f1       	breq	.+82     	; 0x16a8 <analogWrite+0x94>
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	79 f5       	brne	.+94     	; 0x16b8 <analogWrite+0xa4>
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    165c:	84 b5       	in	r24, 0x24	; 36
    165e:	80 68       	ori	r24, 0x80	; 128
    1660:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1662:	c7 bd       	out	0x27, r28	; 39
    1664:	33 c0       	rjmp	.+102    	; 0x16cc <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1666:	84 b5       	in	r24, 0x24	; 36
    1668:	80 62       	ori	r24, 0x20	; 32
    166a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    166c:	c8 bd       	out	0x28, r28	; 40
    166e:	2e c0       	rjmp	.+92     	; 0x16cc <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1670:	80 91 80 00 	lds	r24, 0x0080
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    167a:	d0 93 89 00 	sts	0x0089, r29
    167e:	c0 93 88 00 	sts	0x0088, r28
    1682:	24 c0       	rjmp	.+72     	; 0x16cc <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1684:	80 91 80 00 	lds	r24, 0x0080
    1688:	80 62       	ori	r24, 0x20	; 32
    168a:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    168e:	d0 93 8b 00 	sts	0x008B, r29
    1692:	c0 93 8a 00 	sts	0x008A, r28
    1696:	1a c0       	rjmp	.+52     	; 0x16cc <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1698:	80 91 b0 00 	lds	r24, 0x00B0
    169c:	80 68       	ori	r24, 0x80	; 128
    169e:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    16a2:	c0 93 b3 00 	sts	0x00B3, r28
    16a6:	12 c0       	rjmp	.+36     	; 0x16cc <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    16a8:	80 91 b0 00 	lds	r24, 0x00B0
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    16b2:	c0 93 b4 00 	sts	0x00B4, r28
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    16b8:	c0 38       	cpi	r28, 0x80	; 128
    16ba:	d1 05       	cpc	r29, r1
    16bc:	1c f4       	brge	.+6      	; 0x16c4 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    16be:	81 2f       	mov	r24, r17
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    16c4:	81 2f       	mov	r24, r17
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
				}
		}
	}
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	08 95       	ret

000016d4 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    16d4:	48 2f       	mov	r20, r24
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	ca 01       	movw	r24, r20
    16da:	88 54       	subi	r24, 0x48	; 72
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	fc 01       	movw	r30, r24
    16e0:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    16e2:	4c 55       	subi	r20, 0x5C	; 92
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	fa 01       	movw	r30, r20
    16e8:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    16ea:	88 23       	and	r24, r24
    16ec:	c1 f0       	breq	.+48     	; 0x171e <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    16ee:	e8 2f       	mov	r30, r24
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ea 57       	subi	r30, 0x7A	; 122
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	a5 91       	lpm	r26, Z+
    16fc:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    16fe:	66 23       	and	r22, r22
    1700:	41 f4       	brne	.+16     	; 0x1712 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1702:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1704:	f8 94       	cli
		*reg &= ~bit;
    1706:	8c 91       	ld	r24, X
    1708:	20 95       	com	r18
    170a:	82 23       	and	r24, r18
    170c:	8c 93       	st	X, r24
		SREG = oldSREG;
    170e:	9f bf       	out	0x3f, r25	; 63
    1710:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1712:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1714:	f8 94       	cli
		*reg |= bit;
    1716:	8c 91       	ld	r24, X
    1718:	82 2b       	or	r24, r18
    171a:	8c 93       	st	X, r24
		SREG = oldSREG;
    171c:	9f bf       	out	0x3f, r25	; 63
    171e:	08 95       	ret

00001720 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1720:	48 2f       	mov	r20, r24
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	ca 01       	movw	r24, r20
    1726:	84 53       	subi	r24, 0x34	; 52
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	fc 01       	movw	r30, r24
    172c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    172e:	ca 01       	movw	r24, r20
    1730:	88 54       	subi	r24, 0x48	; 72
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	fc 01       	movw	r30, r24
    1736:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1738:	4c 55       	subi	r20, 0x5C	; 92
    173a:	5f 4f       	sbci	r21, 0xFF	; 255
    173c:	fa 01       	movw	r30, r20
    173e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1740:	33 23       	and	r19, r19
    1742:	09 f4       	brne	.+2      	; 0x1746 <digitalWrite+0x26>
    1744:	40 c0       	rjmp	.+128    	; 0x17c6 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1746:	22 23       	and	r18, r18
    1748:	51 f1       	breq	.+84     	; 0x179e <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    174a:	23 30       	cpi	r18, 0x03	; 3
    174c:	71 f0       	breq	.+28     	; 0x176a <digitalWrite+0x4a>
    174e:	24 30       	cpi	r18, 0x04	; 4
    1750:	28 f4       	brcc	.+10     	; 0x175c <digitalWrite+0x3c>
    1752:	21 30       	cpi	r18, 0x01	; 1
    1754:	a1 f0       	breq	.+40     	; 0x177e <digitalWrite+0x5e>
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	11 f5       	brne	.+68     	; 0x179e <digitalWrite+0x7e>
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <digitalWrite+0x64>
    175c:	26 30       	cpi	r18, 0x06	; 6
    175e:	b1 f0       	breq	.+44     	; 0x178c <digitalWrite+0x6c>
    1760:	27 30       	cpi	r18, 0x07	; 7
    1762:	c1 f0       	breq	.+48     	; 0x1794 <digitalWrite+0x74>
    1764:	24 30       	cpi	r18, 0x04	; 4
    1766:	d9 f4       	brne	.+54     	; 0x179e <digitalWrite+0x7e>
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    176a:	80 91 80 00 	lds	r24, 0x0080
    176e:	8f 77       	andi	r24, 0x7F	; 127
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1772:	80 91 80 00 	lds	r24, 0x0080
    1776:	8f 7d       	andi	r24, 0xDF	; 223
    1778:	80 93 80 00 	sts	0x0080, r24
    177c:	10 c0       	rjmp	.+32     	; 0x179e <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    177e:	84 b5       	in	r24, 0x24	; 36
    1780:	8f 77       	andi	r24, 0x7F	; 127
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1784:	84 b5       	in	r24, 0x24	; 36
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	84 bd       	out	0x24, r24	; 36
    178a:	09 c0       	rjmp	.+18     	; 0x179e <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    178c:	80 91 b0 00 	lds	r24, 0x00B0
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	03 c0       	rjmp	.+6      	; 0x179a <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1794:	80 91 b0 00 	lds	r24, 0x00B0
    1798:	8f 7d       	andi	r24, 0xDF	; 223
    179a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    179e:	e3 2f       	mov	r30, r19
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	e0 57       	subi	r30, 0x70	; 112
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	a5 91       	lpm	r26, Z+
    17ac:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    17ae:	2f b7       	in	r18, 0x3f	; 63
	cli();
    17b0:	f8 94       	cli

	if (val == LOW) {
    17b2:	66 23       	and	r22, r22
    17b4:	21 f4       	brne	.+8      	; 0x17be <digitalWrite+0x9e>
		*out &= ~bit;
    17b6:	8c 91       	ld	r24, X
    17b8:	90 95       	com	r25
    17ba:	89 23       	and	r24, r25
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    17be:	8c 91       	ld	r24, X
    17c0:	89 2b       	or	r24, r25
    17c2:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    17c4:	2f bf       	out	0x3f, r18	; 63
    17c6:	08 95       	ret

000017c8 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    17c8:	68 2f       	mov	r22, r24
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	cb 01       	movw	r24, r22
    17ce:	84 53       	subi	r24, 0x34	; 52
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	fc 01       	movw	r30, r24
    17d4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    17d6:	cb 01       	movw	r24, r22
    17d8:	88 54       	subi	r24, 0x48	; 72
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	fc 01       	movw	r30, r24
    17de:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    17e0:	6c 55       	subi	r22, 0x5C	; 92
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	fb 01       	movw	r30, r22
    17e6:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    17e8:	99 23       	and	r25, r25
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <digitalRead+0x2a>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3c c0       	rjmp	.+120    	; 0x186a <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    17f2:	22 23       	and	r18, r18
    17f4:	51 f1       	breq	.+84     	; 0x184a <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    17f6:	23 30       	cpi	r18, 0x03	; 3
    17f8:	71 f0       	breq	.+28     	; 0x1816 <digitalRead+0x4e>
    17fa:	24 30       	cpi	r18, 0x04	; 4
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <digitalRead+0x40>
    17fe:	21 30       	cpi	r18, 0x01	; 1
    1800:	a1 f0       	breq	.+40     	; 0x182a <digitalRead+0x62>
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	11 f5       	brne	.+68     	; 0x184a <digitalRead+0x82>
    1806:	14 c0       	rjmp	.+40     	; 0x1830 <digitalRead+0x68>
    1808:	26 30       	cpi	r18, 0x06	; 6
    180a:	b1 f0       	breq	.+44     	; 0x1838 <digitalRead+0x70>
    180c:	27 30       	cpi	r18, 0x07	; 7
    180e:	c1 f0       	breq	.+48     	; 0x1840 <digitalRead+0x78>
    1810:	24 30       	cpi	r18, 0x04	; 4
    1812:	d9 f4       	brne	.+54     	; 0x184a <digitalRead+0x82>
    1814:	04 c0       	rjmp	.+8      	; 0x181e <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1816:	80 91 80 00 	lds	r24, 0x0080
    181a:	8f 77       	andi	r24, 0x7F	; 127
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    181e:	80 91 80 00 	lds	r24, 0x0080
    1822:	8f 7d       	andi	r24, 0xDF	; 223
    1824:	80 93 80 00 	sts	0x0080, r24
    1828:	10 c0       	rjmp	.+32     	; 0x184a <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    182a:	84 b5       	in	r24, 0x24	; 36
    182c:	8f 77       	andi	r24, 0x7F	; 127
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1830:	84 b5       	in	r24, 0x24	; 36
    1832:	8f 7d       	andi	r24, 0xDF	; 223
    1834:	84 bd       	out	0x24, r24	; 36
    1836:	09 c0       	rjmp	.+18     	; 0x184a <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1838:	80 91 b0 00 	lds	r24, 0x00B0
    183c:	8f 77       	andi	r24, 0x7F	; 127
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1840:	80 91 b0 00 	lds	r24, 0x00B0
    1844:	8f 7d       	andi	r24, 0xDF	; 223
    1846:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    184a:	89 2f       	mov	r24, r25
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	86 56       	subi	r24, 0x66	; 102
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	fc 01       	movw	r30, r24
    1858:	a5 91       	lpm	r26, Z+
    185a:	b4 91       	lpm	r27, Z+
    185c:	8c 91       	ld	r24, X
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	84 23       	and	r24, r20
    1864:	11 f0       	breq	.+4      	; 0x186a <digitalRead+0xa2>
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    186a:	c9 01       	movw	r24, r18
    186c:	08 95       	ret

0000186e <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	e8 2e       	mov	r14, r24
    1882:	f6 2e       	mov	r15, r22
    1884:	b4 2e       	mov	r11, r20
    1886:	c7 e0       	ldi	r28, 0x07	; 7
    1888:	d0 e0       	ldi	r29, 0x00	; 0
    188a:	02 2f       	mov	r16, r18
    188c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	c8 2e       	mov	r12, r24
    1892:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1894:	bb 20       	and	r11, r11
    1896:	59 f4       	brne	.+22     	; 0x18ae <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1898:	b6 01       	movw	r22, r12
    189a:	6c 1b       	sub	r22, r28
    189c:	7d 0b       	sbc	r23, r29
    189e:	c8 01       	movw	r24, r16
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <shiftOut+0x38>
    18a2:	95 95       	asr	r25
    18a4:	87 95       	ror	r24
    18a6:	6a 95       	dec	r22
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <shiftOut+0x34>
    18aa:	bc 01       	movw	r22, r24
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    18ae:	b8 01       	movw	r22, r16
    18b0:	0c 2e       	mov	r0, r28
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <shiftOut+0x4a>
    18b4:	75 95       	asr	r23
    18b6:	67 95       	ror	r22
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <shiftOut+0x46>
    18bc:	61 70       	andi	r22, 0x01	; 1
    18be:	8e 2d       	mov	r24, r14
    18c0:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    18c4:	8f 2d       	mov	r24, r15
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    18cc:	8f 2d       	mov	r24, r15
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	0e 94 90 0b 	call	0x1720	; 0x1720 <digitalWrite>
    18d4:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	cf 3f       	cpi	r28, 0xFF	; 255
    18da:	d9 07       	cpc	r29, r25
    18dc:	d9 f6       	brne	.-74     	; 0x1894 <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	08 95       	ret

000018f2 <__subsf3>:
    18f2:	50 58       	subi	r21, 0x80	; 128

000018f4 <__addsf3>:
    18f4:	bb 27       	eor	r27, r27
    18f6:	aa 27       	eor	r26, r26
    18f8:	0e d0       	rcall	.+28     	; 0x1916 <__addsf3x>
    18fa:	78 c1       	rjmp	.+752    	; 0x1bec <__fp_round>
    18fc:	41 d1       	rcall	.+642    	; 0x1b80 <__fp_pscA>
    18fe:	30 f0       	brcs	.+12     	; 0x190c <__addsf3+0x18>
    1900:	46 d1       	rcall	.+652    	; 0x1b8e <__fp_pscB>
    1902:	20 f0       	brcs	.+8      	; 0x190c <__addsf3+0x18>
    1904:	31 f4       	brne	.+12     	; 0x1912 <__addsf3+0x1e>
    1906:	9f 3f       	cpi	r25, 0xFF	; 255
    1908:	11 f4       	brne	.+4      	; 0x190e <__addsf3+0x1a>
    190a:	1e f4       	brtc	.+6      	; 0x1912 <__addsf3+0x1e>
    190c:	36 c1       	rjmp	.+620    	; 0x1b7a <__fp_nan>
    190e:	0e f4       	brtc	.+2      	; 0x1912 <__addsf3+0x1e>
    1910:	e0 95       	com	r30
    1912:	e7 fb       	bst	r30, 7
    1914:	2c c1       	rjmp	.+600    	; 0x1b6e <__fp_inf>

00001916 <__addsf3x>:
    1916:	e9 2f       	mov	r30, r25
    1918:	8b d1       	rcall	.+790    	; 0x1c30 <__fp_split3>
    191a:	80 f3       	brcs	.-32     	; 0x18fc <__addsf3+0x8>
    191c:	ba 17       	cp	r27, r26
    191e:	62 07       	cpc	r22, r18
    1920:	73 07       	cpc	r23, r19
    1922:	84 07       	cpc	r24, r20
    1924:	95 07       	cpc	r25, r21
    1926:	18 f0       	brcs	.+6      	; 0x192e <__addsf3x+0x18>
    1928:	71 f4       	brne	.+28     	; 0x1946 <__addsf3x+0x30>
    192a:	9e f5       	brtc	.+102    	; 0x1992 <__addsf3x+0x7c>
    192c:	a3 c1       	rjmp	.+838    	; 0x1c74 <__fp_zero>
    192e:	0e f4       	brtc	.+2      	; 0x1932 <__addsf3x+0x1c>
    1930:	e0 95       	com	r30
    1932:	0b 2e       	mov	r0, r27
    1934:	ba 2f       	mov	r27, r26
    1936:	a0 2d       	mov	r26, r0
    1938:	0b 01       	movw	r0, r22
    193a:	b9 01       	movw	r22, r18
    193c:	90 01       	movw	r18, r0
    193e:	0c 01       	movw	r0, r24
    1940:	ca 01       	movw	r24, r20
    1942:	a0 01       	movw	r20, r0
    1944:	11 24       	eor	r1, r1
    1946:	ff 27       	eor	r31, r31
    1948:	59 1b       	sub	r21, r25
    194a:	99 f0       	breq	.+38     	; 0x1972 <__addsf3x+0x5c>
    194c:	59 3f       	cpi	r21, 0xF9	; 249
    194e:	50 f4       	brcc	.+20     	; 0x1964 <__addsf3x+0x4e>
    1950:	50 3e       	cpi	r21, 0xE0	; 224
    1952:	68 f1       	brcs	.+90     	; 0x19ae <__addsf3x+0x98>
    1954:	1a 16       	cp	r1, r26
    1956:	f0 40       	sbci	r31, 0x00	; 0
    1958:	a2 2f       	mov	r26, r18
    195a:	23 2f       	mov	r18, r19
    195c:	34 2f       	mov	r19, r20
    195e:	44 27       	eor	r20, r20
    1960:	58 5f       	subi	r21, 0xF8	; 248
    1962:	f3 cf       	rjmp	.-26     	; 0x194a <__addsf3x+0x34>
    1964:	46 95       	lsr	r20
    1966:	37 95       	ror	r19
    1968:	27 95       	ror	r18
    196a:	a7 95       	ror	r26
    196c:	f0 40       	sbci	r31, 0x00	; 0
    196e:	53 95       	inc	r21
    1970:	c9 f7       	brne	.-14     	; 0x1964 <__addsf3x+0x4e>
    1972:	7e f4       	brtc	.+30     	; 0x1992 <__addsf3x+0x7c>
    1974:	1f 16       	cp	r1, r31
    1976:	ba 0b       	sbc	r27, r26
    1978:	62 0b       	sbc	r22, r18
    197a:	73 0b       	sbc	r23, r19
    197c:	84 0b       	sbc	r24, r20
    197e:	ba f0       	brmi	.+46     	; 0x19ae <__addsf3x+0x98>
    1980:	91 50       	subi	r25, 0x01	; 1
    1982:	a1 f0       	breq	.+40     	; 0x19ac <__addsf3x+0x96>
    1984:	ff 0f       	add	r31, r31
    1986:	bb 1f       	adc	r27, r27
    1988:	66 1f       	adc	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	c2 f7       	brpl	.-16     	; 0x1980 <__addsf3x+0x6a>
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <__addsf3x+0x98>
    1992:	ba 0f       	add	r27, r26
    1994:	62 1f       	adc	r22, r18
    1996:	73 1f       	adc	r23, r19
    1998:	84 1f       	adc	r24, r20
    199a:	48 f4       	brcc	.+18     	; 0x19ae <__addsf3x+0x98>
    199c:	87 95       	ror	r24
    199e:	77 95       	ror	r23
    19a0:	67 95       	ror	r22
    19a2:	b7 95       	ror	r27
    19a4:	f7 95       	ror	r31
    19a6:	9e 3f       	cpi	r25, 0xFE	; 254
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <__addsf3x+0x96>
    19aa:	b3 cf       	rjmp	.-154    	; 0x1912 <__addsf3+0x1e>
    19ac:	93 95       	inc	r25
    19ae:	88 0f       	add	r24, r24
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <__addsf3x+0x9e>
    19b2:	99 27       	eor	r25, r25
    19b4:	ee 0f       	add	r30, r30
    19b6:	97 95       	ror	r25
    19b8:	87 95       	ror	r24
    19ba:	08 95       	ret

000019bc <cos>:
    19bc:	f0 d0       	rcall	.+480    	; 0x1b9e <__fp_rempio2>
    19be:	e3 95       	inc	r30
    19c0:	26 c1       	rjmp	.+588    	; 0x1c0e <__fp_sinus>

000019c2 <__divsf3>:
    19c2:	0c d0       	rcall	.+24     	; 0x19dc <__divsf3x>
    19c4:	13 c1       	rjmp	.+550    	; 0x1bec <__fp_round>
    19c6:	e3 d0       	rcall	.+454    	; 0x1b8e <__fp_pscB>
    19c8:	40 f0       	brcs	.+16     	; 0x19da <__divsf3+0x18>
    19ca:	da d0       	rcall	.+436    	; 0x1b80 <__fp_pscA>
    19cc:	30 f0       	brcs	.+12     	; 0x19da <__divsf3+0x18>
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <__divsf3+0x16>
    19d0:	5f 3f       	cpi	r21, 0xFF	; 255
    19d2:	19 f0       	breq	.+6      	; 0x19da <__divsf3+0x18>
    19d4:	cc c0       	rjmp	.+408    	; 0x1b6e <__fp_inf>
    19d6:	51 11       	cpse	r21, r1
    19d8:	4e c1       	rjmp	.+668    	; 0x1c76 <__fp_szero>
    19da:	cf c0       	rjmp	.+414    	; 0x1b7a <__fp_nan>

000019dc <__divsf3x>:
    19dc:	29 d1       	rcall	.+594    	; 0x1c30 <__fp_split3>
    19de:	98 f3       	brcs	.-26     	; 0x19c6 <__divsf3+0x4>

000019e0 <__divsf3_pse>:
    19e0:	99 23       	and	r25, r25
    19e2:	c9 f3       	breq	.-14     	; 0x19d6 <__divsf3+0x14>
    19e4:	55 23       	and	r21, r21
    19e6:	b1 f3       	breq	.-20     	; 0x19d4 <__divsf3+0x12>
    19e8:	95 1b       	sub	r25, r21
    19ea:	55 0b       	sbc	r21, r21
    19ec:	bb 27       	eor	r27, r27
    19ee:	aa 27       	eor	r26, r26
    19f0:	62 17       	cp	r22, r18
    19f2:	73 07       	cpc	r23, r19
    19f4:	84 07       	cpc	r24, r20
    19f6:	38 f0       	brcs	.+14     	; 0x1a06 <__divsf3_pse+0x26>
    19f8:	9f 5f       	subi	r25, 0xFF	; 255
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255
    19fc:	22 0f       	add	r18, r18
    19fe:	33 1f       	adc	r19, r19
    1a00:	44 1f       	adc	r20, r20
    1a02:	aa 1f       	adc	r26, r26
    1a04:	a9 f3       	breq	.-22     	; 0x19f0 <__divsf3_pse+0x10>
    1a06:	33 d0       	rcall	.+102    	; 0x1a6e <__divsf3_pse+0x8e>
    1a08:	0e 2e       	mov	r0, r30
    1a0a:	3a f0       	brmi	.+14     	; 0x1a1a <__divsf3_pse+0x3a>
    1a0c:	e0 e8       	ldi	r30, 0x80	; 128
    1a0e:	30 d0       	rcall	.+96     	; 0x1a70 <__divsf3_pse+0x90>
    1a10:	91 50       	subi	r25, 0x01	; 1
    1a12:	50 40       	sbci	r21, 0x00	; 0
    1a14:	e6 95       	lsr	r30
    1a16:	00 1c       	adc	r0, r0
    1a18:	ca f7       	brpl	.-14     	; 0x1a0c <__divsf3_pse+0x2c>
    1a1a:	29 d0       	rcall	.+82     	; 0x1a6e <__divsf3_pse+0x8e>
    1a1c:	fe 2f       	mov	r31, r30
    1a1e:	27 d0       	rcall	.+78     	; 0x1a6e <__divsf3_pse+0x8e>
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	bb 1f       	adc	r27, r27
    1a28:	26 17       	cp	r18, r22
    1a2a:	37 07       	cpc	r19, r23
    1a2c:	48 07       	cpc	r20, r24
    1a2e:	ab 07       	cpc	r26, r27
    1a30:	b0 e8       	ldi	r27, 0x80	; 128
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <__divsf3_pse+0x56>
    1a34:	bb 0b       	sbc	r27, r27
    1a36:	80 2d       	mov	r24, r0
    1a38:	bf 01       	movw	r22, r30
    1a3a:	ff 27       	eor	r31, r31
    1a3c:	93 58       	subi	r25, 0x83	; 131
    1a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a40:	2a f0       	brmi	.+10     	; 0x1a4c <__divsf3_pse+0x6c>
    1a42:	9e 3f       	cpi	r25, 0xFE	; 254
    1a44:	51 05       	cpc	r21, r1
    1a46:	68 f0       	brcs	.+26     	; 0x1a62 <__divsf3_pse+0x82>
    1a48:	92 c0       	rjmp	.+292    	; 0x1b6e <__fp_inf>
    1a4a:	15 c1       	rjmp	.+554    	; 0x1c76 <__fp_szero>
    1a4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4e:	ec f3       	brlt	.-6      	; 0x1a4a <__divsf3_pse+0x6a>
    1a50:	98 3e       	cpi	r25, 0xE8	; 232
    1a52:	dc f3       	brlt	.-10     	; 0x1a4a <__divsf3_pse+0x6a>
    1a54:	86 95       	lsr	r24
    1a56:	77 95       	ror	r23
    1a58:	67 95       	ror	r22
    1a5a:	b7 95       	ror	r27
    1a5c:	f7 95       	ror	r31
    1a5e:	9f 5f       	subi	r25, 0xFF	; 255
    1a60:	c9 f7       	brne	.-14     	; 0x1a54 <__divsf3_pse+0x74>
    1a62:	88 0f       	add	r24, r24
    1a64:	91 1d       	adc	r25, r1
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret
    1a6e:	e1 e0       	ldi	r30, 0x01	; 1
    1a70:	66 0f       	add	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	88 1f       	adc	r24, r24
    1a76:	bb 1f       	adc	r27, r27
    1a78:	62 17       	cp	r22, r18
    1a7a:	73 07       	cpc	r23, r19
    1a7c:	84 07       	cpc	r24, r20
    1a7e:	ba 07       	cpc	r27, r26
    1a80:	20 f0       	brcs	.+8      	; 0x1a8a <__divsf3_pse+0xaa>
    1a82:	62 1b       	sub	r22, r18
    1a84:	73 0b       	sbc	r23, r19
    1a86:	84 0b       	sbc	r24, r20
    1a88:	ba 0b       	sbc	r27, r26
    1a8a:	ee 1f       	adc	r30, r30
    1a8c:	88 f7       	brcc	.-30     	; 0x1a70 <__divsf3_pse+0x90>
    1a8e:	e0 95       	com	r30
    1a90:	08 95       	ret

00001a92 <__fixsfsi>:
    1a92:	04 d0       	rcall	.+8      	; 0x1a9c <__fixunssfsi>
    1a94:	68 94       	set
    1a96:	b1 11       	cpse	r27, r1
    1a98:	ee c0       	rjmp	.+476    	; 0x1c76 <__fp_szero>
    1a9a:	08 95       	ret

00001a9c <__fixunssfsi>:
    1a9c:	d1 d0       	rcall	.+418    	; 0x1c40 <__fp_splitA>
    1a9e:	88 f0       	brcs	.+34     	; 0x1ac2 <__fixunssfsi+0x26>
    1aa0:	9f 57       	subi	r25, 0x7F	; 127
    1aa2:	90 f0       	brcs	.+36     	; 0x1ac8 <__fixunssfsi+0x2c>
    1aa4:	b9 2f       	mov	r27, r25
    1aa6:	99 27       	eor	r25, r25
    1aa8:	b7 51       	subi	r27, 0x17	; 23
    1aaa:	a0 f0       	brcs	.+40     	; 0x1ad4 <__fixunssfsi+0x38>
    1aac:	d1 f0       	breq	.+52     	; 0x1ae2 <__fixunssfsi+0x46>
    1aae:	66 0f       	add	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	1a f0       	brmi	.+6      	; 0x1abe <__fixunssfsi+0x22>
    1ab8:	ba 95       	dec	r27
    1aba:	c9 f7       	brne	.-14     	; 0x1aae <__fixunssfsi+0x12>
    1abc:	12 c0       	rjmp	.+36     	; 0x1ae2 <__fixunssfsi+0x46>
    1abe:	b1 30       	cpi	r27, 0x01	; 1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <__fixunssfsi+0x46>
    1ac2:	d8 d0       	rcall	.+432    	; 0x1c74 <__fp_zero>
    1ac4:	b1 e0       	ldi	r27, 0x01	; 1
    1ac6:	08 95       	ret
    1ac8:	d5 c0       	rjmp	.+426    	; 0x1c74 <__fp_zero>
    1aca:	67 2f       	mov	r22, r23
    1acc:	78 2f       	mov	r23, r24
    1ace:	88 27       	eor	r24, r24
    1ad0:	b8 5f       	subi	r27, 0xF8	; 248
    1ad2:	39 f0       	breq	.+14     	; 0x1ae2 <__fixunssfsi+0x46>
    1ad4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ad6:	cc f3       	brlt	.-14     	; 0x1aca <__fixunssfsi+0x2e>
    1ad8:	86 95       	lsr	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	b3 95       	inc	r27
    1ae0:	d9 f7       	brne	.-10     	; 0x1ad8 <__fixunssfsi+0x3c>
    1ae2:	3e f4       	brtc	.+14     	; 0x1af2 <__fixunssfsi+0x56>
    1ae4:	90 95       	com	r25
    1ae6:	80 95       	com	r24
    1ae8:	70 95       	com	r23
    1aea:	61 95       	neg	r22
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	08 95       	ret

00001af4 <__floatunsisf>:
    1af4:	e8 94       	clt
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <__floatsisf+0x12>

00001af8 <__floatsisf>:
    1af8:	97 fb       	bst	r25, 7
    1afa:	3e f4       	brtc	.+14     	; 0x1b0a <__floatsisf+0x12>
    1afc:	90 95       	com	r25
    1afe:	80 95       	com	r24
    1b00:	70 95       	com	r23
    1b02:	61 95       	neg	r22
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	99 23       	and	r25, r25
    1b0c:	a9 f0       	breq	.+42     	; 0x1b38 <__floatsisf+0x40>
    1b0e:	f9 2f       	mov	r31, r25
    1b10:	96 e9       	ldi	r25, 0x96	; 150
    1b12:	bb 27       	eor	r27, r27
    1b14:	93 95       	inc	r25
    1b16:	f6 95       	lsr	r31
    1b18:	87 95       	ror	r24
    1b1a:	77 95       	ror	r23
    1b1c:	67 95       	ror	r22
    1b1e:	b7 95       	ror	r27
    1b20:	f1 11       	cpse	r31, r1
    1b22:	f8 cf       	rjmp	.-16     	; 0x1b14 <__floatsisf+0x1c>
    1b24:	fa f4       	brpl	.+62     	; 0x1b64 <__floatsisf+0x6c>
    1b26:	bb 0f       	add	r27, r27
    1b28:	11 f4       	brne	.+4      	; 0x1b2e <__floatsisf+0x36>
    1b2a:	60 ff       	sbrs	r22, 0
    1b2c:	1b c0       	rjmp	.+54     	; 0x1b64 <__floatsisf+0x6c>
    1b2e:	6f 5f       	subi	r22, 0xFF	; 255
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    1b32:	8f 4f       	sbci	r24, 0xFF	; 255
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	16 c0       	rjmp	.+44     	; 0x1b64 <__floatsisf+0x6c>
    1b38:	88 23       	and	r24, r24
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <__floatsisf+0x48>
    1b3c:	96 e9       	ldi	r25, 0x96	; 150
    1b3e:	11 c0       	rjmp	.+34     	; 0x1b62 <__floatsisf+0x6a>
    1b40:	77 23       	and	r23, r23
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <__floatsisf+0x54>
    1b44:	9e e8       	ldi	r25, 0x8E	; 142
    1b46:	87 2f       	mov	r24, r23
    1b48:	76 2f       	mov	r23, r22
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <__floatsisf+0x5e>
    1b4c:	66 23       	and	r22, r22
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <__floatsisf+0x74>
    1b50:	96 e8       	ldi	r25, 0x86	; 134
    1b52:	86 2f       	mov	r24, r22
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	2a f0       	brmi	.+10     	; 0x1b64 <__floatsisf+0x6c>
    1b5a:	9a 95       	dec	r25
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	da f7       	brpl	.-10     	; 0x1b5a <__floatsisf+0x62>
    1b64:	88 0f       	add	r24, r24
    1b66:	96 95       	lsr	r25
    1b68:	87 95       	ror	r24
    1b6a:	97 f9       	bld	r25, 7
    1b6c:	08 95       	ret

00001b6e <__fp_inf>:
    1b6e:	97 f9       	bld	r25, 7
    1b70:	9f 67       	ori	r25, 0x7F	; 127
    1b72:	80 e8       	ldi	r24, 0x80	; 128
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	08 95       	ret

00001b7a <__fp_nan>:
    1b7a:	9f ef       	ldi	r25, 0xFF	; 255
    1b7c:	80 ec       	ldi	r24, 0xC0	; 192
    1b7e:	08 95       	ret

00001b80 <__fp_pscA>:
    1b80:	00 24       	eor	r0, r0
    1b82:	0a 94       	dec	r0
    1b84:	16 16       	cp	r1, r22
    1b86:	17 06       	cpc	r1, r23
    1b88:	18 06       	cpc	r1, r24
    1b8a:	09 06       	cpc	r0, r25
    1b8c:	08 95       	ret

00001b8e <__fp_pscB>:
    1b8e:	00 24       	eor	r0, r0
    1b90:	0a 94       	dec	r0
    1b92:	12 16       	cp	r1, r18
    1b94:	13 06       	cpc	r1, r19
    1b96:	14 06       	cpc	r1, r20
    1b98:	05 06       	cpc	r0, r21
    1b9a:	08 95       	ret
    1b9c:	ee cf       	rjmp	.-36     	; 0x1b7a <__fp_nan>

00001b9e <__fp_rempio2>:
    1b9e:	50 d0       	rcall	.+160    	; 0x1c40 <__fp_splitA>
    1ba0:	e8 f3       	brcs	.-6      	; 0x1b9c <__fp_pscB+0xe>
    1ba2:	e8 94       	clt
    1ba4:	e0 e0       	ldi	r30, 0x00	; 0
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	9f 57       	subi	r25, 0x7F	; 127
    1baa:	f0 f0       	brcs	.+60     	; 0x1be8 <__fp_rempio2+0x4a>
    1bac:	2a ed       	ldi	r18, 0xDA	; 218
    1bae:	3f e0       	ldi	r19, 0x0F	; 15
    1bb0:	49 ec       	ldi	r20, 0xC9	; 201
    1bb2:	06 c0       	rjmp	.+12     	; 0x1bc0 <__fp_rempio2+0x22>
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	bb 0f       	add	r27, r27
    1bb8:	66 1f       	adc	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	28 f0       	brcs	.+10     	; 0x1bca <__fp_rempio2+0x2c>
    1bc0:	b2 3a       	cpi	r27, 0xA2	; 162
    1bc2:	62 07       	cpc	r22, r18
    1bc4:	73 07       	cpc	r23, r19
    1bc6:	84 07       	cpc	r24, r20
    1bc8:	28 f0       	brcs	.+10     	; 0x1bd4 <__fp_rempio2+0x36>
    1bca:	b2 5a       	subi	r27, 0xA2	; 162
    1bcc:	62 0b       	sbc	r22, r18
    1bce:	73 0b       	sbc	r23, r19
    1bd0:	84 0b       	sbc	r24, r20
    1bd2:	e3 95       	inc	r30
    1bd4:	9a 95       	dec	r25
    1bd6:	72 f7       	brpl	.-36     	; 0x1bb4 <__fp_rempio2+0x16>
    1bd8:	80 38       	cpi	r24, 0x80	; 128
    1bda:	30 f4       	brcc	.+12     	; 0x1be8 <__fp_rempio2+0x4a>
    1bdc:	9a 95       	dec	r25
    1bde:	bb 0f       	add	r27, r27
    1be0:	66 1f       	adc	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	d2 f7       	brpl	.-12     	; 0x1bdc <__fp_rempio2+0x3e>
    1be8:	90 48       	sbci	r25, 0x80	; 128
    1bea:	b0 c0       	rjmp	.+352    	; 0x1d4c <__fp_mpack_finite>

00001bec <__fp_round>:
    1bec:	09 2e       	mov	r0, r25
    1bee:	03 94       	inc	r0
    1bf0:	00 0c       	add	r0, r0
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <__fp_round+0xc>
    1bf4:	88 23       	and	r24, r24
    1bf6:	52 f0       	brmi	.+20     	; 0x1c0c <__fp_round+0x20>
    1bf8:	bb 0f       	add	r27, r27
    1bfa:	40 f4       	brcc	.+16     	; 0x1c0c <__fp_round+0x20>
    1bfc:	bf 2b       	or	r27, r31
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <__fp_round+0x18>
    1c00:	60 ff       	sbrs	r22, 0
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <__fp_round+0x20>
    1c04:	6f 5f       	subi	r22, 0xFF	; 255
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	08 95       	ret

00001c0e <__fp_sinus>:
    1c0e:	ef 93       	push	r30
    1c10:	e0 ff       	sbrs	r30, 0
    1c12:	06 c0       	rjmp	.+12     	; 0x1c20 <__fp_sinus+0x12>
    1c14:	a2 ea       	ldi	r26, 0xA2	; 162
    1c16:	2a ed       	ldi	r18, 0xDA	; 218
    1c18:	3f e0       	ldi	r19, 0x0F	; 15
    1c1a:	49 ec       	ldi	r20, 0xC9	; 201
    1c1c:	5f eb       	ldi	r21, 0xBF	; 191
    1c1e:	7b de       	rcall	.-778    	; 0x1916 <__addsf3x>
    1c20:	e5 df       	rcall	.-54     	; 0x1bec <__fp_round>
    1c22:	0f 90       	pop	r0
    1c24:	03 94       	inc	r0
    1c26:	01 fc       	sbrc	r0, 1
    1c28:	90 58       	subi	r25, 0x80	; 128
    1c2a:	e8 e6       	ldi	r30, 0x68	; 104
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	9a c0       	rjmp	.+308    	; 0x1d64 <__fp_powsodd>

00001c30 <__fp_split3>:
    1c30:	57 fd       	sbrc	r21, 7
    1c32:	90 58       	subi	r25, 0x80	; 128
    1c34:	44 0f       	add	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	59 f0       	breq	.+22     	; 0x1c50 <__fp_splitA+0x10>
    1c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3c:	71 f0       	breq	.+28     	; 0x1c5a <__fp_splitA+0x1a>
    1c3e:	47 95       	ror	r20

00001c40 <__fp_splitA>:
    1c40:	88 0f       	add	r24, r24
    1c42:	97 fb       	bst	r25, 7
    1c44:	99 1f       	adc	r25, r25
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <__fp_splitA+0x20>
    1c48:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4a:	79 f0       	breq	.+30     	; 0x1c6a <__fp_splitA+0x2a>
    1c4c:	87 95       	ror	r24
    1c4e:	08 95       	ret
    1c50:	12 16       	cp	r1, r18
    1c52:	13 06       	cpc	r1, r19
    1c54:	14 06       	cpc	r1, r20
    1c56:	55 1f       	adc	r21, r21
    1c58:	f2 cf       	rjmp	.-28     	; 0x1c3e <__fp_split3+0xe>
    1c5a:	46 95       	lsr	r20
    1c5c:	f1 df       	rcall	.-30     	; 0x1c40 <__fp_splitA>
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <__fp_splitA+0x30>
    1c60:	16 16       	cp	r1, r22
    1c62:	17 06       	cpc	r1, r23
    1c64:	18 06       	cpc	r1, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	f1 cf       	rjmp	.-30     	; 0x1c4c <__fp_splitA+0xc>
    1c6a:	86 95       	lsr	r24
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	61 05       	cpc	r22, r1
    1c70:	08 94       	sec
    1c72:	08 95       	ret

00001c74 <__fp_zero>:
    1c74:	e8 94       	clt

00001c76 <__fp_szero>:
    1c76:	bb 27       	eor	r27, r27
    1c78:	66 27       	eor	r22, r22
    1c7a:	77 27       	eor	r23, r23
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	97 f9       	bld	r25, 7
    1c80:	08 95       	ret

00001c82 <__mulsf3>:
    1c82:	0b d0       	rcall	.+22     	; 0x1c9a <__mulsf3x>
    1c84:	b3 cf       	rjmp	.-154    	; 0x1bec <__fp_round>
    1c86:	7c df       	rcall	.-264    	; 0x1b80 <__fp_pscA>
    1c88:	28 f0       	brcs	.+10     	; 0x1c94 <__mulsf3+0x12>
    1c8a:	81 df       	rcall	.-254    	; 0x1b8e <__fp_pscB>
    1c8c:	18 f0       	brcs	.+6      	; 0x1c94 <__mulsf3+0x12>
    1c8e:	95 23       	and	r25, r21
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <__mulsf3+0x12>
    1c92:	6d cf       	rjmp	.-294    	; 0x1b6e <__fp_inf>
    1c94:	72 cf       	rjmp	.-284    	; 0x1b7a <__fp_nan>
    1c96:	11 24       	eor	r1, r1
    1c98:	ee cf       	rjmp	.-36     	; 0x1c76 <__fp_szero>

00001c9a <__mulsf3x>:
    1c9a:	ca df       	rcall	.-108    	; 0x1c30 <__fp_split3>
    1c9c:	a0 f3       	brcs	.-24     	; 0x1c86 <__mulsf3+0x4>

00001c9e <__mulsf3_pse>:
    1c9e:	95 9f       	mul	r25, r21
    1ca0:	d1 f3       	breq	.-12     	; 0x1c96 <__mulsf3+0x14>
    1ca2:	95 0f       	add	r25, r21
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	55 1f       	adc	r21, r21
    1ca8:	62 9f       	mul	r22, r18
    1caa:	f0 01       	movw	r30, r0
    1cac:	72 9f       	mul	r23, r18
    1cae:	bb 27       	eor	r27, r27
    1cb0:	f0 0d       	add	r31, r0
    1cb2:	b1 1d       	adc	r27, r1
    1cb4:	63 9f       	mul	r22, r19
    1cb6:	aa 27       	eor	r26, r26
    1cb8:	f0 0d       	add	r31, r0
    1cba:	b1 1d       	adc	r27, r1
    1cbc:	aa 1f       	adc	r26, r26
    1cbe:	64 9f       	mul	r22, r20
    1cc0:	66 27       	eor	r22, r22
    1cc2:	b0 0d       	add	r27, r0
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	66 1f       	adc	r22, r22
    1cc8:	82 9f       	mul	r24, r18
    1cca:	22 27       	eor	r18, r18
    1ccc:	b0 0d       	add	r27, r0
    1cce:	a1 1d       	adc	r26, r1
    1cd0:	62 1f       	adc	r22, r18
    1cd2:	73 9f       	mul	r23, r19
    1cd4:	b0 0d       	add	r27, r0
    1cd6:	a1 1d       	adc	r26, r1
    1cd8:	62 1f       	adc	r22, r18
    1cda:	83 9f       	mul	r24, r19
    1cdc:	a0 0d       	add	r26, r0
    1cde:	61 1d       	adc	r22, r1
    1ce0:	22 1f       	adc	r18, r18
    1ce2:	74 9f       	mul	r23, r20
    1ce4:	33 27       	eor	r19, r19
    1ce6:	a0 0d       	add	r26, r0
    1ce8:	61 1d       	adc	r22, r1
    1cea:	23 1f       	adc	r18, r19
    1cec:	84 9f       	mul	r24, r20
    1cee:	60 0d       	add	r22, r0
    1cf0:	21 1d       	adc	r18, r1
    1cf2:	82 2f       	mov	r24, r18
    1cf4:	76 2f       	mov	r23, r22
    1cf6:	6a 2f       	mov	r22, r26
    1cf8:	11 24       	eor	r1, r1
    1cfa:	9f 57       	subi	r25, 0x7F	; 127
    1cfc:	50 40       	sbci	r21, 0x00	; 0
    1cfe:	8a f0       	brmi	.+34     	; 0x1d22 <__mulsf3_pse+0x84>
    1d00:	e1 f0       	breq	.+56     	; 0x1d3a <__mulsf3_pse+0x9c>
    1d02:	88 23       	and	r24, r24
    1d04:	4a f0       	brmi	.+18     	; 0x1d18 <__mulsf3_pse+0x7a>
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	66 1f       	adc	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	88 1f       	adc	r24, r24
    1d12:	91 50       	subi	r25, 0x01	; 1
    1d14:	50 40       	sbci	r21, 0x00	; 0
    1d16:	a9 f7       	brne	.-22     	; 0x1d02 <__mulsf3_pse+0x64>
    1d18:	9e 3f       	cpi	r25, 0xFE	; 254
    1d1a:	51 05       	cpc	r21, r1
    1d1c:	70 f0       	brcs	.+28     	; 0x1d3a <__mulsf3_pse+0x9c>
    1d1e:	27 cf       	rjmp	.-434    	; 0x1b6e <__fp_inf>
    1d20:	aa cf       	rjmp	.-172    	; 0x1c76 <__fp_szero>
    1d22:	5f 3f       	cpi	r21, 0xFF	; 255
    1d24:	ec f3       	brlt	.-6      	; 0x1d20 <__mulsf3_pse+0x82>
    1d26:	98 3e       	cpi	r25, 0xE8	; 232
    1d28:	dc f3       	brlt	.-10     	; 0x1d20 <__mulsf3_pse+0x82>
    1d2a:	86 95       	lsr	r24
    1d2c:	77 95       	ror	r23
    1d2e:	67 95       	ror	r22
    1d30:	b7 95       	ror	r27
    1d32:	f7 95       	ror	r31
    1d34:	e7 95       	ror	r30
    1d36:	9f 5f       	subi	r25, 0xFF	; 255
    1d38:	c1 f7       	brne	.-16     	; 0x1d2a <__mulsf3_pse+0x8c>
    1d3a:	fe 2b       	or	r31, r30
    1d3c:	88 0f       	add	r24, r24
    1d3e:	91 1d       	adc	r25, r1
    1d40:	96 95       	lsr	r25
    1d42:	87 95       	ror	r24
    1d44:	97 f9       	bld	r25, 7
    1d46:	08 95       	ret

00001d48 <__fp_mpack>:
    1d48:	9f 3f       	cpi	r25, 0xFF	; 255
    1d4a:	31 f0       	breq	.+12     	; 0x1d58 <__fp_mpack_finite+0xc>

00001d4c <__fp_mpack_finite>:
    1d4c:	91 50       	subi	r25, 0x01	; 1
    1d4e:	20 f4       	brcc	.+8      	; 0x1d58 <__fp_mpack_finite+0xc>
    1d50:	87 95       	ror	r24
    1d52:	77 95       	ror	r23
    1d54:	67 95       	ror	r22
    1d56:	b7 95       	ror	r27
    1d58:	88 0f       	add	r24, r24
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	96 95       	lsr	r25
    1d5e:	87 95       	ror	r24
    1d60:	97 f9       	bld	r25, 7
    1d62:	08 95       	ret

00001d64 <__fp_powsodd>:
    1d64:	9f 93       	push	r25
    1d66:	8f 93       	push	r24
    1d68:	7f 93       	push	r23
    1d6a:	6f 93       	push	r22
    1d6c:	ff 93       	push	r31
    1d6e:	ef 93       	push	r30
    1d70:	9b 01       	movw	r18, r22
    1d72:	ac 01       	movw	r20, r24
    1d74:	86 df       	rcall	.-244    	; 0x1c82 <__mulsf3>
    1d76:	ef 91       	pop	r30
    1d78:	ff 91       	pop	r31
    1d7a:	05 d0       	rcall	.+10     	; 0x1d86 <__fp_powser>
    1d7c:	2f 91       	pop	r18
    1d7e:	3f 91       	pop	r19
    1d80:	4f 91       	pop	r20
    1d82:	5f 91       	pop	r21
    1d84:	7e cf       	rjmp	.-260    	; 0x1c82 <__mulsf3>

00001d86 <__fp_powser>:
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	1f 93       	push	r17
    1d8c:	0f 93       	push	r16
    1d8e:	ff 92       	push	r15
    1d90:	ef 92       	push	r14
    1d92:	df 92       	push	r13
    1d94:	7b 01       	movw	r14, r22
    1d96:	8c 01       	movw	r16, r24
    1d98:	68 94       	set
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <__fp_powser+0x20>
    1d9c:	da 2e       	mov	r13, r26
    1d9e:	ef 01       	movw	r28, r30
    1da0:	7c df       	rcall	.-264    	; 0x1c9a <__mulsf3x>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e8 94       	clt
    1da6:	a5 91       	lpm	r26, Z+
    1da8:	25 91       	lpm	r18, Z+
    1daa:	35 91       	lpm	r19, Z+
    1dac:	45 91       	lpm	r20, Z+
    1dae:	55 91       	lpm	r21, Z+
    1db0:	ae f3       	brts	.-22     	; 0x1d9c <__fp_powser+0x16>
    1db2:	ef 01       	movw	r28, r30
    1db4:	b0 dd       	rcall	.-1184   	; 0x1916 <__addsf3x>
    1db6:	fe 01       	movw	r30, r28
    1db8:	97 01       	movw	r18, r14
    1dba:	a8 01       	movw	r20, r16
    1dbc:	da 94       	dec	r13
    1dbe:	79 f7       	brne	.-34     	; 0x1d9e <__fp_powser+0x18>
    1dc0:	df 90       	pop	r13
    1dc2:	ef 90       	pop	r14
    1dc4:	ff 90       	pop	r15
    1dc6:	0f 91       	pop	r16
    1dc8:	1f 91       	pop	r17
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <__mulsi3>:
    1dd0:	62 9f       	mul	r22, r18
    1dd2:	d0 01       	movw	r26, r0
    1dd4:	73 9f       	mul	r23, r19
    1dd6:	f0 01       	movw	r30, r0
    1dd8:	82 9f       	mul	r24, r18
    1dda:	e0 0d       	add	r30, r0
    1ddc:	f1 1d       	adc	r31, r1
    1dde:	64 9f       	mul	r22, r20
    1de0:	e0 0d       	add	r30, r0
    1de2:	f1 1d       	adc	r31, r1
    1de4:	92 9f       	mul	r25, r18
    1de6:	f0 0d       	add	r31, r0
    1de8:	83 9f       	mul	r24, r19
    1dea:	f0 0d       	add	r31, r0
    1dec:	74 9f       	mul	r23, r20
    1dee:	f0 0d       	add	r31, r0
    1df0:	65 9f       	mul	r22, r21
    1df2:	f0 0d       	add	r31, r0
    1df4:	99 27       	eor	r25, r25
    1df6:	72 9f       	mul	r23, r18
    1df8:	b0 0d       	add	r27, r0
    1dfa:	e1 1d       	adc	r30, r1
    1dfc:	f9 1f       	adc	r31, r25
    1dfe:	63 9f       	mul	r22, r19
    1e00:	b0 0d       	add	r27, r0
    1e02:	e1 1d       	adc	r30, r1
    1e04:	f9 1f       	adc	r31, r25
    1e06:	bd 01       	movw	r22, r26
    1e08:	cf 01       	movw	r24, r30
    1e0a:	11 24       	eor	r1, r1
    1e0c:	08 95       	ret

00001e0e <__divmodhi4>:
    1e0e:	97 fb       	bst	r25, 7
    1e10:	09 2e       	mov	r0, r25
    1e12:	07 26       	eor	r0, r23
    1e14:	0a d0       	rcall	.+20     	; 0x1e2a <__divmodhi4_neg1>
    1e16:	77 fd       	sbrc	r23, 7
    1e18:	04 d0       	rcall	.+8      	; 0x1e22 <__divmodhi4_neg2>
    1e1a:	49 d0       	rcall	.+146    	; 0x1eae <__udivmodhi4>
    1e1c:	06 d0       	rcall	.+12     	; 0x1e2a <__divmodhi4_neg1>
    1e1e:	00 20       	and	r0, r0
    1e20:	1a f4       	brpl	.+6      	; 0x1e28 <__divmodhi4_exit>

00001e22 <__divmodhi4_neg2>:
    1e22:	70 95       	com	r23
    1e24:	61 95       	neg	r22
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255

00001e28 <__divmodhi4_exit>:
    1e28:	08 95       	ret

00001e2a <__divmodhi4_neg1>:
    1e2a:	f6 f7       	brtc	.-4      	; 0x1e28 <__divmodhi4_exit>
    1e2c:	90 95       	com	r25
    1e2e:	81 95       	neg	r24
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	08 95       	ret

00001e34 <__udivmodsi4>:
    1e34:	a1 e2       	ldi	r26, 0x21	; 33
    1e36:	1a 2e       	mov	r1, r26
    1e38:	aa 1b       	sub	r26, r26
    1e3a:	bb 1b       	sub	r27, r27
    1e3c:	fd 01       	movw	r30, r26
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <__udivmodsi4_ep>

00001e40 <__udivmodsi4_loop>:
    1e40:	aa 1f       	adc	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	ee 1f       	adc	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	a2 17       	cp	r26, r18
    1e4a:	b3 07       	cpc	r27, r19
    1e4c:	e4 07       	cpc	r30, r20
    1e4e:	f5 07       	cpc	r31, r21
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__udivmodsi4_ep>
    1e52:	a2 1b       	sub	r26, r18
    1e54:	b3 0b       	sbc	r27, r19
    1e56:	e4 0b       	sbc	r30, r20
    1e58:	f5 0b       	sbc	r31, r21

00001e5a <__udivmodsi4_ep>:
    1e5a:	66 1f       	adc	r22, r22
    1e5c:	77 1f       	adc	r23, r23
    1e5e:	88 1f       	adc	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	1a 94       	dec	r1
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <__udivmodsi4_loop>
    1e66:	60 95       	com	r22
    1e68:	70 95       	com	r23
    1e6a:	80 95       	com	r24
    1e6c:	90 95       	com	r25
    1e6e:	9b 01       	movw	r18, r22
    1e70:	ac 01       	movw	r20, r24
    1e72:	bd 01       	movw	r22, r26
    1e74:	cf 01       	movw	r24, r30
    1e76:	08 95       	ret

00001e78 <__divmodsi4>:
    1e78:	97 fb       	bst	r25, 7
    1e7a:	09 2e       	mov	r0, r25
    1e7c:	05 26       	eor	r0, r21
    1e7e:	0e d0       	rcall	.+28     	; 0x1e9c <__divmodsi4_neg1>
    1e80:	57 fd       	sbrc	r21, 7
    1e82:	04 d0       	rcall	.+8      	; 0x1e8c <__divmodsi4_neg2>
    1e84:	d7 df       	rcall	.-82     	; 0x1e34 <__udivmodsi4>
    1e86:	0a d0       	rcall	.+20     	; 0x1e9c <__divmodsi4_neg1>
    1e88:	00 1c       	adc	r0, r0
    1e8a:	38 f4       	brcc	.+14     	; 0x1e9a <__divmodsi4_exit>

00001e8c <__divmodsi4_neg2>:
    1e8c:	50 95       	com	r21
    1e8e:	40 95       	com	r20
    1e90:	30 95       	com	r19
    1e92:	21 95       	neg	r18
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	4f 4f       	sbci	r20, 0xFF	; 255
    1e98:	5f 4f       	sbci	r21, 0xFF	; 255

00001e9a <__divmodsi4_exit>:
    1e9a:	08 95       	ret

00001e9c <__divmodsi4_neg1>:
    1e9c:	f6 f7       	brtc	.-4      	; 0x1e9a <__divmodsi4_exit>
    1e9e:	90 95       	com	r25
    1ea0:	80 95       	com	r24
    1ea2:	70 95       	com	r23
    1ea4:	61 95       	neg	r22
    1ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	08 95       	ret

00001eae <__udivmodhi4>:
    1eae:	aa 1b       	sub	r26, r26
    1eb0:	bb 1b       	sub	r27, r27
    1eb2:	51 e1       	ldi	r21, 0x11	; 17
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <__udivmodhi4_ep>

00001eb6 <__udivmodhi4_loop>:
    1eb6:	aa 1f       	adc	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	a6 17       	cp	r26, r22
    1ebc:	b7 07       	cpc	r27, r23
    1ebe:	10 f0       	brcs	.+4      	; 0x1ec4 <__udivmodhi4_ep>
    1ec0:	a6 1b       	sub	r26, r22
    1ec2:	b7 0b       	sbc	r27, r23

00001ec4 <__udivmodhi4_ep>:
    1ec4:	88 1f       	adc	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	5a 95       	dec	r21
    1eca:	a9 f7       	brne	.-22     	; 0x1eb6 <__udivmodhi4_loop>
    1ecc:	80 95       	com	r24
    1ece:	90 95       	com	r25
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	08 95       	ret

00001ed6 <__tablejump2__>:
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31

00001eda <__tablejump__>:
    1eda:	05 90       	lpm	r0, Z+
    1edc:	f4 91       	lpm	r31, Z+
    1ede:	e0 2d       	mov	r30, r0
    1ee0:	09 94       	ijmp

00001ee2 <sprintf>:
    1ee2:	ae e0       	ldi	r26, 0x0E	; 14
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e7 e7       	ldi	r30, 0x77	; 119
    1ee8:	ff e0       	ldi	r31, 0x0F	; 15
    1eea:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x1c>
    1eee:	0d 89       	ldd	r16, Y+21	; 0x15
    1ef0:	1e 89       	ldd	r17, Y+22	; 0x16
    1ef2:	86 e0       	ldi	r24, 0x06	; 6
    1ef4:	8c 83       	std	Y+4, r24	; 0x04
    1ef6:	1a 83       	std	Y+2, r17	; 0x02
    1ef8:	09 83       	std	Y+1, r16	; 0x01
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	9f e7       	ldi	r25, 0x7F	; 127
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	9e 01       	movw	r18, r28
    1f04:	27 5e       	subi	r18, 0xE7	; 231
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	ce 01       	movw	r24, r28
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	6f 89       	ldd	r22, Y+23	; 0x17
    1f0e:	78 8d       	ldd	r23, Y+24	; 0x18
    1f10:	a9 01       	movw	r20, r18
    1f12:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <vfprintf>
    1f16:	2f 81       	ldd	r18, Y+7	; 0x07
    1f18:	38 85       	ldd	r19, Y+8	; 0x08
    1f1a:	02 0f       	add	r16, r18
    1f1c:	13 1f       	adc	r17, r19
    1f1e:	f8 01       	movw	r30, r16
    1f20:	10 82       	st	Z, r1
    1f22:	2e 96       	adiw	r28, 0x0e	; 14
    1f24:	e4 e0       	ldi	r30, 0x04	; 4
    1f26:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x1c>

00001f2a <vfprintf>:
    1f2a:	ab e0       	ldi	r26, 0x0B	; 11
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	eb e9       	ldi	r30, 0x9B	; 155
    1f30:	ff e0       	ldi	r31, 0x0F	; 15
    1f32:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__prologue_saves__>
    1f36:	3c 01       	movw	r6, r24
    1f38:	2b 01       	movw	r4, r22
    1f3a:	5a 01       	movw	r10, r20
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	17 82       	std	Z+7, r1	; 0x07
    1f40:	16 82       	std	Z+6, r1	; 0x06
    1f42:	83 81       	ldd	r24, Z+3	; 0x03
    1f44:	81 fd       	sbrc	r24, 1
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <vfprintf+0x24>
    1f48:	6f ef       	ldi	r22, 0xFF	; 255
    1f4a:	7f ef       	ldi	r23, 0xFF	; 255
    1f4c:	c6 c1       	rjmp	.+908    	; 0x22da <vfprintf+0x3b0>
    1f4e:	9a e0       	ldi	r25, 0x0A	; 10
    1f50:	89 2e       	mov	r8, r25
    1f52:	1e 01       	movw	r2, r28
    1f54:	08 94       	sec
    1f56:	21 1c       	adc	r2, r1
    1f58:	31 1c       	adc	r3, r1
    1f5a:	f3 01       	movw	r30, r6
    1f5c:	23 81       	ldd	r18, Z+3	; 0x03
    1f5e:	f2 01       	movw	r30, r4
    1f60:	23 fd       	sbrc	r18, 3
    1f62:	85 91       	lpm	r24, Z+
    1f64:	23 ff       	sbrs	r18, 3
    1f66:	81 91       	ld	r24, Z+
    1f68:	2f 01       	movw	r4, r30
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <vfprintf+0x46>
    1f6e:	b2 c1       	rjmp	.+868    	; 0x22d4 <vfprintf+0x3aa>
    1f70:	85 32       	cpi	r24, 0x25	; 37
    1f72:	39 f4       	brne	.+14     	; 0x1f82 <vfprintf+0x58>
    1f74:	23 fd       	sbrc	r18, 3
    1f76:	85 91       	lpm	r24, Z+
    1f78:	23 ff       	sbrs	r18, 3
    1f7a:	81 91       	ld	r24, Z+
    1f7c:	2f 01       	movw	r4, r30
    1f7e:	85 32       	cpi	r24, 0x25	; 37
    1f80:	29 f4       	brne	.+10     	; 0x1f8c <vfprintf+0x62>
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	b3 01       	movw	r22, r6
    1f86:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    1f8a:	e7 cf       	rjmp	.-50     	; 0x1f5a <vfprintf+0x30>
    1f8c:	98 2f       	mov	r25, r24
    1f8e:	ff 24       	eor	r15, r15
    1f90:	ee 24       	eor	r14, r14
    1f92:	99 24       	eor	r9, r9
    1f94:	ff e1       	ldi	r31, 0x1F	; 31
    1f96:	ff 15       	cp	r31, r15
    1f98:	d0 f0       	brcs	.+52     	; 0x1fce <vfprintf+0xa4>
    1f9a:	9b 32       	cpi	r25, 0x2B	; 43
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <vfprintf+0x8e>
    1f9e:	9c 32       	cpi	r25, 0x2C	; 44
    1fa0:	28 f4       	brcc	.+10     	; 0x1fac <vfprintf+0x82>
    1fa2:	90 32       	cpi	r25, 0x20	; 32
    1fa4:	59 f0       	breq	.+22     	; 0x1fbc <vfprintf+0x92>
    1fa6:	93 32       	cpi	r25, 0x23	; 35
    1fa8:	91 f4       	brne	.+36     	; 0x1fce <vfprintf+0xa4>
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <vfprintf+0x9e>
    1fac:	9d 32       	cpi	r25, 0x2D	; 45
    1fae:	49 f0       	breq	.+18     	; 0x1fc2 <vfprintf+0x98>
    1fb0:	90 33       	cpi	r25, 0x30	; 48
    1fb2:	69 f4       	brne	.+26     	; 0x1fce <vfprintf+0xa4>
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	24 c0       	rjmp	.+72     	; 0x2000 <vfprintf+0xd6>
    1fb8:	52 e0       	ldi	r21, 0x02	; 2
    1fba:	f5 2a       	or	r15, r21
    1fbc:	84 e0       	ldi	r24, 0x04	; 4
    1fbe:	f8 2a       	or	r15, r24
    1fc0:	28 c0       	rjmp	.+80     	; 0x2012 <vfprintf+0xe8>
    1fc2:	98 e0       	ldi	r25, 0x08	; 8
    1fc4:	f9 2a       	or	r15, r25
    1fc6:	25 c0       	rjmp	.+74     	; 0x2012 <vfprintf+0xe8>
    1fc8:	e0 e1       	ldi	r30, 0x10	; 16
    1fca:	fe 2a       	or	r15, r30
    1fcc:	22 c0       	rjmp	.+68     	; 0x2012 <vfprintf+0xe8>
    1fce:	f7 fc       	sbrc	r15, 7
    1fd0:	29 c0       	rjmp	.+82     	; 0x2024 <vfprintf+0xfa>
    1fd2:	89 2f       	mov	r24, r25
    1fd4:	80 53       	subi	r24, 0x30	; 48
    1fd6:	8a 30       	cpi	r24, 0x0A	; 10
    1fd8:	70 f4       	brcc	.+28     	; 0x1ff6 <vfprintf+0xcc>
    1fda:	f6 fe       	sbrs	r15, 6
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <vfprintf+0xbe>
    1fde:	98 9c       	mul	r9, r8
    1fe0:	90 2c       	mov	r9, r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	98 0e       	add	r9, r24
    1fe6:	15 c0       	rjmp	.+42     	; 0x2012 <vfprintf+0xe8>
    1fe8:	e8 9c       	mul	r14, r8
    1fea:	e0 2c       	mov	r14, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	e8 0e       	add	r14, r24
    1ff0:	f0 e2       	ldi	r31, 0x20	; 32
    1ff2:	ff 2a       	or	r15, r31
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <vfprintf+0xe8>
    1ff6:	9e 32       	cpi	r25, 0x2E	; 46
    1ff8:	29 f4       	brne	.+10     	; 0x2004 <vfprintf+0xda>
    1ffa:	f6 fc       	sbrc	r15, 6
    1ffc:	6b c1       	rjmp	.+726    	; 0x22d4 <vfprintf+0x3aa>
    1ffe:	40 e4       	ldi	r20, 0x40	; 64
    2000:	f4 2a       	or	r15, r20
    2002:	07 c0       	rjmp	.+14     	; 0x2012 <vfprintf+0xe8>
    2004:	9c 36       	cpi	r25, 0x6C	; 108
    2006:	19 f4       	brne	.+6      	; 0x200e <vfprintf+0xe4>
    2008:	50 e8       	ldi	r21, 0x80	; 128
    200a:	f5 2a       	or	r15, r21
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <vfprintf+0xe8>
    200e:	98 36       	cpi	r25, 0x68	; 104
    2010:	49 f4       	brne	.+18     	; 0x2024 <vfprintf+0xfa>
    2012:	f2 01       	movw	r30, r4
    2014:	23 fd       	sbrc	r18, 3
    2016:	95 91       	lpm	r25, Z+
    2018:	23 ff       	sbrs	r18, 3
    201a:	91 91       	ld	r25, Z+
    201c:	2f 01       	movw	r4, r30
    201e:	99 23       	and	r25, r25
    2020:	09 f0       	breq	.+2      	; 0x2024 <vfprintf+0xfa>
    2022:	b8 cf       	rjmp	.-144    	; 0x1f94 <vfprintf+0x6a>
    2024:	89 2f       	mov	r24, r25
    2026:	85 54       	subi	r24, 0x45	; 69
    2028:	83 30       	cpi	r24, 0x03	; 3
    202a:	18 f0       	brcs	.+6      	; 0x2032 <vfprintf+0x108>
    202c:	80 52       	subi	r24, 0x20	; 32
    202e:	83 30       	cpi	r24, 0x03	; 3
    2030:	38 f4       	brcc	.+14     	; 0x2040 <vfprintf+0x116>
    2032:	44 e0       	ldi	r20, 0x04	; 4
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	a4 0e       	add	r10, r20
    2038:	b5 1e       	adc	r11, r21
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	59 83       	std	Y+1, r21	; 0x01
    203e:	0f c0       	rjmp	.+30     	; 0x205e <vfprintf+0x134>
    2040:	93 36       	cpi	r25, 0x63	; 99
    2042:	31 f0       	breq	.+12     	; 0x2050 <vfprintf+0x126>
    2044:	93 37       	cpi	r25, 0x73	; 115
    2046:	79 f0       	breq	.+30     	; 0x2066 <vfprintf+0x13c>
    2048:	93 35       	cpi	r25, 0x53	; 83
    204a:	09 f0       	breq	.+2      	; 0x204e <vfprintf+0x124>
    204c:	56 c0       	rjmp	.+172    	; 0x20fa <vfprintf+0x1d0>
    204e:	20 c0       	rjmp	.+64     	; 0x2090 <vfprintf+0x166>
    2050:	f5 01       	movw	r30, r10
    2052:	80 81       	ld	r24, Z
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	42 e0       	ldi	r20, 0x02	; 2
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	a4 0e       	add	r10, r20
    205c:	b5 1e       	adc	r11, r21
    205e:	61 01       	movw	r12, r2
    2060:	01 e0       	ldi	r16, 0x01	; 1
    2062:	10 e0       	ldi	r17, 0x00	; 0
    2064:	12 c0       	rjmp	.+36     	; 0x208a <vfprintf+0x160>
    2066:	f5 01       	movw	r30, r10
    2068:	c0 80       	ld	r12, Z
    206a:	d1 80       	ldd	r13, Z+1	; 0x01
    206c:	f6 fc       	sbrc	r15, 6
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <vfprintf+0x14c>
    2070:	6f ef       	ldi	r22, 0xFF	; 255
    2072:	7f ef       	ldi	r23, 0xFF	; 255
    2074:	02 c0       	rjmp	.+4      	; 0x207a <vfprintf+0x150>
    2076:	69 2d       	mov	r22, r9
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	42 e0       	ldi	r20, 0x02	; 2
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	a4 0e       	add	r10, r20
    2080:	b5 1e       	adc	r11, r21
    2082:	c6 01       	movw	r24, r12
    2084:	0e 94 7d 11 	call	0x22fa	; 0x22fa <strnlen>
    2088:	8c 01       	movw	r16, r24
    208a:	5f e7       	ldi	r21, 0x7F	; 127
    208c:	f5 22       	and	r15, r21
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <vfprintf+0x18e>
    2090:	f5 01       	movw	r30, r10
    2092:	c0 80       	ld	r12, Z
    2094:	d1 80       	ldd	r13, Z+1	; 0x01
    2096:	f6 fc       	sbrc	r15, 6
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <vfprintf+0x176>
    209a:	6f ef       	ldi	r22, 0xFF	; 255
    209c:	7f ef       	ldi	r23, 0xFF	; 255
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <vfprintf+0x17a>
    20a0:	69 2d       	mov	r22, r9
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	42 e0       	ldi	r20, 0x02	; 2
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	a4 0e       	add	r10, r20
    20aa:	b5 1e       	adc	r11, r21
    20ac:	c6 01       	movw	r24, r12
    20ae:	0e 94 72 11 	call	0x22e4	; 0x22e4 <strnlen_P>
    20b2:	8c 01       	movw	r16, r24
    20b4:	50 e8       	ldi	r21, 0x80	; 128
    20b6:	f5 2a       	or	r15, r21
    20b8:	f3 fe       	sbrs	r15, 3
    20ba:	07 c0       	rjmp	.+14     	; 0x20ca <vfprintf+0x1a0>
    20bc:	1a c0       	rjmp	.+52     	; 0x20f2 <vfprintf+0x1c8>
    20be:	80 e2       	ldi	r24, 0x20	; 32
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	b3 01       	movw	r22, r6
    20c4:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    20c8:	ea 94       	dec	r14
    20ca:	8e 2d       	mov	r24, r14
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	08 17       	cp	r16, r24
    20d0:	19 07       	cpc	r17, r25
    20d2:	a8 f3       	brcs	.-22     	; 0x20be <vfprintf+0x194>
    20d4:	0e c0       	rjmp	.+28     	; 0x20f2 <vfprintf+0x1c8>
    20d6:	f6 01       	movw	r30, r12
    20d8:	f7 fc       	sbrc	r15, 7
    20da:	85 91       	lpm	r24, Z+
    20dc:	f7 fe       	sbrs	r15, 7
    20de:	81 91       	ld	r24, Z+
    20e0:	6f 01       	movw	r12, r30
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	b3 01       	movw	r22, r6
    20e6:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    20ea:	e1 10       	cpse	r14, r1
    20ec:	ea 94       	dec	r14
    20ee:	01 50       	subi	r16, 0x01	; 1
    20f0:	10 40       	sbci	r17, 0x00	; 0
    20f2:	01 15       	cp	r16, r1
    20f4:	11 05       	cpc	r17, r1
    20f6:	79 f7       	brne	.-34     	; 0x20d6 <vfprintf+0x1ac>
    20f8:	ea c0       	rjmp	.+468    	; 0x22ce <vfprintf+0x3a4>
    20fa:	94 36       	cpi	r25, 0x64	; 100
    20fc:	11 f0       	breq	.+4      	; 0x2102 <vfprintf+0x1d8>
    20fe:	99 36       	cpi	r25, 0x69	; 105
    2100:	69 f5       	brne	.+90     	; 0x215c <vfprintf+0x232>
    2102:	f7 fe       	sbrs	r15, 7
    2104:	08 c0       	rjmp	.+16     	; 0x2116 <vfprintf+0x1ec>
    2106:	f5 01       	movw	r30, r10
    2108:	20 81       	ld	r18, Z
    210a:	31 81       	ldd	r19, Z+1	; 0x01
    210c:	42 81       	ldd	r20, Z+2	; 0x02
    210e:	53 81       	ldd	r21, Z+3	; 0x03
    2110:	84 e0       	ldi	r24, 0x04	; 4
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0a c0       	rjmp	.+20     	; 0x212a <vfprintf+0x200>
    2116:	f5 01       	movw	r30, r10
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	9c 01       	movw	r18, r24
    211e:	44 27       	eor	r20, r20
    2120:	37 fd       	sbrc	r19, 7
    2122:	40 95       	com	r20
    2124:	54 2f       	mov	r21, r20
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a8 0e       	add	r10, r24
    212c:	b9 1e       	adc	r11, r25
    212e:	9f e6       	ldi	r25, 0x6F	; 111
    2130:	f9 22       	and	r15, r25
    2132:	57 ff       	sbrs	r21, 7
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <vfprintf+0x21e>
    2136:	50 95       	com	r21
    2138:	40 95       	com	r20
    213a:	30 95       	com	r19
    213c:	21 95       	neg	r18
    213e:	3f 4f       	sbci	r19, 0xFF	; 255
    2140:	4f 4f       	sbci	r20, 0xFF	; 255
    2142:	5f 4f       	sbci	r21, 0xFF	; 255
    2144:	e0 e8       	ldi	r30, 0x80	; 128
    2146:	fe 2a       	or	r15, r30
    2148:	ca 01       	movw	r24, r20
    214a:	b9 01       	movw	r22, r18
    214c:	a1 01       	movw	r20, r2
    214e:	2a e0       	ldi	r18, 0x0A	; 10
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	0e 94 b4 11 	call	0x2368	; 0x2368 <__ultoa_invert>
    2156:	d8 2e       	mov	r13, r24
    2158:	d2 18       	sub	r13, r2
    215a:	40 c0       	rjmp	.+128    	; 0x21dc <vfprintf+0x2b2>
    215c:	95 37       	cpi	r25, 0x75	; 117
    215e:	29 f4       	brne	.+10     	; 0x216a <vfprintf+0x240>
    2160:	1f 2d       	mov	r17, r15
    2162:	1f 7e       	andi	r17, 0xEF	; 239
    2164:	2a e0       	ldi	r18, 0x0A	; 10
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	1d c0       	rjmp	.+58     	; 0x21a4 <vfprintf+0x27a>
    216a:	1f 2d       	mov	r17, r15
    216c:	19 7f       	andi	r17, 0xF9	; 249
    216e:	9f 36       	cpi	r25, 0x6F	; 111
    2170:	61 f0       	breq	.+24     	; 0x218a <vfprintf+0x260>
    2172:	90 37       	cpi	r25, 0x70	; 112
    2174:	20 f4       	brcc	.+8      	; 0x217e <vfprintf+0x254>
    2176:	98 35       	cpi	r25, 0x58	; 88
    2178:	09 f0       	breq	.+2      	; 0x217c <vfprintf+0x252>
    217a:	ac c0       	rjmp	.+344    	; 0x22d4 <vfprintf+0x3aa>
    217c:	0f c0       	rjmp	.+30     	; 0x219c <vfprintf+0x272>
    217e:	90 37       	cpi	r25, 0x70	; 112
    2180:	39 f0       	breq	.+14     	; 0x2190 <vfprintf+0x266>
    2182:	98 37       	cpi	r25, 0x78	; 120
    2184:	09 f0       	breq	.+2      	; 0x2188 <vfprintf+0x25e>
    2186:	a6 c0       	rjmp	.+332    	; 0x22d4 <vfprintf+0x3aa>
    2188:	04 c0       	rjmp	.+8      	; 0x2192 <vfprintf+0x268>
    218a:	28 e0       	ldi	r18, 0x08	; 8
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	0a c0       	rjmp	.+20     	; 0x21a4 <vfprintf+0x27a>
    2190:	10 61       	ori	r17, 0x10	; 16
    2192:	14 fd       	sbrc	r17, 4
    2194:	14 60       	ori	r17, 0x04	; 4
    2196:	20 e1       	ldi	r18, 0x10	; 16
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <vfprintf+0x27a>
    219c:	14 fd       	sbrc	r17, 4
    219e:	16 60       	ori	r17, 0x06	; 6
    21a0:	20 e1       	ldi	r18, 0x10	; 16
    21a2:	32 e0       	ldi	r19, 0x02	; 2
    21a4:	17 ff       	sbrs	r17, 7
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <vfprintf+0x28e>
    21a8:	f5 01       	movw	r30, r10
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	44 e0       	ldi	r20, 0x04	; 4
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <vfprintf+0x29e>
    21b8:	f5 01       	movw	r30, r10
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	bc 01       	movw	r22, r24
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	42 e0       	ldi	r20, 0x02	; 2
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	a4 0e       	add	r10, r20
    21ca:	b5 1e       	adc	r11, r21
    21cc:	a1 01       	movw	r20, r2
    21ce:	0e 94 b4 11 	call	0x2368	; 0x2368 <__ultoa_invert>
    21d2:	d8 2e       	mov	r13, r24
    21d4:	d2 18       	sub	r13, r2
    21d6:	8f e7       	ldi	r24, 0x7F	; 127
    21d8:	f8 2e       	mov	r15, r24
    21da:	f1 22       	and	r15, r17
    21dc:	f6 fe       	sbrs	r15, 6
    21de:	0b c0       	rjmp	.+22     	; 0x21f6 <vfprintf+0x2cc>
    21e0:	5e ef       	ldi	r21, 0xFE	; 254
    21e2:	f5 22       	and	r15, r21
    21e4:	d9 14       	cp	r13, r9
    21e6:	38 f4       	brcc	.+14     	; 0x21f6 <vfprintf+0x2cc>
    21e8:	f4 fe       	sbrs	r15, 4
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <vfprintf+0x2d0>
    21ec:	f2 fc       	sbrc	r15, 2
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <vfprintf+0x2d0>
    21f0:	8f ee       	ldi	r24, 0xEF	; 239
    21f2:	f8 22       	and	r15, r24
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <vfprintf+0x2d0>
    21f6:	1d 2d       	mov	r17, r13
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <vfprintf+0x2d2>
    21fa:	19 2d       	mov	r17, r9
    21fc:	f4 fe       	sbrs	r15, 4
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <vfprintf+0x2f0>
    2200:	fe 01       	movw	r30, r28
    2202:	ed 0d       	add	r30, r13
    2204:	f1 1d       	adc	r31, r1
    2206:	80 81       	ld	r24, Z
    2208:	80 33       	cpi	r24, 0x30	; 48
    220a:	19 f4       	brne	.+6      	; 0x2212 <vfprintf+0x2e8>
    220c:	99 ee       	ldi	r25, 0xE9	; 233
    220e:	f9 22       	and	r15, r25
    2210:	08 c0       	rjmp	.+16     	; 0x2222 <vfprintf+0x2f8>
    2212:	1f 5f       	subi	r17, 0xFF	; 255
    2214:	f2 fe       	sbrs	r15, 2
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <vfprintf+0x2f8>
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <vfprintf+0x2f6>
    221a:	8f 2d       	mov	r24, r15
    221c:	86 78       	andi	r24, 0x86	; 134
    221e:	09 f0       	breq	.+2      	; 0x2222 <vfprintf+0x2f8>
    2220:	1f 5f       	subi	r17, 0xFF	; 255
    2222:	0f 2d       	mov	r16, r15
    2224:	f3 fc       	sbrc	r15, 3
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <vfprintf+0x326>
    2228:	f0 fe       	sbrs	r15, 0
    222a:	0f c0       	rjmp	.+30     	; 0x224a <vfprintf+0x320>
    222c:	1e 15       	cp	r17, r14
    222e:	10 f0       	brcs	.+4      	; 0x2234 <vfprintf+0x30a>
    2230:	9d 2c       	mov	r9, r13
    2232:	0b c0       	rjmp	.+22     	; 0x224a <vfprintf+0x320>
    2234:	9d 2c       	mov	r9, r13
    2236:	9e 0c       	add	r9, r14
    2238:	91 1a       	sub	r9, r17
    223a:	1e 2d       	mov	r17, r14
    223c:	06 c0       	rjmp	.+12     	; 0x224a <vfprintf+0x320>
    223e:	80 e2       	ldi	r24, 0x20	; 32
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	b3 01       	movw	r22, r6
    2244:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    2248:	1f 5f       	subi	r17, 0xFF	; 255
    224a:	1e 15       	cp	r17, r14
    224c:	c0 f3       	brcs	.-16     	; 0x223e <vfprintf+0x314>
    224e:	04 c0       	rjmp	.+8      	; 0x2258 <vfprintf+0x32e>
    2250:	1e 15       	cp	r17, r14
    2252:	10 f4       	brcc	.+4      	; 0x2258 <vfprintf+0x32e>
    2254:	e1 1a       	sub	r14, r17
    2256:	01 c0       	rjmp	.+2      	; 0x225a <vfprintf+0x330>
    2258:	ee 24       	eor	r14, r14
    225a:	04 ff       	sbrs	r16, 4
    225c:	0f c0       	rjmp	.+30     	; 0x227c <vfprintf+0x352>
    225e:	80 e3       	ldi	r24, 0x30	; 48
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	b3 01       	movw	r22, r6
    2264:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    2268:	02 ff       	sbrs	r16, 2
    226a:	1d c0       	rjmp	.+58     	; 0x22a6 <vfprintf+0x37c>
    226c:	01 fd       	sbrc	r16, 1
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <vfprintf+0x34c>
    2270:	88 e7       	ldi	r24, 0x78	; 120
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e c0       	rjmp	.+28     	; 0x2292 <vfprintf+0x368>
    2276:	88 e5       	ldi	r24, 0x58	; 88
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0b c0       	rjmp	.+22     	; 0x2292 <vfprintf+0x368>
    227c:	80 2f       	mov	r24, r16
    227e:	86 78       	andi	r24, 0x86	; 134
    2280:	91 f0       	breq	.+36     	; 0x22a6 <vfprintf+0x37c>
    2282:	01 ff       	sbrs	r16, 1
    2284:	02 c0       	rjmp	.+4      	; 0x228a <vfprintf+0x360>
    2286:	8b e2       	ldi	r24, 0x2B	; 43
    2288:	01 c0       	rjmp	.+2      	; 0x228c <vfprintf+0x362>
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	f7 fc       	sbrc	r15, 7
    228e:	8d e2       	ldi	r24, 0x2D	; 45
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	b3 01       	movw	r22, r6
    2294:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    2298:	06 c0       	rjmp	.+12     	; 0x22a6 <vfprintf+0x37c>
    229a:	80 e3       	ldi	r24, 0x30	; 48
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	b3 01       	movw	r22, r6
    22a0:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    22a4:	9a 94       	dec	r9
    22a6:	d9 14       	cp	r13, r9
    22a8:	c0 f3       	brcs	.-16     	; 0x229a <vfprintf+0x370>
    22aa:	da 94       	dec	r13
    22ac:	f1 01       	movw	r30, r2
    22ae:	ed 0d       	add	r30, r13
    22b0:	f1 1d       	adc	r31, r1
    22b2:	80 81       	ld	r24, Z
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	b3 01       	movw	r22, r6
    22b8:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    22bc:	dd 20       	and	r13, r13
    22be:	a9 f7       	brne	.-22     	; 0x22aa <vfprintf+0x380>
    22c0:	06 c0       	rjmp	.+12     	; 0x22ce <vfprintf+0x3a4>
    22c2:	80 e2       	ldi	r24, 0x20	; 32
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	b3 01       	movw	r22, r6
    22c8:	0e 94 88 11 	call	0x2310	; 0x2310 <fputc>
    22cc:	ea 94       	dec	r14
    22ce:	ee 20       	and	r14, r14
    22d0:	c1 f7       	brne	.-16     	; 0x22c2 <vfprintf+0x398>
    22d2:	43 ce       	rjmp	.-890    	; 0x1f5a <vfprintf+0x30>
    22d4:	f3 01       	movw	r30, r6
    22d6:	66 81       	ldd	r22, Z+6	; 0x06
    22d8:	77 81       	ldd	r23, Z+7	; 0x07
    22da:	cb 01       	movw	r24, r22
    22dc:	2b 96       	adiw	r28, 0x0b	; 11
    22de:	e2 e1       	ldi	r30, 0x12	; 18
    22e0:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__epilogue_restores__>

000022e4 <strnlen_P>:
    22e4:	fc 01       	movw	r30, r24
    22e6:	05 90       	lpm	r0, Z+
    22e8:	61 50       	subi	r22, 0x01	; 1
    22ea:	70 40       	sbci	r23, 0x00	; 0
    22ec:	01 10       	cpse	r0, r1
    22ee:	d8 f7       	brcc	.-10     	; 0x22e6 <strnlen_P+0x2>
    22f0:	80 95       	com	r24
    22f2:	90 95       	com	r25
    22f4:	8e 0f       	add	r24, r30
    22f6:	9f 1f       	adc	r25, r31
    22f8:	08 95       	ret

000022fa <strnlen>:
    22fa:	fc 01       	movw	r30, r24
    22fc:	61 50       	subi	r22, 0x01	; 1
    22fe:	70 40       	sbci	r23, 0x00	; 0
    2300:	01 90       	ld	r0, Z+
    2302:	01 10       	cpse	r0, r1
    2304:	d8 f7       	brcc	.-10     	; 0x22fc <strnlen+0x2>
    2306:	80 95       	com	r24
    2308:	90 95       	com	r25
    230a:	8e 0f       	add	r24, r30
    230c:	9f 1f       	adc	r25, r31
    230e:	08 95       	ret

00002310 <fputc>:
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	8c 01       	movw	r16, r24
    231a:	eb 01       	movw	r28, r22
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	81 ff       	sbrs	r24, 1
    2320:	1b c0       	rjmp	.+54     	; 0x2358 <fputc+0x48>
    2322:	82 ff       	sbrs	r24, 2
    2324:	0d c0       	rjmp	.+26     	; 0x2340 <fputc+0x30>
    2326:	2e 81       	ldd	r18, Y+6	; 0x06
    2328:	3f 81       	ldd	r19, Y+7	; 0x07
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	28 17       	cp	r18, r24
    2330:	39 07       	cpc	r19, r25
    2332:	64 f4       	brge	.+24     	; 0x234c <fputc+0x3c>
    2334:	e8 81       	ld	r30, Y
    2336:	f9 81       	ldd	r31, Y+1	; 0x01
    2338:	01 93       	st	Z+, r16
    233a:	f9 83       	std	Y+1, r31	; 0x01
    233c:	e8 83       	st	Y, r30
    233e:	06 c0       	rjmp	.+12     	; 0x234c <fputc+0x3c>
    2340:	e8 85       	ldd	r30, Y+8	; 0x08
    2342:	f9 85       	ldd	r31, Y+9	; 0x09
    2344:	80 2f       	mov	r24, r16
    2346:	09 95       	icall
    2348:	89 2b       	or	r24, r25
    234a:	31 f4       	brne	.+12     	; 0x2358 <fputc+0x48>
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	9f 83       	std	Y+7, r25	; 0x07
    2354:	8e 83       	std	Y+6, r24	; 0x06
    2356:	02 c0       	rjmp	.+4      	; 0x235c <fputc+0x4c>
    2358:	0f ef       	ldi	r16, 0xFF	; 255
    235a:	1f ef       	ldi	r17, 0xFF	; 255
    235c:	c8 01       	movw	r24, r16
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	08 95       	ret

00002368 <__ultoa_invert>:
    2368:	fa 01       	movw	r30, r20
    236a:	aa 27       	eor	r26, r26
    236c:	28 30       	cpi	r18, 0x08	; 8
    236e:	51 f1       	breq	.+84     	; 0x23c4 <__ultoa_invert+0x5c>
    2370:	20 31       	cpi	r18, 0x10	; 16
    2372:	81 f1       	breq	.+96     	; 0x23d4 <__ultoa_invert+0x6c>
    2374:	e8 94       	clt
    2376:	6f 93       	push	r22
    2378:	6e 7f       	andi	r22, 0xFE	; 254
    237a:	6e 5f       	subi	r22, 0xFE	; 254
    237c:	7f 4f       	sbci	r23, 0xFF	; 255
    237e:	8f 4f       	sbci	r24, 0xFF	; 255
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	af 4f       	sbci	r26, 0xFF	; 255
    2384:	b1 e0       	ldi	r27, 0x01	; 1
    2386:	3e d0       	rcall	.+124    	; 0x2404 <__ultoa_invert+0x9c>
    2388:	b4 e0       	ldi	r27, 0x04	; 4
    238a:	3c d0       	rcall	.+120    	; 0x2404 <__ultoa_invert+0x9c>
    238c:	67 0f       	add	r22, r23
    238e:	78 1f       	adc	r23, r24
    2390:	89 1f       	adc	r24, r25
    2392:	9a 1f       	adc	r25, r26
    2394:	a1 1d       	adc	r26, r1
    2396:	68 0f       	add	r22, r24
    2398:	79 1f       	adc	r23, r25
    239a:	8a 1f       	adc	r24, r26
    239c:	91 1d       	adc	r25, r1
    239e:	a1 1d       	adc	r26, r1
    23a0:	6a 0f       	add	r22, r26
    23a2:	71 1d       	adc	r23, r1
    23a4:	81 1d       	adc	r24, r1
    23a6:	91 1d       	adc	r25, r1
    23a8:	a1 1d       	adc	r26, r1
    23aa:	20 d0       	rcall	.+64     	; 0x23ec <__ultoa_invert+0x84>
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <__ultoa_invert+0x48>
    23ae:	68 94       	set
    23b0:	3f 91       	pop	r19
    23b2:	2a e0       	ldi	r18, 0x0A	; 10
    23b4:	26 9f       	mul	r18, r22
    23b6:	11 24       	eor	r1, r1
    23b8:	30 19       	sub	r19, r0
    23ba:	30 5d       	subi	r19, 0xD0	; 208
    23bc:	31 93       	st	Z+, r19
    23be:	de f6       	brtc	.-74     	; 0x2376 <__ultoa_invert+0xe>
    23c0:	cf 01       	movw	r24, r30
    23c2:	08 95       	ret
    23c4:	46 2f       	mov	r20, r22
    23c6:	47 70       	andi	r20, 0x07	; 7
    23c8:	40 5d       	subi	r20, 0xD0	; 208
    23ca:	41 93       	st	Z+, r20
    23cc:	b3 e0       	ldi	r27, 0x03	; 3
    23ce:	0f d0       	rcall	.+30     	; 0x23ee <__ultoa_invert+0x86>
    23d0:	c9 f7       	brne	.-14     	; 0x23c4 <__ultoa_invert+0x5c>
    23d2:	f6 cf       	rjmp	.-20     	; 0x23c0 <__ultoa_invert+0x58>
    23d4:	46 2f       	mov	r20, r22
    23d6:	4f 70       	andi	r20, 0x0F	; 15
    23d8:	40 5d       	subi	r20, 0xD0	; 208
    23da:	4a 33       	cpi	r20, 0x3A	; 58
    23dc:	18 f0       	brcs	.+6      	; 0x23e4 <__ultoa_invert+0x7c>
    23de:	49 5d       	subi	r20, 0xD9	; 217
    23e0:	31 fd       	sbrc	r19, 1
    23e2:	40 52       	subi	r20, 0x20	; 32
    23e4:	41 93       	st	Z+, r20
    23e6:	02 d0       	rcall	.+4      	; 0x23ec <__ultoa_invert+0x84>
    23e8:	a9 f7       	brne	.-22     	; 0x23d4 <__ultoa_invert+0x6c>
    23ea:	ea cf       	rjmp	.-44     	; 0x23c0 <__ultoa_invert+0x58>
    23ec:	b4 e0       	ldi	r27, 0x04	; 4
    23ee:	a6 95       	lsr	r26
    23f0:	97 95       	ror	r25
    23f2:	87 95       	ror	r24
    23f4:	77 95       	ror	r23
    23f6:	67 95       	ror	r22
    23f8:	ba 95       	dec	r27
    23fa:	c9 f7       	brne	.-14     	; 0x23ee <__ultoa_invert+0x86>
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	61 05       	cpc	r22, r1
    2400:	71 05       	cpc	r23, r1
    2402:	08 95       	ret
    2404:	9b 01       	movw	r18, r22
    2406:	ac 01       	movw	r20, r24
    2408:	0a 2e       	mov	r0, r26
    240a:	06 94       	lsr	r0
    240c:	57 95       	ror	r21
    240e:	47 95       	ror	r20
    2410:	37 95       	ror	r19
    2412:	27 95       	ror	r18
    2414:	ba 95       	dec	r27
    2416:	c9 f7       	brne	.-14     	; 0x240a <__ultoa_invert+0xa2>
    2418:	62 0f       	add	r22, r18
    241a:	73 1f       	adc	r23, r19
    241c:	84 1f       	adc	r24, r20
    241e:	95 1f       	adc	r25, r21
    2420:	a0 1d       	adc	r26, r0
    2422:	08 95       	ret

00002424 <__prologue_saves__>:
    2424:	2f 92       	push	r2
    2426:	3f 92       	push	r3
    2428:	4f 92       	push	r4
    242a:	5f 92       	push	r5
    242c:	6f 92       	push	r6
    242e:	7f 92       	push	r7
    2430:	8f 92       	push	r8
    2432:	9f 92       	push	r9
    2434:	af 92       	push	r10
    2436:	bf 92       	push	r11
    2438:	cf 92       	push	r12
    243a:	df 92       	push	r13
    243c:	ef 92       	push	r14
    243e:	ff 92       	push	r15
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	ca 1b       	sub	r28, r26
    244e:	db 0b       	sbc	r29, r27
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	09 94       	ijmp

0000245c <__epilogue_restores__>:
    245c:	2a 88       	ldd	r2, Y+18	; 0x12
    245e:	39 88       	ldd	r3, Y+17	; 0x11
    2460:	48 88       	ldd	r4, Y+16	; 0x10
    2462:	5f 84       	ldd	r5, Y+15	; 0x0f
    2464:	6e 84       	ldd	r6, Y+14	; 0x0e
    2466:	7d 84       	ldd	r7, Y+13	; 0x0d
    2468:	8c 84       	ldd	r8, Y+12	; 0x0c
    246a:	9b 84       	ldd	r9, Y+11	; 0x0b
    246c:	aa 84       	ldd	r10, Y+10	; 0x0a
    246e:	b9 84       	ldd	r11, Y+9	; 0x09
    2470:	c8 84       	ldd	r12, Y+8	; 0x08
    2472:	df 80       	ldd	r13, Y+7	; 0x07
    2474:	ee 80       	ldd	r14, Y+6	; 0x06
    2476:	fd 80       	ldd	r15, Y+5	; 0x05
    2478:	0c 81       	ldd	r16, Y+4	; 0x04
    247a:	1b 81       	ldd	r17, Y+3	; 0x03
    247c:	aa 81       	ldd	r26, Y+2	; 0x02
    247e:	b9 81       	ldd	r27, Y+1	; 0x01
    2480:	ce 0f       	add	r28, r30
    2482:	d1 1d       	adc	r29, r1
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	ed 01       	movw	r28, r26
    2490:	08 95       	ret

00002492 <_exit>:
    2492:	f8 94       	cli

00002494 <__stop_program>:
    2494:	ff cf       	rjmp	.-2      	; 0x2494 <__stop_program>
