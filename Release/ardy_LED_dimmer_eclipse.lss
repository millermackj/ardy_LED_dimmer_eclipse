
ardy_LED_dimmer_eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00001826  000018ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016f  00800188  00800188  00001942  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000928  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000527  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000215f  00000000  00000000  000054a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1c  00000000  00000000  00007602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b38  00000000  00000000  0000811e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  00009c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bb4  00000000  00000000  00009fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012b4  00000000  00000000  0000ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f0  00000000  00000000  0000be10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    }
}

int LedControl::getDeviceCount() {
    return maxDevices;
}
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_16>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <setup+0x9a>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <port_to_mode_PGM>:
      86:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000090 <port_to_output_PGM>:
      90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_input_PGM>:
      9a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <digital_pin_to_bit_mask_PGM>:
      b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c8:	04 08 10 20                                         ... 

000000cc <digital_pin_to_timer_PGM>:
      cc:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      dc:	00 00 00 00                                         ....

000000e0 <__ctors_start>:
      e0:	9b 00       	.word	0x009b	; ????

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d8 e0       	ldi	r29, 0x08	; 8
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e6 e2       	ldi	r30, 0x26	; 38
      f6:	f8 e1       	ldi	r31, 0x18	; 24
      f8:	02 c0       	rjmp	.+4      	; 0xfe <.do_copy_data_start>

000000fa <.do_copy_data_loop>:
      fa:	05 90       	lpm	r0, Z+
      fc:	0d 92       	st	X+, r0

000000fe <.do_copy_data_start>:
      fe:	a8 38       	cpi	r26, 0x88	; 136
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <.do_copy_data_loop>

00000104 <__do_clear_bss>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a8 e8       	ldi	r26, 0x88	; 136
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	a7 3f       	cpi	r26, 0xF7	; 247
     110:	b1 07       	cpc	r27, r17
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>

00000114 <__do_global_ctors>:
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	c2 ee       	ldi	r28, 0xE2	; 226
     118:	d0 e0       	ldi	r29, 0x00	; 0
     11a:	04 c0       	rjmp	.+8      	; 0x124 <.do_global_ctors_start>

0000011c <.do_global_ctors_loop>:
     11c:	22 97       	sbiw	r28, 0x02	; 2
     11e:	fe 01       	movw	r30, r28
     120:	0e 94 0d 0c 	call	0x181a	; 0x181a <__tablejump__>

00000124 <.do_global_ctors_start>:
     124:	c0 3e       	cpi	r28, 0xE0	; 224
     126:	d1 07       	cpc	r29, r17
     128:	c9 f7       	brne	.-14     	; 0x11c <.do_global_ctors_loop>
     12a:	0e 94 e7 06 	call	0xdce	; 0xdce <main>
     12e:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_GLOBAL__I_dimmer_cts>:
//  if(current_time >= blink_clock){
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }
}
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
int impulse_array[impulse_num_samples];
pulser_struct pulser;

double alpha = .05;
// instantiate LED Display controller -- the 4th argument is the number of displays
LedControl ledDisplay = LedControl(LED_DATA_PIN, LED_CLOCK_PIN, LED_CSLOAD_PIN, 1);
     13a:	88 e7       	ldi	r24, 0x78	; 120
     13c:	92 e0       	ldi	r25, 0x02	; 2
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	42 e0       	ldi	r20, 0x02	; 2
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	24 e0       	ldi	r18, 0x04	; 4
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	01 e0       	ldi	r16, 0x01	; 1
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN10LedControlC1Eiiii>
//  if(current_time >= blink_clock){
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }
}
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	08 95       	ret

00000158 <_Z7showLEDli>:
	ledDisplay.setIntensity(0, 12);
	ledDisplay.clearDisplay(0);
}

// method that takes a number in millis and displays it to the hundredth on LED display
void showLED(long dispNumMill, int sigfigs) {
     158:	4f 92       	push	r4
     15a:	5f 92       	push	r5
     15c:	6f 92       	push	r6
     15e:	7f 92       	push	r7
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	28 97       	sbiw	r28, 0x08	; 8
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	5b 01       	movw	r10, r22
     18a:	6c 01       	movw	r12, r24
     18c:	2a 01       	movw	r4, r20
	// flag for negative value -- light up last decimal if negative
	bool neg = (dispNumMill < 0);

	int decipoint = 2; // decimal point after third digit from right by default

	dispNumMill = abs(dispNumMill);
     18e:	7b 01       	movw	r14, r22
     190:	8c 01       	movw	r16, r24
     192:	97 ff       	sbrs	r25, 7
     194:	07 c0       	rjmp	.+14     	; 0x1a4 <_Z7showLEDli+0x4c>
     196:	ee 24       	eor	r14, r14
     198:	ff 24       	eor	r15, r15
     19a:	87 01       	movw	r16, r14
     19c:	e6 1a       	sub	r14, r22
     19e:	f7 0a       	sbc	r15, r23
     1a0:	08 0b       	sbc	r16, r24
     1a2:	19 0b       	sbc	r17, r25

	if (dispNumMill >= 100000) { // if number is bigger than a hundred, move decimal to right.
     1a4:	80 ea       	ldi	r24, 0xA0	; 160
     1a6:	e8 16       	cp	r14, r24
     1a8:	86 e8       	ldi	r24, 0x86	; 134
     1aa:	f8 06       	cpc	r15, r24
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	08 07       	cpc	r16, r24
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	18 07       	cpc	r17, r24
     1b4:	24 f4       	brge	.+8      	; 0x1be <_Z7showLEDli+0x66>
     1b6:	22 e0       	ldi	r18, 0x02	; 2
     1b8:	62 2e       	mov	r6, r18
     1ba:	71 2c       	mov	r7, r1
     1bc:	0f c0       	rjmp	.+30     	; 0x1dc <_Z7showLEDli+0x84>
		decipoint = 1;
		dispNumMill = dispNumMill / 10;
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	2a e0       	ldi	r18, 0x0A	; 10
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     1ce:	c9 01       	movw	r24, r18
     1d0:	da 01       	movw	r26, r20
     1d2:	7c 01       	movw	r14, r24
     1d4:	8d 01       	movw	r16, r26
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	69 2e       	mov	r6, r25
     1da:	71 2c       	mov	r7, r1
	}

	int remainder = dispNumMill % 10;
     1dc:	c8 01       	movw	r24, r16
     1de:	b7 01       	movw	r22, r14
     1e0:	2a e0       	ldi	r18, 0x0A	; 10
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	40 e0       	ldi	r20, 0x00	; 0
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
	// do some rounding if necessary

	if (remainder >= 5)
     1ec:	65 30       	cpi	r22, 0x05	; 5
     1ee:	71 05       	cpc	r23, r1
     1f0:	8c f0       	brlt	.+34     	; 0x214 <_Z7showLEDli+0xbc>
		dispNumMill = dispNumMill - remainder + 10;
     1f2:	8a e0       	ldi	r24, 0x0A	; 10
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e8 0e       	add	r14, r24
     1fc:	f9 1e       	adc	r15, r25
     1fe:	0a 1f       	adc	r16, r26
     200:	1b 1f       	adc	r17, r27
     202:	cb 01       	movw	r24, r22
     204:	aa 27       	eor	r26, r26
     206:	97 fd       	sbrc	r25, 7
     208:	a0 95       	com	r26
     20a:	ba 2f       	mov	r27, r26
     20c:	e8 1a       	sub	r14, r24
     20e:	f9 0a       	sbc	r15, r25
     210:	0a 0b       	sbc	r16, r26
     212:	1b 0b       	sbc	r17, r27

	int dig[4]; // array to store display digits

	// determine digit values by extracting them from dispNumMill

	dig[3] = (dispNumMill % 100000) / 10000;
     214:	c8 01       	movw	r24, r16
     216:	b7 01       	movw	r22, r14
     218:	20 ea       	ldi	r18, 0xA0	; 160
     21a:	36 e8       	ldi	r19, 0x86	; 134
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     224:	20 e1       	ldi	r18, 0x10	; 16
     226:	37 e2       	ldi	r19, 0x27	; 39
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     230:	38 87       	std	Y+8, r19	; 0x08
     232:	2f 83       	std	Y+7, r18	; 0x07
	dig[2] = (dispNumMill % 10000) / 1000;
     234:	c8 01       	movw	r24, r16
     236:	b7 01       	movw	r22, r14
     238:	20 e1       	ldi	r18, 0x10	; 16
     23a:	37 e2       	ldi	r19, 0x27	; 39
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     244:	28 ee       	ldi	r18, 0xE8	; 232
     246:	33 e0       	ldi	r19, 0x03	; 3
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     250:	3e 83       	std	Y+6, r19	; 0x06
     252:	2d 83       	std	Y+5, r18	; 0x05
	dig[1] = (dispNumMill % 1000) / 100;
     254:	c8 01       	movw	r24, r16
     256:	b7 01       	movw	r22, r14
     258:	28 ee       	ldi	r18, 0xE8	; 232
     25a:	33 e0       	ldi	r19, 0x03	; 3
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     264:	24 e6       	ldi	r18, 0x64	; 100
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     270:	3c 83       	std	Y+4, r19	; 0x04
     272:	2b 83       	std	Y+3, r18	; 0x03
	dig[0] = (dispNumMill % 100) / 10;
     274:	c8 01       	movw	r24, r16
     276:	b7 01       	movw	r22, r14
     278:	24 e6       	ldi	r18, 0x64	; 100
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     290:	3a 83       	std	Y+2, r19	; 0x02
     292:	29 83       	std	Y+1, r18	; 0x01
     294:	4e 01       	movw	r8, r28
     296:	08 94       	sec
     298:	81 1c       	adc	r8, r1
     29a:	91 1c       	adc	r9, r1
     29c:	f4 01       	movw	r30, r8
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < 4 - sigfigs; i++) {
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	84 19       	sub	r24, r4
     2a8:	95 09       	sbc	r25, r5
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_Z7showLEDli+0x15c>
		dig[i] = 0;
     2ac:	11 92       	st	Z+, r1
     2ae:	11 92       	st	Z+, r1
	dig[3] = (dispNumMill % 100000) / 10000;
	dig[2] = (dispNumMill % 10000) / 1000;
	dig[1] = (dispNumMill % 1000) / 100;
	dig[0] = (dispNumMill % 100) / 10;

	for (int i = 0; i < 4 - sigfigs; i++) {
     2b0:	2f 5f       	subi	r18, 0xFF	; 255
     2b2:	3f 4f       	sbci	r19, 0xFF	; 255
     2b4:	28 17       	cp	r18, r24
     2b6:	39 07       	cpc	r19, r25
     2b8:	cc f3       	brlt	.-14     	; 0x2ac <_Z7showLEDli+0x154>
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
		dig[i] = 0;
	}

	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
     2be:	aa 24       	eor	r10, r10
     2c0:	d7 fc       	sbrc	r13, 7
     2c2:	a3 94       	inc	r10
     2c4:	bb 24       	eor	r11, r11
     2c6:	cc 24       	eor	r12, r12
     2c8:	dd 24       	eor	r13, r13
     2ca:	1a 2d       	mov	r17, r10
     2cc:	d4 01       	movw	r26, r8
     2ce:	2c 91       	ld	r18, X
     2d0:	e6 14       	cp	r14, r6
     2d2:	f7 04       	cpc	r15, r7
     2d4:	11 f4       	brne	.+4      	; 0x2da <_Z7showLEDli+0x182>
     2d6:	01 e0       	ldi	r16, 0x01	; 1
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_Z7showLEDli+0x18e>
     2da:	e1 14       	cp	r14, r1
     2dc:	f1 04       	cpc	r15, r1
     2de:	11 f0       	breq	.+4      	; 0x2e4 <_Z7showLEDli+0x18c>
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <_Z7showLEDli+0x18e>
     2e4:	01 2f       	mov	r16, r17
     2e6:	88 e7       	ldi	r24, 0x78	; 120
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	a7 01       	movw	r20, r14
     2f0:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN10LedControl8setDigitEiihh>

	for (int i = 0; i < 4 - sigfigs; i++) {
		dig[i] = 0;
	}

	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
     2f4:	08 94       	sec
     2f6:	e1 1c       	adc	r14, r1
     2f8:	f1 1c       	adc	r15, r1
     2fa:	e2 e0       	ldi	r30, 0x02	; 2
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	8e 0e       	add	r8, r30
     300:	9f 1e       	adc	r9, r31
     302:	f4 e0       	ldi	r31, 0x04	; 4
     304:	ef 16       	cp	r14, r31
     306:	f1 04       	cpc	r15, r1
     308:	09 f7       	brne	.-62     	; 0x2cc <_Z7showLEDli+0x174>
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
	}
}
     30a:	28 96       	adiw	r28, 0x08	; 8
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	cf 91       	pop	r28
     318:	df 91       	pop	r29
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	bf 90       	pop	r11
     328:	af 90       	pop	r10
     32a:	9f 90       	pop	r9
     32c:	8f 90       	pop	r8
     32e:	7f 90       	pop	r7
     330:	6f 90       	pop	r6
     332:	5f 90       	pop	r5
     334:	4f 90       	pop	r4
     336:	08 95       	ret

00000338 <loop>:

void loop() {
     338:	6f 92       	push	r6
     33a:	7f 92       	push	r7
     33c:	8f 92       	push	r8
     33e:	9f 92       	push	r9
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
	long unsigned int current_time = millis();
     350:	0e 94 3e 07 	call	0xe7c	; 0xe7c <millis>
     354:	3b 01       	movw	r6, r22
     356:	4c 01       	movw	r8, r24
  if(current_time >= sample_clock){
     358:	80 91 96 01 	lds	r24, 0x0196
     35c:	90 91 97 01 	lds	r25, 0x0197
     360:	a0 91 98 01 	lds	r26, 0x0198
     364:	b0 91 99 01 	lds	r27, 0x0199
     368:	68 16       	cp	r6, r24
     36a:	79 06       	cpc	r7, r25
     36c:	8a 06       	cpc	r8, r26
     36e:	9b 06       	cpc	r9, r27
     370:	08 f4       	brcc	.+2      	; 0x374 <loop+0x3c>
     372:	ab c1       	rjmp	.+854    	; 0x6ca <loop+0x392>
  	sample_clock += SAMPLE_PERIOD;
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	a1 1d       	adc	r26, r1
     378:	b1 1d       	adc	r27, r1
     37a:	80 93 96 01 	sts	0x0196, r24
     37e:	90 93 97 01 	sts	0x0197, r25
     382:	a0 93 98 01 	sts	0x0198, r26
     386:	b0 93 99 01 	sts	0x0199, r27
    dimmer_cts = alpha*analogRead(POT_PIN) + (1.0-alpha)*dimmer_cts;
     38a:	e0 90 02 01 	lds	r14, 0x0102
     38e:	f0 90 03 01 	lds	r15, 0x0103
     392:	00 91 04 01 	lds	r16, 0x0104
     396:	10 91 05 01 	lds	r17, 0x0105
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 87 07 	call	0xf0e	; 0xf0e <analogRead>
     3a0:	aa 27       	eor	r26, r26
     3a2:	97 fd       	sbrc	r25, 7
     3a4:	a0 95       	com	r26
     3a6:	ba 2f       	mov	r27, r26
     3a8:	bc 01       	movw	r22, r24
     3aa:	cd 01       	movw	r24, r26
     3ac:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__floatsisf>
     3b0:	9b 01       	movw	r18, r22
     3b2:	ac 01       	movw	r20, r24
     3b4:	c8 01       	movw	r24, r16
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     3bc:	7b 01       	movw	r14, r22
     3be:	8c 01       	movw	r16, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	9f e3       	ldi	r25, 0x3F	; 63
     3c8:	20 91 02 01 	lds	r18, 0x0102
     3cc:	30 91 03 01 	lds	r19, 0x0103
     3d0:	40 91 04 01 	lds	r20, 0x0104
     3d4:	50 91 05 01 	lds	r21, 0x0105
     3d8:	0e 94 18 09 	call	0x1230	; 0x1230 <__subsf3>
     3dc:	20 91 88 01 	lds	r18, 0x0188
     3e0:	30 91 89 01 	lds	r19, 0x0189
     3e4:	40 91 8a 01 	lds	r20, 0x018A
     3e8:	50 91 8b 01 	lds	r21, 0x018B
     3ec:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c8 01       	movw	r24, r16
     3f6:	b7 01       	movw	r22, r14
     3f8:	0e 94 19 09 	call	0x1232	; 0x1232 <__addsf3>
     3fc:	60 93 88 01 	sts	0x0188, r22
     400:	70 93 89 01 	sts	0x0189, r23
     404:	80 93 8a 01 	sts	0x018A, r24
     408:	90 93 8b 01 	sts	0x018B, r25
    dimmer_pct = map(round(dimmer_cts*100), 0 , 90000, 0, 1000);
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	48 ec       	ldi	r20, 0xC8	; 200
     412:	52 e4       	ldi	r21, 0x42	; 66
     414:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     418:	7b 01       	movw	r14, r22
     41a:	8c 01       	movw	r16, r24
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__gesf2>
     428:	88 23       	and	r24, r24
     42a:	4c f0       	brlt	.+18     	; 0x43e <loop+0x106>
     42c:	c8 01       	movw	r24, r16
     42e:	b7 01       	movw	r22, r14
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	0e 94 19 09 	call	0x1232	; 0x1232 <__addsf3>
     43c:	08 c0       	rjmp	.+16     	; 0x44e <loop+0x116>
     43e:	c8 01       	movw	r24, r16
     440:	b7 01       	movw	r22, r14
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	5f e3       	ldi	r21, 0x3F	; 63
     44a:	0e 94 18 09 	call	0x1230	; 0x1230 <__subsf3>
     44e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fixsfsi>
     452:	9b 01       	movw	r18, r22
     454:	ac 01       	movw	r20, r24
     456:	00 d0       	rcall	.+0      	; 0x458 <loop+0x120>
     458:	00 d0       	rcall	.+0      	; 0x45a <loop+0x122>
     45a:	88 ee       	ldi	r24, 0xE8	; 232
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	a0 e0       	ldi	r26, 0x00	; 0
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	ed b7       	in	r30, 0x3d	; 61
     464:	fe b7       	in	r31, 0x3e	; 62
     466:	81 83       	std	Z+1, r24	; 0x01
     468:	92 83       	std	Z+2, r25	; 0x02
     46a:	a3 83       	std	Z+3, r26	; 0x03
     46c:	b4 83       	std	Z+4, r27	; 0x04
     46e:	ca 01       	movw	r24, r20
     470:	b9 01       	movw	r22, r18
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	f0 e9       	ldi	r31, 0x90	; 144
     47c:	ef 2e       	mov	r14, r31
     47e:	ff e5       	ldi	r31, 0x5F	; 95
     480:	ff 2e       	mov	r15, r31
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	0f 2f       	mov	r16, r31
     486:	11 2d       	mov	r17, r1
     488:	aa 24       	eor	r10, r10
     48a:	bb 24       	eor	r11, r11
     48c:	65 01       	movw	r12, r10
     48e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_Z3maplllll>
     492:	70 93 8d 01 	sts	0x018D, r23
     496:	60 93 8c 01 	sts	0x018C, r22
    analogWrite(LED_PWM_PIN, map(round(dimmer_cts), 0, 900, 0, 255));
     49a:	e0 90 88 01 	lds	r14, 0x0188
     49e:	f0 90 89 01 	lds	r15, 0x0189
     4a2:	00 91 8a 01 	lds	r16, 0x018A
     4a6:	10 91 8b 01 	lds	r17, 0x018B
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	c8 01       	movw	r24, r16
     4b4:	b7 01       	movw	r22, r14
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__gesf2>
     4c2:	88 23       	and	r24, r24
     4c4:	4c f0       	brlt	.+18     	; 0x4d8 <loop+0x1a0>
     4c6:	c8 01       	movw	r24, r16
     4c8:	b7 01       	movw	r22, r14
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	0e 94 19 09 	call	0x1232	; 0x1232 <__addsf3>
     4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <loop+0x1b0>
     4d8:	c8 01       	movw	r24, r16
     4da:	b7 01       	movw	r22, r14
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	5f e3       	ldi	r21, 0x3F	; 63
     4e4:	0e 94 18 09 	call	0x1230	; 0x1230 <__subsf3>
     4e8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fixsfsi>
     4ec:	9b 01       	movw	r18, r22
     4ee:	ac 01       	movw	r20, r24
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <loop+0x1ba>
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <loop+0x1bc>
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	a0 e0       	ldi	r26, 0x00	; 0
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	ed b7       	in	r30, 0x3d	; 61
     4fe:	fe b7       	in	r31, 0x3e	; 62
     500:	81 83       	std	Z+1, r24	; 0x01
     502:	92 83       	std	Z+2, r25	; 0x02
     504:	a3 83       	std	Z+3, r26	; 0x03
     506:	b4 83       	std	Z+4, r27	; 0x04
     508:	ca 01       	movw	r24, r20
     50a:	b9 01       	movw	r22, r18
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	e4 e8       	ldi	r30, 0x84	; 132
     516:	ee 2e       	mov	r14, r30
     518:	e3 e0       	ldi	r30, 0x03	; 3
     51a:	fe 2e       	mov	r15, r30
     51c:	01 2d       	mov	r16, r1
     51e:	11 2d       	mov	r17, r1
     520:	aa 24       	eor	r10, r10
     522:	bb 24       	eor	r11, r11
     524:	65 01       	movw	r12, r10
     526:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_Z3maplllll>
     52a:	9b 01       	movw	r18, r22
     52c:	ac 01       	movw	r20, r24
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	8b e0       	ldi	r24, 0x0B	; 11
     538:	b9 01       	movw	r22, r18
     53a:	0e 94 a9 07 	call	0xf52	; 0xf52 <analogWrite>
    if(current_time >= pulser.carrier_clock){
     53e:	80 91 68 02 	lds	r24, 0x0268
     542:	90 91 69 02 	lds	r25, 0x0269
     546:	a0 91 6a 02 	lds	r26, 0x026A
     54a:	b0 91 6b 02 	lds	r27, 0x026B
     54e:	68 16       	cp	r6, r24
     550:	79 06       	cpc	r7, r25
     552:	8a 06       	cpc	r8, r26
     554:	9b 06       	cpc	r9, r27
     556:	60 f1       	brcs	.+88     	; 0x5b0 <loop+0x278>
    	pulser.carrier_clock = current_time + pulser.carrier_period;
     558:	80 91 62 02 	lds	r24, 0x0262
     55c:	90 91 63 02 	lds	r25, 0x0263
     560:	aa 27       	eor	r26, r26
     562:	97 fd       	sbrc	r25, 7
     564:	a0 95       	com	r26
     566:	ba 2f       	mov	r27, r26
     568:	86 0d       	add	r24, r6
     56a:	97 1d       	adc	r25, r7
     56c:	a8 1d       	adc	r26, r8
     56e:	b9 1d       	adc	r27, r9
     570:	80 93 68 02 	sts	0x0268, r24
     574:	90 93 69 02 	sts	0x0269, r25
     578:	a0 93 6a 02 	sts	0x026A, r26
     57c:	b0 93 6b 02 	sts	0x026B, r27
    	pulser.index = 0;
     580:	10 92 75 02 	sts	0x0275, r1
     584:	10 92 74 02 	sts	0x0274, r1
    	pulser.step_clock = current_time + pulser.offset_time;
     588:	80 91 76 02 	lds	r24, 0x0276
     58c:	90 91 77 02 	lds	r25, 0x0277
     590:	aa 27       	eor	r26, r26
     592:	97 fd       	sbrc	r25, 7
     594:	a0 95       	com	r26
     596:	ba 2f       	mov	r27, r26
     598:	86 0d       	add	r24, r6
     59a:	97 1d       	adc	r25, r7
     59c:	a8 1d       	adc	r26, r8
     59e:	b9 1d       	adc	r27, r9
     5a0:	80 93 70 02 	sts	0x0270, r24
     5a4:	90 93 71 02 	sts	0x0271, r25
     5a8:	a0 93 72 02 	sts	0x0272, r26
     5ac:	b0 93 73 02 	sts	0x0273, r27
    }
//    analogWrite(LED_PWM_PIN, impulse_array[pulser.index]);
   // showLED((long int)impulse_array[pulser.index] * 1000, 4);

    if(current_time >= pulser.step_clock){
     5b0:	40 91 70 02 	lds	r20, 0x0270
     5b4:	50 91 71 02 	lds	r21, 0x0271
     5b8:	60 91 72 02 	lds	r22, 0x0272
     5bc:	70 91 73 02 	lds	r23, 0x0273
     5c0:	64 16       	cp	r6, r20
     5c2:	75 06       	cpc	r7, r21
     5c4:	86 06       	cpc	r8, r22
     5c6:	97 06       	cpc	r9, r23
     5c8:	08 f1       	brcs	.+66     	; 0x60c <loop+0x2d4>
    	if (pulser.index < impulse_num_samples - 1) {
     5ca:	20 91 74 02 	lds	r18, 0x0274
     5ce:	30 91 75 02 	lds	r19, 0x0275
     5d2:	23 36       	cpi	r18, 0x63	; 99
     5d4:	31 05       	cpc	r19, r1
     5d6:	d4 f4       	brge	.+52     	; 0x60c <loop+0x2d4>
    		pulser.step_clock += pulser.step_period;
     5d8:	80 91 66 02 	lds	r24, 0x0266
     5dc:	90 91 67 02 	lds	r25, 0x0267
     5e0:	aa 27       	eor	r26, r26
     5e2:	97 fd       	sbrc	r25, 7
     5e4:	a0 95       	com	r26
     5e6:	ba 2f       	mov	r27, r26
     5e8:	84 0f       	add	r24, r20
     5ea:	95 1f       	adc	r25, r21
     5ec:	a6 1f       	adc	r26, r22
     5ee:	b7 1f       	adc	r27, r23
     5f0:	80 93 70 02 	sts	0x0270, r24
     5f4:	90 93 71 02 	sts	0x0271, r25
     5f8:	a0 93 72 02 	sts	0x0272, r26
     5fc:	b0 93 73 02 	sts	0x0273, r27
    		pulser.index++;
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	30 93 75 02 	sts	0x0275, r19
     608:	20 93 74 02 	sts	0x0274, r18
    	}
    }


//    showLED(100L*dimmer_pct, 4);
    if(!digitalRead(cadence_enc.pin_num)){
     60c:	80 91 e0 02 	lds	r24, 0x02E0
     610:	0e 94 83 08 	call	0x1106	; 0x1106 <digitalRead>
     614:	89 2b       	or	r24, r25
     616:	c9 f4       	brne	.+50     	; 0x64a <loop+0x312>
      if(cadence_enc.debounce_cnt < cadence_enc.debounce_min)
     618:	20 91 d0 02 	lds	r18, 0x02D0
     61c:	30 91 d1 02 	lds	r19, 0x02D1
     620:	80 91 d2 02 	lds	r24, 0x02D2
     624:	90 91 d3 02 	lds	r25, 0x02D3
     628:	28 17       	cp	r18, r24
     62a:	39 07       	cpc	r19, r25
     62c:	3c f4       	brge	.+14     	; 0x63c <loop+0x304>
      	cadence_enc.debounce_cnt++;
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	30 93 d1 02 	sts	0x02D1, r19
     636:	20 93 d0 02 	sts	0x02D0, r18
     63a:	18 c0       	rjmp	.+48     	; 0x66c <loop+0x334>
      else{ // debounce count is equal to or greater than minimum
      	cadence_enc.pin_state = HIGH;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	90 93 d5 02 	sts	0x02D5, r25
     644:	80 93 d4 02 	sts	0x02D4, r24
     648:	11 c0       	rjmp	.+34     	; 0x66c <loop+0x334>
      }
    }
    else{
      if(cadence_enc.debounce_cnt > 0)
     64a:	80 91 d0 02 	lds	r24, 0x02D0
     64e:	90 91 d1 02 	lds	r25, 0x02D1
     652:	18 16       	cp	r1, r24
     654:	19 06       	cpc	r1, r25
     656:	34 f4       	brge	.+12     	; 0x664 <loop+0x32c>
      	cadence_enc.debounce_cnt--;
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	90 93 d1 02 	sts	0x02D1, r25
     65e:	80 93 d0 02 	sts	0x02D0, r24
     662:	04 c0       	rjmp	.+8      	; 0x66c <loop+0x334>
      else{ // debounce count is at zero
      	cadence_enc.pin_state = LOW;
     664:	10 92 d5 02 	sts	0x02D5, r1
     668:	10 92 d4 02 	sts	0x02D4, r1
      }
    }

    if (cadence_enc.last_state != cadence_enc.pin_state){
     66c:	60 91 d4 02 	lds	r22, 0x02D4
     670:	70 91 d5 02 	lds	r23, 0x02D5
     674:	80 91 e6 02 	lds	r24, 0x02E6
     678:	90 91 e7 02 	lds	r25, 0x02E7
     67c:	86 17       	cp	r24, r22
     67e:	97 07       	cpc	r25, r23
     680:	e1 f0       	breq	.+56     	; 0x6ba <loop+0x382>
    	digitalWrite(LED_PIN, cadence_enc.pin_state);
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
    	if(cadence_enc.pin_state == LOW){ // detect falling edge
     688:	80 91 d4 02 	lds	r24, 0x02D4
     68c:	90 91 d5 02 	lds	r25, 0x02D5
     690:	89 2b       	or	r24, r25
     692:	99 f4       	brne	.+38     	; 0x6ba <loop+0x382>
//    		cadence_enc.last_period = (cadence_enc.alpha*(current_time - cadence_enc.startTime)
//    				+ (1000L - cadence_enc.alpha)*cadence_enc.last_period)/1000;
    		cadence_enc.last_period = (current_time - cadence_enc.startTime);
     694:	80 91 d6 02 	lds	r24, 0x02D6
     698:	90 91 d7 02 	lds	r25, 0x02D7
     69c:	93 01       	movw	r18, r6
     69e:	28 1b       	sub	r18, r24
     6a0:	39 0b       	sbc	r19, r25
     6a2:	30 93 e3 02 	sts	0x02E3, r19
     6a6:	20 93 e2 02 	sts	0x02E2, r18
    		cadence_enc.startTime = current_time;
     6aa:	60 92 d6 02 	sts	0x02D6, r6
     6ae:	70 92 d7 02 	sts	0x02D7, r7
     6b2:	80 92 d8 02 	sts	0x02D8, r8
     6b6:	90 92 d9 02 	sts	0x02D9, r9
    	}
    }
    cadence_enc.last_state = cadence_enc.pin_state;
     6ba:	80 91 d4 02 	lds	r24, 0x02D4
     6be:	90 91 d5 02 	lds	r25, 0x02D5
     6c2:	90 93 e7 02 	sts	0x02E7, r25
     6c6:	80 93 e6 02 	sts	0x02E6, r24
  }
  if(current_time >= calc_cadence_clock){
     6ca:	80 91 92 01 	lds	r24, 0x0192
     6ce:	90 91 93 01 	lds	r25, 0x0193
     6d2:	a0 91 94 01 	lds	r26, 0x0194
     6d6:	b0 91 95 01 	lds	r27, 0x0195
     6da:	68 16       	cp	r6, r24
     6dc:	79 06       	cpc	r7, r25
     6de:	8a 06       	cpc	r8, r26
     6e0:	9b 06       	cpc	r9, r27
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <loop+0x3ae>
     6e4:	6d c0       	rjmp	.+218    	; 0x7c0 <loop+0x488>
  	if((current_time - cadence_enc.startTime) > cadence_enc.max_period){
     6e6:	80 91 d6 02 	lds	r24, 0x02D6
     6ea:	90 91 d7 02 	lds	r25, 0x02D7
     6ee:	a0 91 d8 02 	lds	r26, 0x02D8
     6f2:	b0 91 d9 02 	lds	r27, 0x02D9
     6f6:	a4 01       	movw	r20, r8
     6f8:	93 01       	movw	r18, r6
     6fa:	28 1b       	sub	r18, r24
     6fc:	39 0b       	sbc	r19, r25
     6fe:	4a 0b       	sbc	r20, r26
     700:	5b 0b       	sbc	r21, r27
     702:	80 91 e8 02 	lds	r24, 0x02E8
     706:	90 91 e9 02 	lds	r25, 0x02E9
     70a:	a0 e0       	ldi	r26, 0x00	; 0
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	82 17       	cp	r24, r18
     710:	93 07       	cpc	r25, r19
     712:	a4 07       	cpc	r26, r20
     714:	b5 07       	cpc	r27, r21
     716:	48 f4       	brcc	.+18     	; 0x72a <loop+0x3f2>
  		cadence_enc.hertz = 0;
     718:	10 92 dc 02 	sts	0x02DC, r1
     71c:	10 92 dd 02 	sts	0x02DD, r1
     720:	10 92 de 02 	sts	0x02DE, r1
     724:	10 92 df 02 	sts	0x02DF, r1
     728:	25 c0       	rjmp	.+74     	; 0x774 <loop+0x43c>
  	}
  	else if(current_time - cadence_enc.startTime > cadence_enc.last_period)
     72a:	80 91 e2 02 	lds	r24, 0x02E2
     72e:	90 91 e3 02 	lds	r25, 0x02E3
     732:	7c 01       	movw	r14, r24
     734:	00 27       	eor	r16, r16
     736:	f7 fc       	sbrc	r15, 7
     738:	00 95       	com	r16
     73a:	10 2f       	mov	r17, r16
     73c:	e2 16       	cp	r14, r18
     73e:	f3 06       	cpc	r15, r19
     740:	04 07       	cpc	r16, r20
     742:	15 07       	cpc	r17, r21
     744:	38 f4       	brcc	.+14     	; 0x754 <loop+0x41c>
  		cadence_enc.hertz = (1000L*1000L)/(current_time - cadence_enc.startTime);
     746:	60 e4       	ldi	r22, 0x40	; 64
     748:	72 e4       	ldi	r23, 0x42	; 66
     74a:	8f e0       	ldi	r24, 0x0F	; 15
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 ce 0b 	call	0x179c	; 0x179c <__udivmodsi4>
     752:	08 c0       	rjmp	.+16     	; 0x764 <loop+0x42c>
  	else{
  		cadence_enc.hertz = (1000L*1000L)/cadence_enc.last_period;
     754:	60 e4       	ldi	r22, 0x40	; 64
     756:	72 e4       	ldi	r23, 0x42	; 66
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	a8 01       	movw	r20, r16
     75e:	97 01       	movw	r18, r14
     760:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     764:	20 93 dc 02 	sts	0x02DC, r18
     768:	30 93 dd 02 	sts	0x02DD, r19
     76c:	40 93 de 02 	sts	0x02DE, r20
     770:	50 93 df 02 	sts	0x02DF, r21
  	}
  	showLED(60*cadence_enc.hertz,4);
     774:	60 91 dc 02 	lds	r22, 0x02DC
     778:	70 91 dd 02 	lds	r23, 0x02DD
     77c:	80 91 de 02 	lds	r24, 0x02DE
     780:	90 91 df 02 	lds	r25, 0x02DF
     784:	2c e3       	ldi	r18, 0x3C	; 60
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsi3>
     790:	44 e0       	ldi	r20, 0x04	; 4
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	0e 94 ac 00 	call	0x158	; 0x158 <_Z7showLEDli>
  	calc_cadence_clock = current_time+calc_cadence_period;
     798:	80 91 00 01 	lds	r24, 0x0100
     79c:	90 91 01 01 	lds	r25, 0x0101
     7a0:	aa 27       	eor	r26, r26
     7a2:	97 fd       	sbrc	r25, 7
     7a4:	a0 95       	com	r26
     7a6:	ba 2f       	mov	r27, r26
     7a8:	86 0d       	add	r24, r6
     7aa:	97 1d       	adc	r25, r7
     7ac:	a8 1d       	adc	r26, r8
     7ae:	b9 1d       	adc	r27, r9
     7b0:	80 93 92 01 	sts	0x0192, r24
     7b4:	90 93 93 01 	sts	0x0193, r25
     7b8:	a0 93 94 01 	sts	0x0194, r26
     7bc:	b0 93 95 01 	sts	0x0195, r27
//  if(current_time >= blink_clock){
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }
}
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	9f 90       	pop	r9
     7d2:	8f 90       	pop	r8
     7d4:	7f 90       	pop	r7
     7d6:	6f 90       	pop	r6
     7d8:	08 95       	ret

000007da <_Z11initLedDispv>:

	}
}

// a little setup code for the LED display
void initLedDisp() {
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
	ledDisplay.shutdown(0, false);
     7de:	08 e7       	ldi	r16, 0x78	; 120
     7e0:	12 e0       	ldi	r17, 0x02	; 2
     7e2:	c8 01       	movw	r24, r16
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN10LedControl8shutdownEib>
	ledDisplay.setIntensity(0, 12);
     7ee:	c8 01       	movw	r24, r16
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	4c e0       	ldi	r20, 0x0C	; 12
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN10LedControl12setIntensityEii>
	ledDisplay.clearDisplay(0);
     7fc:	c8 01       	movw	r24, r16
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_ZN10LedControl12clearDisplayEi>
}
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <_Z12init_impulsePiii>:
  pulser.offset_time = 0; // start pulse at beginning of each carrier period

  init_impulse(impulse_array, impulse_num_samples, 255);
}

void init_impulse(int * array, int array_length, int peak_value){
     80c:	2f 92       	push	r2
     80e:	3f 92       	push	r3
     810:	4f 92       	push	r4
     812:	5f 92       	push	r5
     814:	6f 92       	push	r6
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	00 d0       	rcall	.+0      	; 0x832 <_Z12init_impulsePiii+0x26>
     832:	00 d0       	rcall	.+0      	; 0x834 <_Z12init_impulsePiii+0x28>
     834:	00 d0       	rcall	.+0      	; 0x836 <_Z12init_impulsePiii+0x2a>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	7c 83       	std	Y+4, r23	; 0x04
     83c:	6b 83       	std	Y+3, r22	; 0x03
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	1e 82       	std	Y+6, r1	; 0x06
     844:	1d 82       	std	Y+5, r1	; 0x05
	int i = 0;
	for(i = 0; i < array_length; i ++){
		array[i] = (int)((double)peak_value*0.5*(cos((2.0*pi*(double)i)/(double)array_length - pi) + 1.0));
     846:	1b 01       	movw	r2, r22
     848:	44 24       	eor	r4, r4
     84a:	37 fc       	sbrc	r3, 7
     84c:	40 94       	com	r4
     84e:	54 2c       	mov	r5, r4
     850:	3a 01       	movw	r6, r20
     852:	88 24       	eor	r8, r8
     854:	77 fc       	sbrc	r7, 7
     856:	80 94       	com	r8
     858:	98 2c       	mov	r9, r8
     85a:	4d c0       	rjmp	.+154    	; 0x8f6 <_Z12init_impulsePiii+0xea>
     85c:	2d 81       	ldd	r18, Y+5	; 0x05
     85e:	3e 81       	ldd	r19, Y+6	; 0x06
     860:	b9 01       	movw	r22, r18
     862:	88 27       	eor	r24, r24
     864:	77 fd       	sbrc	r23, 7
     866:	80 95       	com	r24
     868:	98 2f       	mov	r25, r24
     86a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__floatsisf>
     86e:	2b ed       	ldi	r18, 0xDB	; 219
     870:	3f e0       	ldi	r19, 0x0F	; 15
     872:	49 ec       	ldi	r20, 0xC9	; 201
     874:	50 e4       	ldi	r21, 0x40	; 64
     876:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     87a:	7b 01       	movw	r14, r22
     87c:	8c 01       	movw	r16, r24
     87e:	c2 01       	movw	r24, r4
     880:	b1 01       	movw	r22, r2
     882:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__floatsisf>
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
     88a:	c8 01       	movw	r24, r16
     88c:	b7 01       	movw	r22, r14
     88e:	0e 94 80 09 	call	0x1300	; 0x1300 <__divsf3>
     892:	2b ed       	ldi	r18, 0xDB	; 219
     894:	3f e0       	ldi	r19, 0x0F	; 15
     896:	49 e4       	ldi	r20, 0x49	; 73
     898:	50 e4       	ldi	r21, 0x40	; 64
     89a:	0e 94 18 09 	call	0x1230	; 0x1230 <__subsf3>
     89e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <cos>
     8a2:	5b 01       	movw	r10, r22
     8a4:	6c 01       	movw	r12, r24
     8a6:	c4 01       	movw	r24, r8
     8a8:	b3 01       	movw	r22, r6
     8aa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__floatsisf>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     8ba:	7b 01       	movw	r14, r22
     8bc:	8c 01       	movw	r16, r24
     8be:	c6 01       	movw	r24, r12
     8c0:	b5 01       	movw	r22, r10
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e8       	ldi	r20, 0x80	; 128
     8c8:	5f e3       	ldi	r21, 0x3F	; 63
     8ca:	0e 94 19 09 	call	0x1232	; 0x1232 <__addsf3>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	c8 01       	movw	r24, r16
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3>
     8da:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fixsfsi>
     8de:	e9 81       	ldd	r30, Y+1	; 0x01
     8e0:	fa 81       	ldd	r31, Y+2	; 0x02
     8e2:	61 93       	st	Z+, r22
     8e4:	71 93       	st	Z+, r23
     8e6:	fa 83       	std	Y+2, r31	; 0x02
     8e8:	e9 83       	std	Y+1, r30	; 0x01
  init_impulse(impulse_array, impulse_num_samples, 255);
}

void init_impulse(int * array, int array_length, int peak_value){
	int i = 0;
	for(i = 0; i < array_length; i ++){
     8ea:	2d 81       	ldd	r18, Y+5	; 0x05
     8ec:	3e 81       	ldd	r19, Y+6	; 0x06
     8ee:	2f 5f       	subi	r18, 0xFF	; 255
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	3e 83       	std	Y+6, r19	; 0x06
     8f4:	2d 83       	std	Y+5, r18	; 0x05
     8f6:	8d 81       	ldd	r24, Y+5	; 0x05
     8f8:	9e 81       	ldd	r25, Y+6	; 0x06
     8fa:	eb 81       	ldd	r30, Y+3	; 0x03
     8fc:	fc 81       	ldd	r31, Y+4	; 0x04
     8fe:	8e 17       	cp	r24, r30
     900:	9f 07       	cpc	r25, r31
     902:	0c f4       	brge	.+2      	; 0x906 <__stack+0x7>
     904:	ab cf       	rjmp	.-170    	; 0x85c <_Z12init_impulsePiii+0x50>
		array[i] = (int)((double)peak_value*0.5*(cos((2.0*pi*(double)i)/(double)array_length - pi) + 1.0));

	}
}
     906:	26 96       	adiw	r28, 0x06	; 6
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	3f 90       	pop	r3
     934:	2f 90       	pop	r2
     936:	08 95       	ret

00000938 <setup>:
// instantiate LED Display controller -- the 4th argument is the number of displays
LedControl ledDisplay = LedControl(LED_DATA_PIN, LED_CLOCK_PIN, LED_CSLOAD_PIN, 1);
encoder_struct cadence_enc;

void setup() {
  pinMode(LED_PWM_PIN, OUTPUT);
     938:	8b e0       	ldi	r24, 0x0B	; 11
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
  //pinMode(POT_PIN, INPUT);
  pinMode(INTERRUPTER_PIN, INPUT);
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
  pinMode(LED_PIN, OUTPUT);
     948:	88 e0       	ldi	r24, 0x08	; 8
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
  initLedDisp();
     950:	0e 94 ed 03 	call	0x7da	; 0x7da <_Z11initLedDispv>
  blink_clock = millis();
     954:	0e 94 3e 07 	call	0xe7c	; 0xe7c <millis>
     958:	60 93 8e 01 	sts	0x018E, r22
     95c:	70 93 8f 01 	sts	0x018F, r23
     960:	80 93 90 01 	sts	0x0190, r24
     964:	90 93 91 01 	sts	0x0191, r25
  cadence_enc.max_hertz = 5;
     968:	25 e0       	ldi	r18, 0x05	; 5
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	30 93 db 02 	sts	0x02DB, r19
     970:	20 93 da 02 	sts	0x02DA, r18
  cadence_enc.max_period = 3000;
     974:	88 eb       	ldi	r24, 0xB8	; 184
     976:	9b e0       	ldi	r25, 0x0B	; 11
     978:	90 93 e9 02 	sts	0x02E9, r25
     97c:	80 93 e8 02 	sts	0x02E8, r24
  cadence_enc.pin_num = INTERRUPTER_PIN;
     980:	87 e0       	ldi	r24, 0x07	; 7
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 e1 02 	sts	0x02E1, r25
     988:	80 93 e0 02 	sts	0x02E0, r24
  cadence_enc.debounce_min = 5;
     98c:	30 93 d3 02 	sts	0x02D3, r19
     990:	20 93 d2 02 	sts	0x02D2, r18
  cadence_enc.alpha = 800;
     994:	80 e2       	ldi	r24, 0x20	; 32
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	80 93 ea 02 	sts	0x02EA, r24
     9a0:	90 93 eb 02 	sts	0x02EB, r25
     9a4:	a0 93 ec 02 	sts	0x02EC, r26
     9a8:	b0 93 ed 02 	sts	0x02ED, r27
  cadence_enc.cts_per_rev = 1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 e5 02 	sts	0x02E5, r25
     9b4:	80 93 e4 02 	sts	0x02E4, r24

  pulser.carrier_clock = 0;
     9b8:	10 92 68 02 	sts	0x0268, r1
     9bc:	10 92 69 02 	sts	0x0269, r1
     9c0:	10 92 6a 02 	sts	0x026A, r1
     9c4:	10 92 6b 02 	sts	0x026B, r1
  pulser.carrier_period = 5000;
     9c8:	88 e8       	ldi	r24, 0x88	; 136
     9ca:	93 e1       	ldi	r25, 0x13	; 19
     9cc:	90 93 63 02 	sts	0x0263, r25
     9d0:	80 93 62 02 	sts	0x0262, r24
  pulser.step_clock = 0;
     9d4:	10 92 70 02 	sts	0x0270, r1
     9d8:	10 92 71 02 	sts	0x0271, r1
     9dc:	10 92 72 02 	sts	0x0272, r1
     9e0:	10 92 73 02 	sts	0x0273, r1
  pulser.pulse_period = 5000;
     9e4:	90 93 65 02 	sts	0x0265, r25
     9e8:	80 93 64 02 	sts	0x0264, r24
  pulser.step_period = pulser.pulse_period / impulse_num_samples;
     9ec:	82 e3       	ldi	r24, 0x32	; 50
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	90 93 67 02 	sts	0x0267, r25
     9f4:	80 93 66 02 	sts	0x0266, r24
  pulser.index = 0;
     9f8:	10 92 75 02 	sts	0x0275, r1
     9fc:	10 92 74 02 	sts	0x0274, r1
  pulser.offset_time = 0; // start pulse at beginning of each carrier period
     a00:	10 92 77 02 	sts	0x0277, r1
     a04:	10 92 76 02 	sts	0x0276, r1

  init_impulse(impulse_array, impulse_num_samples, 255);
     a08:	8a e9       	ldi	r24, 0x9A	; 154
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	64 e6       	ldi	r22, 0x64	; 100
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	4f ef       	ldi	r20, 0xFF	; 255
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	0e 94 06 04 	call	0x80c	; 0x80c <_Z12init_impulsePiii>
}
     a18:	08 95       	ret

00000a1a <_ZN10LedControl11spiTransferEihh>:
	v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
}

void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <_ZN10LedControl11spiTransferEihh+0x1a>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	7c 01       	movw	r14, r24
     a3a:	49 83       	std	Y+1, r20	; 0x01
     a3c:	2a 83       	std	Y+2, r18	; 0x02
    //Create an array with the data to shift out
    int offset=addr*2;
     a3e:	66 0f       	add	r22, r22
     a40:	77 1f       	adc	r23, r23
    int maxbytes=maxDevices*2;
     a42:	86 e5       	ldi	r24, 0x56	; 86
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	e8 0e       	add	r14, r24
     a48:	f9 1e       	adc	r15, r25
     a4a:	f7 01       	movw	r30, r14
     a4c:	00 81       	ld	r16, Z
     a4e:	11 81       	ldd	r17, Z+1	; 0x01
     a50:	8a ea       	ldi	r24, 0xAA	; 170
     a52:	9f ef       	ldi	r25, 0xFF	; 255
     a54:	e8 0e       	add	r14, r24
     a56:	f9 1e       	adc	r15, r25
     a58:	00 0f       	add	r16, r16
     a5a:	11 1f       	adc	r17, r17
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <_ZN10LedControl11spiTransferEihh+0x52>

    for(int i=0;i<maxbytes;i++)
	spidata[i]=(byte)0;
     a62:	f7 01       	movw	r30, r14
     a64:	e8 0f       	add	r30, r24
     a66:	f9 1f       	adc	r31, r25
     a68:	10 82       	st	Z, r1
void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
    //Create an array with the data to shift out
    int offset=addr*2;
    int maxbytes=maxDevices*2;

    for(int i=0;i<maxbytes;i++)
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	80 17       	cp	r24, r16
     a6e:	91 07       	cpc	r25, r17
     a70:	c4 f3       	brlt	.-16     	; 0xa62 <_ZN10LedControl11spiTransferEihh+0x48>
	spidata[i]=(byte)0;
    //put our device data into the array
    spidata[offset+1]=opcode;
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	f7 01       	movw	r30, r14
     a76:	e6 0f       	add	r30, r22
     a78:	f7 1f       	adc	r31, r23
     a7a:	81 83       	std	Z+1, r24	; 0x01
    spidata[offset]=data;
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	80 83       	st	Z, r24
    //enable the line 
    digitalWrite(SPI_CS,LOW);
     a80:	f7 01       	movw	r30, r14
     a82:	ec 5a       	subi	r30, 0xAC	; 172
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
     a8e:	01 50       	subi	r16, 0x01	; 1
     a90:	10 40       	sbci	r17, 0x00	; 0
     a92:	67 01       	movw	r12, r14
     a94:	c0 0e       	add	r12, r16
     a96:	d1 1e       	adc	r13, r17
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    //Now shift out the data 
    for(int i=maxbytes;i>0;i--)
 	shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);
     a9c:	90 e5       	ldi	r25, 0x50	; 80
     a9e:	89 2e       	mov	r8, r25
     aa0:	91 2c       	mov	r9, r1
     aa2:	8e 0c       	add	r8, r14
     aa4:	9f 1c       	adc	r9, r15
     aa6:	82 e5       	ldi	r24, 0x52	; 82
     aa8:	a8 2e       	mov	r10, r24
     aaa:	b1 2c       	mov	r11, r1
     aac:	ae 0c       	add	r10, r14
     aae:	bf 1c       	adc	r11, r15
     ab0:	0e c0       	rjmp	.+28     	; 0xace <_ZN10LedControl11spiTransferEihh+0xb4>
     ab2:	01 50       	subi	r16, 0x01	; 1
     ab4:	10 40       	sbci	r17, 0x00	; 0
     ab6:	f4 01       	movw	r30, r8
     ab8:	80 81       	ld	r24, Z
     aba:	f5 01       	movw	r30, r10
     abc:	60 81       	ld	r22, Z
     abe:	41 e0       	ldi	r20, 0x01	; 1
     ac0:	f6 01       	movw	r30, r12
     ac2:	20 81       	ld	r18, Z
     ac4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <shiftOut>
     ac8:	08 94       	sec
     aca:	c1 08       	sbc	r12, r1
     acc:	d1 08       	sbc	r13, r1
    spidata[offset+1]=opcode;
    spidata[offset]=data;
    //enable the line 
    digitalWrite(SPI_CS,LOW);
    //Now shift out the data 
    for(int i=maxbytes;i>0;i--)
     ace:	10 16       	cp	r1, r16
     ad0:	11 06       	cpc	r1, r17
     ad2:	7c f3       	brlt	.-34     	; 0xab2 <_ZN10LedControl11spiTransferEihh+0x98>
 	shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);
    //latch the data onto the display
    digitalWrite(SPI_CS,HIGH);
     ad4:	84 e5       	ldi	r24, 0x54	; 84
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	e8 0e       	add	r14, r24
     ada:	f9 1e       	adc	r15, r25
     adc:	f7 01       	movw	r30, r14
     ade:	80 81       	ld	r24, Z
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
}    
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	cf 91       	pop	r28
     aec:	df 91       	pop	r29
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	9f 90       	pop	r9
     b00:	8f 90       	pop	r8
     b02:	08 95       	ret

00000b04 <_ZN10LedControl8setDigitEiihh>:
	val=val & 0x01;
	setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
     b04:	0f 93       	push	r16
     b06:	dc 01       	movw	r26, r24
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
     b08:	77 fd       	sbrc	r23, 7
     b0a:	25 c0       	rjmp	.+74     	; 0xb56 <_ZN10LedControl8setDigitEiihh+0x52>
     b0c:	aa 5a       	subi	r26, 0xAA	; 170
     b0e:	bf 4f       	sbci	r27, 0xFF	; 255
     b10:	8d 91       	ld	r24, X+
     b12:	9c 91       	ld	r25, X
     b14:	11 97       	sbiw	r26, 0x01	; 1
     b16:	a6 55       	subi	r26, 0x56	; 86
     b18:	b0 40       	sbci	r27, 0x00	; 0
     b1a:	68 17       	cp	r22, r24
     b1c:	79 07       	cpc	r23, r25
     b1e:	dc f4       	brge	.+54     	; 0xb56 <_ZN10LedControl8setDigitEiihh+0x52>
	return;
    if(digit<0 || digit>7 || value>15)
     b20:	48 30       	cpi	r20, 0x08	; 8
     b22:	51 05       	cpc	r21, r1
     b24:	c0 f4       	brcc	.+48     	; 0xb56 <_ZN10LedControl8setDigitEiihh+0x52>
     b26:	20 31       	cpi	r18, 0x10	; 16
     b28:	b0 f4       	brcc	.+44     	; 0xb56 <_ZN10LedControl8setDigitEiihh+0x52>
	return;
    offset=addr*8;
    v=charTable[value];
     b2a:	e2 2f       	mov	r30, r18
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	e9 5f       	subi	r30, 0xF9	; 249
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	20 81       	ld	r18, Z
    if(dp)
     b34:	01 11       	cpse	r16, r1
	v|=B10000000;
     b36:	20 68       	ori	r18, 0x80	; 128
    status[offset+digit]=v;
     b38:	fb 01       	movw	r30, r22
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <_ZN10LedControl8setDigitEiihh+0x38>
     b44:	ea 0f       	add	r30, r26
     b46:	fb 1f       	adc	r31, r27
     b48:	e4 0f       	add	r30, r20
     b4a:	f5 1f       	adc	r31, r21
     b4c:	20 8b       	std	Z+16, r18	; 0x10
    spiTransfer(addr, digit+1,v);
     b4e:	4f 5f       	subi	r20, 0xFF	; 255
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
    
}
     b56:	0f 91       	pop	r16
     b58:	08 95       	ret

00000b5a <_ZN10LedControl12clearDisplayEi>:
    if(intensity>=0 || intensity<16)	
	spiTransfer(addr, OP_INTENSITY,intensity);
    
}

void LedControl::clearDisplay(int addr) {
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
     b6a:	7b 01       	movw	r14, r22
    int offset;

    if(addr<0 || addr>=maxDevices)
     b6c:	77 fd       	sbrc	r23, 7
     b6e:	22 c0       	rjmp	.+68     	; 0xbb4 <_ZN10LedControl12clearDisplayEi+0x5a>
     b70:	ca 5a       	subi	r28, 0xAA	; 170
     b72:	df 4f       	sbci	r29, 0xFF	; 255
     b74:	88 81       	ld	r24, Y
     b76:	99 81       	ldd	r25, Y+1	; 0x01
     b78:	c6 55       	subi	r28, 0x56	; 86
     b7a:	d0 40       	sbci	r29, 0x00	; 0
     b7c:	68 17       	cp	r22, r24
     b7e:	79 07       	cpc	r23, r25
     b80:	cc f4       	brge	.+50     	; 0xbb4 <_ZN10LedControl12clearDisplayEi+0x5a>
     b82:	8b 01       	movw	r16, r22
     b84:	0e 5f       	subi	r16, 0xFE	; 254
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	53 e0       	ldi	r21, 0x03	; 3
     b8a:	00 0f       	add	r16, r16
     b8c:	11 1f       	adc	r17, r17
     b8e:	5a 95       	dec	r21
     b90:	e1 f7       	brne	.-8      	; 0xb8a <_ZN10LedControl12clearDisplayEi+0x30>
     b92:	0c 0f       	add	r16, r28
     b94:	1d 1f       	adc	r17, r29
     b96:	dd 24       	eor	r13, r13
     b98:	d3 94       	inc	r13
	return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
	status[offset+i]=0;
     b9a:	f8 01       	movw	r30, r16
     b9c:	11 92       	st	Z+, r1
     b9e:	8f 01       	movw	r16, r30
	spiTransfer(addr, i+1,status[offset+i]);
     ba0:	ce 01       	movw	r24, r28
     ba2:	b7 01       	movw	r22, r14
     ba4:	4d 2d       	mov	r20, r13
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
     bac:	d3 94       	inc	r13
    int offset;

    if(addr<0 || addr>=maxDevices)
	return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
     bae:	f9 e0       	ldi	r31, 0x09	; 9
     bb0:	df 16       	cp	r13, r31
     bb2:	99 f7       	brne	.-26     	; 0xb9a <_ZN10LedControl12clearDisplayEi+0x40>
	status[offset+i]=0;
	spiTransfer(addr, i+1,status[offset+i]);
    }
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	08 95       	ret

00000bc4 <_ZN10LedControl12setIntensityEii>:
	return;
    if(limit>=0 || limit<8)
    	spiTransfer(addr, OP_SCANLIMIT,limit);
}

void LedControl::setIntensity(int addr, int intensity) {
     bc4:	fc 01       	movw	r30, r24
     bc6:	24 2f       	mov	r18, r20
    if(addr<0 || addr>=maxDevices)
     bc8:	77 fd       	sbrc	r23, 7
     bca:	0d c0       	rjmp	.+26     	; 0xbe6 <_ZN10LedControl12setIntensityEii+0x22>
     bcc:	ea 5a       	subi	r30, 0xAA	; 170
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	e6 55       	subi	r30, 0x56	; 86
     bd6:	f0 40       	sbci	r31, 0x00	; 0
     bd8:	68 17       	cp	r22, r24
     bda:	79 07       	cpc	r23, r25
     bdc:	24 f4       	brge	.+8      	; 0xbe6 <_ZN10LedControl12setIntensityEii+0x22>
	return;
    if(intensity>=0 || intensity<16)	
	spiTransfer(addr, OP_INTENSITY,intensity);
     bde:	cf 01       	movw	r24, r30
     be0:	4a e0       	ldi	r20, 0x0A	; 10
     be2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
     be6:	08 95       	ret

00000be8 <_ZN10LedControl12setScanLimitEii>:
	spiTransfer(addr, OP_SHUTDOWN,0);
    else
	spiTransfer(addr, OP_SHUTDOWN,1);
}
	
void LedControl::setScanLimit(int addr, int limit) {
     be8:	fc 01       	movw	r30, r24
     bea:	24 2f       	mov	r18, r20
    if(addr<0 || addr>=maxDevices)
     bec:	77 fd       	sbrc	r23, 7
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <_ZN10LedControl12setScanLimitEii+0x22>
     bf0:	ea 5a       	subi	r30, 0xAA	; 170
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	e6 55       	subi	r30, 0x56	; 86
     bfa:	f0 40       	sbci	r31, 0x00	; 0
     bfc:	68 17       	cp	r22, r24
     bfe:	79 07       	cpc	r23, r25
     c00:	24 f4       	brge	.+8      	; 0xc0a <_ZN10LedControl12setScanLimitEii+0x22>
	return;
    if(limit>=0 || limit<8)
    	spiTransfer(addr, OP_SCANLIMIT,limit);
     c02:	cf 01       	movw	r24, r30
     c04:	4b e0       	ldi	r20, 0x0B	; 11
     c06:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
     c0a:	08 95       	ret

00000c0c <_ZN10LedControl8shutdownEib>:

int LedControl::getDeviceCount() {
    return maxDevices;
}

void LedControl::shutdown(int addr, bool b) {
     c0c:	fc 01       	movw	r30, r24
    if(addr<0 || addr>=maxDevices)
     c0e:	77 fd       	sbrc	r23, 7
     c10:	16 c0       	rjmp	.+44     	; 0xc3e <_ZN10LedControl8shutdownEib+0x32>
     c12:	ea 5a       	subi	r30, 0xAA	; 170
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	e6 55       	subi	r30, 0x56	; 86
     c1c:	f0 40       	sbci	r31, 0x00	; 0
     c1e:	68 17       	cp	r22, r24
     c20:	79 07       	cpc	r23, r25
     c22:	6c f4       	brge	.+26     	; 0xc3e <_ZN10LedControl8shutdownEib+0x32>
	return;
    if(b)
     c24:	44 23       	and	r20, r20
     c26:	31 f0       	breq	.+12     	; 0xc34 <_ZN10LedControl8shutdownEib+0x28>
	spiTransfer(addr, OP_SHUTDOWN,0);
     c28:	cf 01       	movw	r24, r30
     c2a:	4c e0       	ldi	r20, 0x0C	; 12
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
     c32:	08 95       	ret
    else
	spiTransfer(addr, OP_SHUTDOWN,1);
     c34:	cf 01       	movw	r24, r30
     c36:	4c e0       	ldi	r20, 0x0C	; 12
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
     c3e:	08 95       	ret

00000c40 <_ZN10LedControlC1Eiiii>:
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	6b 01       	movw	r12, r22
    SPI_MOSI=dataPin;
     c54:	c0 5b       	subi	r28, 0xB0	; 176
     c56:	df 4f       	sbci	r29, 0xFF	; 255
     c58:	69 93       	st	Y+, r22
     c5a:	79 93       	st	Y+, r23
    SPI_CLK=clkPin;
     c5c:	49 93       	st	Y+, r20
     c5e:	59 93       	st	Y+, r21
    SPI_CS=csPin;
     c60:	39 83       	std	Y+1, r19	; 0x01
     c62:	28 83       	st	Y, r18
     c64:	c4 55       	subi	r28, 0x54	; 84
     c66:	d0 40       	sbci	r29, 0x00	; 0
    if(numDevices<=0 || numDevices>8 )
     c68:	c8 01       	movw	r24, r16
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	08 97       	sbiw	r24, 0x08	; 8
     c6e:	10 f0       	brcs	.+4      	; 0xc74 <_ZN10LedControlC1Eiiii+0x34>
     c70:	08 e0       	ldi	r16, 0x08	; 8
     c72:	10 e0       	ldi	r17, 0x00	; 0
	numDevices=8;
    maxDevices=numDevices;
     c74:	ca 5a       	subi	r28, 0xAA	; 170
     c76:	df 4f       	sbci	r29, 0xFF	; 255
     c78:	19 83       	std	Y+1, r17	; 0x01
     c7a:	08 83       	st	Y, r16
     c7c:	c6 55       	subi	r28, 0x56	; 86
     c7e:	d0 40       	sbci	r29, 0x00	; 0
    pinMode(SPI_MOSI,OUTPUT);
     c80:	8e 01       	movw	r16, r28
     c82:	00 5b       	subi	r16, 0xB0	; 176
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	f8 01       	movw	r30, r16
     c88:	80 81       	ld	r24, Z
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
    pinMode(SPI_CLK,OUTPUT);
     c90:	fe 01       	movw	r30, r28
     c92:	ee 5a       	subi	r30, 0xAE	; 174
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	80 81       	ld	r24, Z
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
    pinMode(SPI_CS,OUTPUT);
     c9e:	74 e5       	ldi	r23, 0x54	; 84
     ca0:	e7 2e       	mov	r14, r23
     ca2:	f1 2c       	mov	r15, r1
     ca4:	ec 0e       	add	r14, r28
     ca6:	fd 1e       	adc	r15, r29
     ca8:	f7 01       	movw	r30, r14
     caa:	80 81       	ld	r24, Z
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
    digitalWrite(SPI_CS,HIGH);
     cb2:	f7 01       	movw	r30, r14
     cb4:	80 81       	ld	r24, Z
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
    SPI_MOSI=dataPin;
     cbc:	f8 01       	movw	r30, r16
     cbe:	d1 82       	std	Z+1, r13	; 0x01
     cc0:	c0 82       	st	Z, r12
     cc2:	fe 01       	movw	r30, r28
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
    for(int i=0;i<64;i++) 
	status[i]=0x00;
     cc8:	10 8a       	std	Z+16, r1	; 0x10
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	d1 f7       	brne	.-12     	; 0xcc8 <_ZN10LedControlC1Eiiii+0x88>
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
	status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
     cd8:	66 e5       	ldi	r22, 0x56	; 86
     cda:	c6 2e       	mov	r12, r22
     cdc:	d1 2c       	mov	r13, r1
     cde:	cc 0e       	add	r12, r28
     ce0:	dd 1e       	adc	r13, r29
     ce2:	1d c0       	rjmp	.+58     	; 0xd1e <_ZN10LedControlC1Eiiii+0xde>
	spiTransfer(i,OP_DISPLAYTEST,0);
     ce4:	ce 01       	movw	r24, r28
     ce6:	b8 01       	movw	r22, r16
     ce8:	4f e0       	ldi	r20, 0x0F	; 15
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
	//scanlimit is set to max on startup
	setScanLimit(i,7);
     cf0:	ce 01       	movw	r24, r28
     cf2:	b8 01       	movw	r22, r16
     cf4:	47 e0       	ldi	r20, 0x07	; 7
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN10LedControl12setScanLimitEii>
	//decode is done in source
	spiTransfer(i,OP_DECODEMODE,0);
     cfc:	ce 01       	movw	r24, r28
     cfe:	b8 01       	movw	r22, r16
     d00:	49 e0       	ldi	r20, 0x09	; 9
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN10LedControl11spiTransferEihh>
	clearDisplay(i);
     d08:	ce 01       	movw	r24, r28
     d0a:	b8 01       	movw	r22, r16
     d0c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_ZN10LedControl12clearDisplayEi>
	//we go into shutdown-mode on startup
	shutdown(i,true);
     d10:	ce 01       	movw	r24, r28
     d12:	b8 01       	movw	r22, r16
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN10LedControl8shutdownEib>
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
	status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	f6 01       	movw	r30, r12
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	08 17       	cp	r16, r24
     d26:	19 07       	cpc	r17, r25
     d28:	ec f2       	brlt	.-70     	; 0xce4 <_ZN10LedControlC1Eiiii+0xa4>
	spiTransfer(i,OP_DECODEMODE,0);
	clearDisplay(i);
	//we go into shutdown-mode on startup
	shutdown(i,true);
    }
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	3b 01       	movw	r6, r22
     d66:	4c 01       	movw	r8, r24
     d68:	19 01       	movw	r2, r18
     d6a:	2a 01       	movw	r4, r20
     d6c:	6d 89       	ldd	r22, Y+21	; 0x15
     d6e:	7e 89       	ldd	r23, Y+22	; 0x16
     d70:	8f 89       	ldd	r24, Y+23	; 0x17
     d72:	98 8d       	ldd	r25, Y+24	; 0x18
     d74:	6a 19       	sub	r22, r10
     d76:	7b 09       	sbc	r23, r11
     d78:	8c 09       	sbc	r24, r12
     d7a:	9d 09       	sbc	r25, r13
     d7c:	62 1a       	sub	r6, r18
     d7e:	73 0a       	sbc	r7, r19
     d80:	84 0a       	sbc	r8, r20
     d82:	95 0a       	sbc	r9, r21
     d84:	a4 01       	movw	r20, r8
     d86:	93 01       	movw	r18, r6
     d88:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsi3>
     d8c:	e2 18       	sub	r14, r2
     d8e:	f3 08       	sbc	r15, r3
     d90:	04 09       	sbc	r16, r4
     d92:	15 09       	sbc	r17, r5
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__divmodsi4>
     d9c:	2a 0d       	add	r18, r10
     d9e:	3b 1d       	adc	r19, r11
     da0:	4c 1d       	adc	r20, r12
     da2:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
     da4:	b9 01       	movw	r22, r18
     da6:	ca 01       	movw	r24, r20
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	3f 90       	pop	r3
     dca:	2f 90       	pop	r2
     dcc:	08 95       	ret

00000dce <main>:
#include <Arduino.h>

int main(void)
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
{
	init();
     dd2:	0e 94 4c 07 	call	0xe98	; 0xe98 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     dd6:	0e 94 9c 04 	call	0x938	; 0x938 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     dda:	c0 e0       	ldi	r28, 0x00	; 0
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     dde:	0e 94 9c 01 	call	0x338	; 0x338 <loop>
		if (serialEventRun) serialEventRun();
     de2:	20 97       	sbiw	r28, 0x00	; 0
     de4:	e1 f3       	breq	.-8      	; 0xdde <main+0x10>
     de6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dea:	f9 cf       	rjmp	.-14     	; 0xdde <main+0x10>

00000dec <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e02:	80 91 f2 02 	lds	r24, 0x02F2
     e06:	90 91 f3 02 	lds	r25, 0x02F3
     e0a:	a0 91 f4 02 	lds	r26, 0x02F4
     e0e:	b0 91 f5 02 	lds	r27, 0x02F5
	unsigned char f = timer0_fract;
     e12:	30 91 f6 02 	lds	r19, 0x02F6

	m += MILLIS_INC;
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	a1 1d       	adc	r26, r1
     e1a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     e1c:	23 2f       	mov	r18, r19
     e1e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     e20:	2d 37       	cpi	r18, 0x7D	; 125
     e22:	20 f0       	brcs	.+8      	; 0xe2c <__vector_16+0x40>
		f -= FRACT_MAX;
     e24:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	a1 1d       	adc	r26, r1
     e2a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e2c:	20 93 f6 02 	sts	0x02F6, r18
	timer0_millis = m;
     e30:	80 93 f2 02 	sts	0x02F2, r24
     e34:	90 93 f3 02 	sts	0x02F3, r25
     e38:	a0 93 f4 02 	sts	0x02F4, r26
     e3c:	b0 93 f5 02 	sts	0x02F5, r27
	timer0_overflow_count++;
     e40:	80 91 ee 02 	lds	r24, 0x02EE
     e44:	90 91 ef 02 	lds	r25, 0x02EF
     e48:	a0 91 f0 02 	lds	r26, 0x02F0
     e4c:	b0 91 f1 02 	lds	r27, 0x02F1
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	a1 1d       	adc	r26, r1
     e54:	b1 1d       	adc	r27, r1
     e56:	80 93 ee 02 	sts	0x02EE, r24
     e5a:	90 93 ef 02 	sts	0x02EF, r25
     e5e:	a0 93 f0 02 	sts	0x02F0, r26
     e62:	b0 93 f1 02 	sts	0x02F1, r27
}
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     e7c:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     e7e:	f8 94       	cli
	m = timer0_millis;
     e80:	20 91 f2 02 	lds	r18, 0x02F2
     e84:	30 91 f3 02 	lds	r19, 0x02F3
     e88:	40 91 f4 02 	lds	r20, 0x02F4
     e8c:	50 91 f5 02 	lds	r21, 0x02F5
	SREG = oldSREG;
     e90:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     e92:	b9 01       	movw	r22, r18
     e94:	ca 01       	movw	r24, r20
     e96:	08 95       	ret

00000e98 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e98:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e9a:	84 b5       	in	r24, 0x24	; 36
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ea0:	84 b5       	in	r24, 0x24	; 36
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ea6:	85 b5       	in	r24, 0x25	; 37
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     eac:	85 b5       	in	r24, 0x25	; 37
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     eb2:	ee e6       	ldi	r30, 0x6E	; 110
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ebc:	e1 e8       	ldi	r30, 0x81	; 129
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ec2:	80 81       	ld	r24, Z
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ec8:	80 81       	ld	r24, Z
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ece:	e0 e8       	ldi	r30, 0x80	; 128
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ed8:	e1 eb       	ldi	r30, 0xB1	; 177
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	84 60       	ori	r24, 0x04	; 4
     ee0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ee2:	e0 eb       	ldi	r30, 0xB0	; 176
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     eec:	ea e7       	ldi	r30, 0x7A	; 122
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	84 60       	ori	r24, 0x04	; 4
     ef4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ef6:	80 81       	ld	r24, Z
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     efc:	80 81       	ld	r24, Z
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f08:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     f0c:	08 95       	ret

00000f0e <analogRead>:

int analogRead(uint8_t pin)
{
     f0e:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     f10:	8e 30       	cpi	r24, 0x0E	; 14
     f12:	08 f0       	brcs	.+2      	; 0xf16 <analogRead+0x8>
     f14:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     f16:	97 70       	andi	r25, 0x07	; 7
     f18:	80 91 06 01 	lds	r24, 0x0106
     f1c:	82 95       	swap	r24
     f1e:	88 0f       	add	r24, r24
     f20:	88 0f       	add	r24, r24
     f22:	80 7c       	andi	r24, 0xC0	; 192
     f24:	89 2b       	or	r24, r25
     f26:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     f2a:	80 91 7a 00 	lds	r24, 0x007A
     f2e:	80 64       	ori	r24, 0x40	; 64
     f30:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     f34:	80 91 7a 00 	lds	r24, 0x007A
     f38:	86 fd       	sbrc	r24, 6
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     f3c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     f40:	40 91 79 00 	lds	r20, 0x0079
     f44:	94 2f       	mov	r25, r20
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	28 2b       	or	r18, r24
     f4c:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
     f4e:	c9 01       	movw	r24, r18
     f50:	08 95       	ret

00000f52 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	18 2f       	mov	r17, r24
     f5a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	0e 94 09 08 	call	0x1012	; 0x1012 <pinMode>
	if (val == 0)
     f62:	20 97       	sbiw	r28, 0x00	; 0
     f64:	09 f4       	brne	.+2      	; 0xf68 <analogWrite+0x16>
     f66:	4a c0       	rjmp	.+148    	; 0xffc <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
     f68:	cf 3f       	cpi	r28, 0xFF	; 255
     f6a:	d1 05       	cpc	r29, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <analogWrite+0x1e>
     f6e:	49 c0       	rjmp	.+146    	; 0x1002 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     f70:	e1 2f       	mov	r30, r17
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	e4 53       	subi	r30, 0x34	; 52
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	84 91       	lpm	r24, Z+
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	c1 f0       	breq	.+48     	; 0xfae <analogWrite+0x5c>
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	28 f4       	brcc	.+10     	; 0xf8c <analogWrite+0x3a>
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	51 f0       	breq	.+20     	; 0xf9a <analogWrite+0x48>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	b1 f5       	brne	.+108    	; 0xff6 <analogWrite+0xa4>
     f8a:	0c c0       	rjmp	.+24     	; 0xfa4 <analogWrite+0x52>
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	19 f1       	breq	.+70     	; 0xfd6 <analogWrite+0x84>
     f90:	87 30       	cpi	r24, 0x07	; 7
     f92:	49 f1       	breq	.+82     	; 0xfe6 <analogWrite+0x94>
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	79 f5       	brne	.+94     	; 0xff6 <analogWrite+0xa4>
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     f9a:	84 b5       	in	r24, 0x24	; 36
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     fa0:	c7 bd       	out	0x27, r28	; 39
     fa2:	33 c0       	rjmp	.+102    	; 0x100a <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     fa4:	84 b5       	in	r24, 0x24	; 36
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     faa:	c8 bd       	out	0x28, r28	; 40
     fac:	2e c0       	rjmp	.+92     	; 0x100a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     fae:	80 91 80 00 	lds	r24, 0x0080
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
     fb8:	d0 93 89 00 	sts	0x0089, r29
     fbc:	c0 93 88 00 	sts	0x0088, r28
     fc0:	24 c0       	rjmp	.+72     	; 0x100a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     fc2:	80 91 80 00 	lds	r24, 0x0080
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
     fcc:	d0 93 8b 00 	sts	0x008B, r29
     fd0:	c0 93 8a 00 	sts	0x008A, r28
     fd4:	1a c0       	rjmp	.+52     	; 0x100a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     fd6:	80 91 b0 00 	lds	r24, 0x00B0
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
     fe0:	c0 93 b3 00 	sts	0x00B3, r28
     fe4:	12 c0       	rjmp	.+36     	; 0x100a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     fe6:	80 91 b0 00 	lds	r24, 0x00B0
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
     ff0:	c0 93 b4 00 	sts	0x00B4, r28
     ff4:	0a c0       	rjmp	.+20     	; 0x100a <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     ff6:	c0 38       	cpi	r28, 0x80	; 128
     ff8:	d1 05       	cpc	r29, r1
     ffa:	1c f4       	brge	.+6      	; 0x1002 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
     ffc:	81 2f       	mov	r24, r17
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    1002:	81 2f       	mov	r24, r17
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
				}
		}
	}
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	08 95       	ret

00001012 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    1012:	48 2f       	mov	r20, r24
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	ca 01       	movw	r24, r20
    1018:	88 54       	subi	r24, 0x48	; 72
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	fc 01       	movw	r30, r24
    101e:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    1020:	4c 55       	subi	r20, 0x5C	; 92
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	fa 01       	movw	r30, r20
    1026:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    1028:	88 23       	and	r24, r24
    102a:	c1 f0       	breq	.+48     	; 0x105c <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    102c:	e8 2f       	mov	r30, r24
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ea 57       	subi	r30, 0x7A	; 122
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	a5 91       	lpm	r26, Z+
    103a:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    103c:	66 23       	and	r22, r22
    103e:	41 f4       	brne	.+16     	; 0x1050 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1040:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1042:	f8 94       	cli
		*reg &= ~bit;
    1044:	8c 91       	ld	r24, X
    1046:	20 95       	com	r18
    1048:	82 23       	and	r24, r18
    104a:	8c 93       	st	X, r24
		SREG = oldSREG;
    104c:	9f bf       	out	0x3f, r25	; 63
    104e:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1050:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1052:	f8 94       	cli
		*reg |= bit;
    1054:	8c 91       	ld	r24, X
    1056:	82 2b       	or	r24, r18
    1058:	8c 93       	st	X, r24
		SREG = oldSREG;
    105a:	9f bf       	out	0x3f, r25	; 63
    105c:	08 95       	ret

0000105e <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    105e:	48 2f       	mov	r20, r24
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	ca 01       	movw	r24, r20
    1064:	84 53       	subi	r24, 0x34	; 52
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	fc 01       	movw	r30, r24
    106a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    106c:	ca 01       	movw	r24, r20
    106e:	88 54       	subi	r24, 0x48	; 72
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	fc 01       	movw	r30, r24
    1074:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1076:	4c 55       	subi	r20, 0x5C	; 92
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	fa 01       	movw	r30, r20
    107c:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    107e:	33 23       	and	r19, r19
    1080:	09 f4       	brne	.+2      	; 0x1084 <digitalWrite+0x26>
    1082:	40 c0       	rjmp	.+128    	; 0x1104 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1084:	22 23       	and	r18, r18
    1086:	51 f1       	breq	.+84     	; 0x10dc <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1088:	23 30       	cpi	r18, 0x03	; 3
    108a:	71 f0       	breq	.+28     	; 0x10a8 <digitalWrite+0x4a>
    108c:	24 30       	cpi	r18, 0x04	; 4
    108e:	28 f4       	brcc	.+10     	; 0x109a <digitalWrite+0x3c>
    1090:	21 30       	cpi	r18, 0x01	; 1
    1092:	a1 f0       	breq	.+40     	; 0x10bc <digitalWrite+0x5e>
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	11 f5       	brne	.+68     	; 0x10dc <digitalWrite+0x7e>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <digitalWrite+0x64>
    109a:	26 30       	cpi	r18, 0x06	; 6
    109c:	b1 f0       	breq	.+44     	; 0x10ca <digitalWrite+0x6c>
    109e:	27 30       	cpi	r18, 0x07	; 7
    10a0:	c1 f0       	breq	.+48     	; 0x10d2 <digitalWrite+0x74>
    10a2:	24 30       	cpi	r18, 0x04	; 4
    10a4:	d9 f4       	brne	.+54     	; 0x10dc <digitalWrite+0x7e>
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    10a8:	80 91 80 00 	lds	r24, 0x0080
    10ac:	8f 77       	andi	r24, 0x7F	; 127
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10b0:	80 91 80 00 	lds	r24, 0x0080
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	80 93 80 00 	sts	0x0080, r24
    10ba:	10 c0       	rjmp	.+32     	; 0x10dc <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10bc:	84 b5       	in	r24, 0x24	; 36
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10c2:	84 b5       	in	r24, 0x24	; 36
    10c4:	8f 7d       	andi	r24, 0xDF	; 223
    10c6:	84 bd       	out	0x24, r24	; 36
    10c8:	09 c0       	rjmp	.+18     	; 0x10dc <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10ca:	80 91 b0 00 	lds	r24, 0x00B0
    10ce:	8f 77       	andi	r24, 0x7F	; 127
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10d2:	80 91 b0 00 	lds	r24, 0x00B0
    10d6:	8f 7d       	andi	r24, 0xDF	; 223
    10d8:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    10dc:	e3 2f       	mov	r30, r19
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	e0 57       	subi	r30, 0x70	; 112
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	a5 91       	lpm	r26, Z+
    10ea:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    10ec:	2f b7       	in	r18, 0x3f	; 63
	cli();
    10ee:	f8 94       	cli

	if (val == LOW) {
    10f0:	66 23       	and	r22, r22
    10f2:	21 f4       	brne	.+8      	; 0x10fc <digitalWrite+0x9e>
		*out &= ~bit;
    10f4:	8c 91       	ld	r24, X
    10f6:	90 95       	com	r25
    10f8:	89 23       	and	r24, r25
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    10fc:	8c 91       	ld	r24, X
    10fe:	89 2b       	or	r24, r25
    1100:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1102:	2f bf       	out	0x3f, r18	; 63
    1104:	08 95       	ret

00001106 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1106:	68 2f       	mov	r22, r24
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	cb 01       	movw	r24, r22
    110c:	84 53       	subi	r24, 0x34	; 52
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	fc 01       	movw	r30, r24
    1112:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1114:	cb 01       	movw	r24, r22
    1116:	88 54       	subi	r24, 0x48	; 72
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	fc 01       	movw	r30, r24
    111c:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    111e:	6c 55       	subi	r22, 0x5C	; 92
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	fb 01       	movw	r30, r22
    1124:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    1126:	99 23       	and	r25, r25
    1128:	19 f4       	brne	.+6      	; 0x1130 <digitalRead+0x2a>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3c c0       	rjmp	.+120    	; 0x11a8 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1130:	22 23       	and	r18, r18
    1132:	51 f1       	breq	.+84     	; 0x1188 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1134:	23 30       	cpi	r18, 0x03	; 3
    1136:	71 f0       	breq	.+28     	; 0x1154 <digitalRead+0x4e>
    1138:	24 30       	cpi	r18, 0x04	; 4
    113a:	28 f4       	brcc	.+10     	; 0x1146 <digitalRead+0x40>
    113c:	21 30       	cpi	r18, 0x01	; 1
    113e:	a1 f0       	breq	.+40     	; 0x1168 <digitalRead+0x62>
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	11 f5       	brne	.+68     	; 0x1188 <digitalRead+0x82>
    1144:	14 c0       	rjmp	.+40     	; 0x116e <digitalRead+0x68>
    1146:	26 30       	cpi	r18, 0x06	; 6
    1148:	b1 f0       	breq	.+44     	; 0x1176 <digitalRead+0x70>
    114a:	27 30       	cpi	r18, 0x07	; 7
    114c:	c1 f0       	breq	.+48     	; 0x117e <digitalRead+0x78>
    114e:	24 30       	cpi	r18, 0x04	; 4
    1150:	d9 f4       	brne	.+54     	; 0x1188 <digitalRead+0x82>
    1152:	04 c0       	rjmp	.+8      	; 0x115c <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1154:	80 91 80 00 	lds	r24, 0x0080
    1158:	8f 77       	andi	r24, 0x7F	; 127
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    115c:	80 91 80 00 	lds	r24, 0x0080
    1160:	8f 7d       	andi	r24, 0xDF	; 223
    1162:	80 93 80 00 	sts	0x0080, r24
    1166:	10 c0       	rjmp	.+32     	; 0x1188 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1168:	84 b5       	in	r24, 0x24	; 36
    116a:	8f 77       	andi	r24, 0x7F	; 127
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    116e:	84 b5       	in	r24, 0x24	; 36
    1170:	8f 7d       	andi	r24, 0xDF	; 223
    1172:	84 bd       	out	0x24, r24	; 36
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1176:	80 91 b0 00 	lds	r24, 0x00B0
    117a:	8f 77       	andi	r24, 0x7F	; 127
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    117e:	80 91 b0 00 	lds	r24, 0x00B0
    1182:	8f 7d       	andi	r24, 0xDF	; 223
    1184:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    1188:	89 2f       	mov	r24, r25
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	86 56       	subi	r24, 0x66	; 102
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	fc 01       	movw	r30, r24
    1196:	a5 91       	lpm	r26, Z+
    1198:	b4 91       	lpm	r27, Z+
    119a:	8c 91       	ld	r24, X
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	84 23       	and	r24, r20
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <digitalRead+0xa2>
    11a4:	21 e0       	ldi	r18, 0x01	; 1
    11a6:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    11a8:	c9 01       	movw	r24, r18
    11aa:	08 95       	ret

000011ac <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	e8 2e       	mov	r14, r24
    11c0:	f6 2e       	mov	r15, r22
    11c2:	b4 2e       	mov	r11, r20
    11c4:	c7 e0       	ldi	r28, 0x07	; 7
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
    11c8:	02 2f       	mov	r16, r18
    11ca:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    11cc:	87 e0       	ldi	r24, 0x07	; 7
    11ce:	c8 2e       	mov	r12, r24
    11d0:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    11d2:	bb 20       	and	r11, r11
    11d4:	59 f4       	brne	.+22     	; 0x11ec <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    11d6:	b6 01       	movw	r22, r12
    11d8:	6c 1b       	sub	r22, r28
    11da:	7d 0b       	sbc	r23, r29
    11dc:	c8 01       	movw	r24, r16
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <shiftOut+0x38>
    11e0:	95 95       	asr	r25
    11e2:	87 95       	ror	r24
    11e4:	6a 95       	dec	r22
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <shiftOut+0x34>
    11e8:	bc 01       	movw	r22, r24
    11ea:	07 c0       	rjmp	.+14     	; 0x11fa <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    11ec:	b8 01       	movw	r22, r16
    11ee:	0c 2e       	mov	r0, r28
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <shiftOut+0x4a>
    11f2:	75 95       	asr	r23
    11f4:	67 95       	ror	r22
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <shiftOut+0x46>
    11fa:	61 70       	andi	r22, 0x01	; 1
    11fc:	8e 2d       	mov	r24, r14
    11fe:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    1202:	8f 2d       	mov	r24, r15
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
		digitalWrite(clockPin, LOW);		
    120a:	8f 2d       	mov	r24, r15
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	0e 94 2f 08 	call	0x105e	; 0x105e <digitalWrite>
    1212:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	cf 3f       	cpi	r28, 0xFF	; 255
    1218:	d9 07       	cpc	r29, r25
    121a:	d9 f6       	brne	.-74     	; 0x11d2 <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	08 95       	ret

00001230 <__subsf3>:
    1230:	50 58       	subi	r21, 0x80	; 128

00001232 <__addsf3>:
    1232:	bb 27       	eor	r27, r27
    1234:	aa 27       	eor	r26, r26
    1236:	0e d0       	rcall	.+28     	; 0x1254 <__addsf3x>
    1238:	78 c1       	rjmp	.+752    	; 0x152a <__fp_round>
    123a:	41 d1       	rcall	.+642    	; 0x14be <__fp_pscA>
    123c:	30 f0       	brcs	.+12     	; 0x124a <__addsf3+0x18>
    123e:	46 d1       	rcall	.+652    	; 0x14cc <__fp_pscB>
    1240:	20 f0       	brcs	.+8      	; 0x124a <__addsf3+0x18>
    1242:	31 f4       	brne	.+12     	; 0x1250 <__addsf3+0x1e>
    1244:	9f 3f       	cpi	r25, 0xFF	; 255
    1246:	11 f4       	brne	.+4      	; 0x124c <__addsf3+0x1a>
    1248:	1e f4       	brtc	.+6      	; 0x1250 <__addsf3+0x1e>
    124a:	36 c1       	rjmp	.+620    	; 0x14b8 <__fp_nan>
    124c:	0e f4       	brtc	.+2      	; 0x1250 <__addsf3+0x1e>
    124e:	e0 95       	com	r30
    1250:	e7 fb       	bst	r30, 7
    1252:	2c c1       	rjmp	.+600    	; 0x14ac <__fp_inf>

00001254 <__addsf3x>:
    1254:	e9 2f       	mov	r30, r25
    1256:	8b d1       	rcall	.+790    	; 0x156e <__fp_split3>
    1258:	80 f3       	brcs	.-32     	; 0x123a <__addsf3+0x8>
    125a:	ba 17       	cp	r27, r26
    125c:	62 07       	cpc	r22, r18
    125e:	73 07       	cpc	r23, r19
    1260:	84 07       	cpc	r24, r20
    1262:	95 07       	cpc	r25, r21
    1264:	18 f0       	brcs	.+6      	; 0x126c <__addsf3x+0x18>
    1266:	71 f4       	brne	.+28     	; 0x1284 <__addsf3x+0x30>
    1268:	9e f5       	brtc	.+102    	; 0x12d0 <__addsf3x+0x7c>
    126a:	a3 c1       	rjmp	.+838    	; 0x15b2 <__fp_zero>
    126c:	0e f4       	brtc	.+2      	; 0x1270 <__addsf3x+0x1c>
    126e:	e0 95       	com	r30
    1270:	0b 2e       	mov	r0, r27
    1272:	ba 2f       	mov	r27, r26
    1274:	a0 2d       	mov	r26, r0
    1276:	0b 01       	movw	r0, r22
    1278:	b9 01       	movw	r22, r18
    127a:	90 01       	movw	r18, r0
    127c:	0c 01       	movw	r0, r24
    127e:	ca 01       	movw	r24, r20
    1280:	a0 01       	movw	r20, r0
    1282:	11 24       	eor	r1, r1
    1284:	ff 27       	eor	r31, r31
    1286:	59 1b       	sub	r21, r25
    1288:	99 f0       	breq	.+38     	; 0x12b0 <__addsf3x+0x5c>
    128a:	59 3f       	cpi	r21, 0xF9	; 249
    128c:	50 f4       	brcc	.+20     	; 0x12a2 <__addsf3x+0x4e>
    128e:	50 3e       	cpi	r21, 0xE0	; 224
    1290:	68 f1       	brcs	.+90     	; 0x12ec <__addsf3x+0x98>
    1292:	1a 16       	cp	r1, r26
    1294:	f0 40       	sbci	r31, 0x00	; 0
    1296:	a2 2f       	mov	r26, r18
    1298:	23 2f       	mov	r18, r19
    129a:	34 2f       	mov	r19, r20
    129c:	44 27       	eor	r20, r20
    129e:	58 5f       	subi	r21, 0xF8	; 248
    12a0:	f3 cf       	rjmp	.-26     	; 0x1288 <__addsf3x+0x34>
    12a2:	46 95       	lsr	r20
    12a4:	37 95       	ror	r19
    12a6:	27 95       	ror	r18
    12a8:	a7 95       	ror	r26
    12aa:	f0 40       	sbci	r31, 0x00	; 0
    12ac:	53 95       	inc	r21
    12ae:	c9 f7       	brne	.-14     	; 0x12a2 <__addsf3x+0x4e>
    12b0:	7e f4       	brtc	.+30     	; 0x12d0 <__addsf3x+0x7c>
    12b2:	1f 16       	cp	r1, r31
    12b4:	ba 0b       	sbc	r27, r26
    12b6:	62 0b       	sbc	r22, r18
    12b8:	73 0b       	sbc	r23, r19
    12ba:	84 0b       	sbc	r24, r20
    12bc:	ba f0       	brmi	.+46     	; 0x12ec <__addsf3x+0x98>
    12be:	91 50       	subi	r25, 0x01	; 1
    12c0:	a1 f0       	breq	.+40     	; 0x12ea <__addsf3x+0x96>
    12c2:	ff 0f       	add	r31, r31
    12c4:	bb 1f       	adc	r27, r27
    12c6:	66 1f       	adc	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	88 1f       	adc	r24, r24
    12cc:	c2 f7       	brpl	.-16     	; 0x12be <__addsf3x+0x6a>
    12ce:	0e c0       	rjmp	.+28     	; 0x12ec <__addsf3x+0x98>
    12d0:	ba 0f       	add	r27, r26
    12d2:	62 1f       	adc	r22, r18
    12d4:	73 1f       	adc	r23, r19
    12d6:	84 1f       	adc	r24, r20
    12d8:	48 f4       	brcc	.+18     	; 0x12ec <__addsf3x+0x98>
    12da:	87 95       	ror	r24
    12dc:	77 95       	ror	r23
    12de:	67 95       	ror	r22
    12e0:	b7 95       	ror	r27
    12e2:	f7 95       	ror	r31
    12e4:	9e 3f       	cpi	r25, 0xFE	; 254
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__addsf3x+0x96>
    12e8:	b3 cf       	rjmp	.-154    	; 0x1250 <__addsf3+0x1e>
    12ea:	93 95       	inc	r25
    12ec:	88 0f       	add	r24, r24
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <__addsf3x+0x9e>
    12f0:	99 27       	eor	r25, r25
    12f2:	ee 0f       	add	r30, r30
    12f4:	97 95       	ror	r25
    12f6:	87 95       	ror	r24
    12f8:	08 95       	ret

000012fa <cos>:
    12fa:	f0 d0       	rcall	.+480    	; 0x14dc <__fp_rempio2>
    12fc:	e3 95       	inc	r30
    12fe:	26 c1       	rjmp	.+588    	; 0x154c <__fp_sinus>

00001300 <__divsf3>:
    1300:	0c d0       	rcall	.+24     	; 0x131a <__divsf3x>
    1302:	13 c1       	rjmp	.+550    	; 0x152a <__fp_round>
    1304:	e3 d0       	rcall	.+454    	; 0x14cc <__fp_pscB>
    1306:	40 f0       	brcs	.+16     	; 0x1318 <__divsf3+0x18>
    1308:	da d0       	rcall	.+436    	; 0x14be <__fp_pscA>
    130a:	30 f0       	brcs	.+12     	; 0x1318 <__divsf3+0x18>
    130c:	21 f4       	brne	.+8      	; 0x1316 <__divsf3+0x16>
    130e:	5f 3f       	cpi	r21, 0xFF	; 255
    1310:	19 f0       	breq	.+6      	; 0x1318 <__divsf3+0x18>
    1312:	cc c0       	rjmp	.+408    	; 0x14ac <__fp_inf>
    1314:	51 11       	cpse	r21, r1
    1316:	4e c1       	rjmp	.+668    	; 0x15b4 <__fp_szero>
    1318:	cf c0       	rjmp	.+414    	; 0x14b8 <__fp_nan>

0000131a <__divsf3x>:
    131a:	29 d1       	rcall	.+594    	; 0x156e <__fp_split3>
    131c:	98 f3       	brcs	.-26     	; 0x1304 <__divsf3+0x4>

0000131e <__divsf3_pse>:
    131e:	99 23       	and	r25, r25
    1320:	c9 f3       	breq	.-14     	; 0x1314 <__divsf3+0x14>
    1322:	55 23       	and	r21, r21
    1324:	b1 f3       	breq	.-20     	; 0x1312 <__divsf3+0x12>
    1326:	95 1b       	sub	r25, r21
    1328:	55 0b       	sbc	r21, r21
    132a:	bb 27       	eor	r27, r27
    132c:	aa 27       	eor	r26, r26
    132e:	62 17       	cp	r22, r18
    1330:	73 07       	cpc	r23, r19
    1332:	84 07       	cpc	r24, r20
    1334:	38 f0       	brcs	.+14     	; 0x1344 <__divsf3_pse+0x26>
    1336:	9f 5f       	subi	r25, 0xFF	; 255
    1338:	5f 4f       	sbci	r21, 0xFF	; 255
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	44 1f       	adc	r20, r20
    1340:	aa 1f       	adc	r26, r26
    1342:	a9 f3       	breq	.-22     	; 0x132e <__divsf3_pse+0x10>
    1344:	33 d0       	rcall	.+102    	; 0x13ac <__divsf3_pse+0x8e>
    1346:	0e 2e       	mov	r0, r30
    1348:	3a f0       	brmi	.+14     	; 0x1358 <__divsf3_pse+0x3a>
    134a:	e0 e8       	ldi	r30, 0x80	; 128
    134c:	30 d0       	rcall	.+96     	; 0x13ae <__divsf3_pse+0x90>
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	e6 95       	lsr	r30
    1354:	00 1c       	adc	r0, r0
    1356:	ca f7       	brpl	.-14     	; 0x134a <__divsf3_pse+0x2c>
    1358:	29 d0       	rcall	.+82     	; 0x13ac <__divsf3_pse+0x8e>
    135a:	fe 2f       	mov	r31, r30
    135c:	27 d0       	rcall	.+78     	; 0x13ac <__divsf3_pse+0x8e>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	88 1f       	adc	r24, r24
    1364:	bb 1f       	adc	r27, r27
    1366:	26 17       	cp	r18, r22
    1368:	37 07       	cpc	r19, r23
    136a:	48 07       	cpc	r20, r24
    136c:	ab 07       	cpc	r26, r27
    136e:	b0 e8       	ldi	r27, 0x80	; 128
    1370:	09 f0       	breq	.+2      	; 0x1374 <__divsf3_pse+0x56>
    1372:	bb 0b       	sbc	r27, r27
    1374:	80 2d       	mov	r24, r0
    1376:	bf 01       	movw	r22, r30
    1378:	ff 27       	eor	r31, r31
    137a:	93 58       	subi	r25, 0x83	; 131
    137c:	5f 4f       	sbci	r21, 0xFF	; 255
    137e:	2a f0       	brmi	.+10     	; 0x138a <__divsf3_pse+0x6c>
    1380:	9e 3f       	cpi	r25, 0xFE	; 254
    1382:	51 05       	cpc	r21, r1
    1384:	68 f0       	brcs	.+26     	; 0x13a0 <__divsf3_pse+0x82>
    1386:	92 c0       	rjmp	.+292    	; 0x14ac <__fp_inf>
    1388:	15 c1       	rjmp	.+554    	; 0x15b4 <__fp_szero>
    138a:	5f 3f       	cpi	r21, 0xFF	; 255
    138c:	ec f3       	brlt	.-6      	; 0x1388 <__divsf3_pse+0x6a>
    138e:	98 3e       	cpi	r25, 0xE8	; 232
    1390:	dc f3       	brlt	.-10     	; 0x1388 <__divsf3_pse+0x6a>
    1392:	86 95       	lsr	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	b7 95       	ror	r27
    139a:	f7 95       	ror	r31
    139c:	9f 5f       	subi	r25, 0xFF	; 255
    139e:	c9 f7       	brne	.-14     	; 0x1392 <__divsf3_pse+0x74>
    13a0:	88 0f       	add	r24, r24
    13a2:	91 1d       	adc	r25, r1
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret
    13ac:	e1 e0       	ldi	r30, 0x01	; 1
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	bb 1f       	adc	r27, r27
    13b6:	62 17       	cp	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	84 07       	cpc	r24, r20
    13bc:	ba 07       	cpc	r27, r26
    13be:	20 f0       	brcs	.+8      	; 0x13c8 <__divsf3_pse+0xaa>
    13c0:	62 1b       	sub	r22, r18
    13c2:	73 0b       	sbc	r23, r19
    13c4:	84 0b       	sbc	r24, r20
    13c6:	ba 0b       	sbc	r27, r26
    13c8:	ee 1f       	adc	r30, r30
    13ca:	88 f7       	brcc	.-30     	; 0x13ae <__divsf3_pse+0x90>
    13cc:	e0 95       	com	r30
    13ce:	08 95       	ret

000013d0 <__fixsfsi>:
    13d0:	04 d0       	rcall	.+8      	; 0x13da <__fixunssfsi>
    13d2:	68 94       	set
    13d4:	b1 11       	cpse	r27, r1
    13d6:	ee c0       	rjmp	.+476    	; 0x15b4 <__fp_szero>
    13d8:	08 95       	ret

000013da <__fixunssfsi>:
    13da:	d1 d0       	rcall	.+418    	; 0x157e <__fp_splitA>
    13dc:	88 f0       	brcs	.+34     	; 0x1400 <__fixunssfsi+0x26>
    13de:	9f 57       	subi	r25, 0x7F	; 127
    13e0:	90 f0       	brcs	.+36     	; 0x1406 <__fixunssfsi+0x2c>
    13e2:	b9 2f       	mov	r27, r25
    13e4:	99 27       	eor	r25, r25
    13e6:	b7 51       	subi	r27, 0x17	; 23
    13e8:	a0 f0       	brcs	.+40     	; 0x1412 <__fixunssfsi+0x38>
    13ea:	d1 f0       	breq	.+52     	; 0x1420 <__fixunssfsi+0x46>
    13ec:	66 0f       	add	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	1a f0       	brmi	.+6      	; 0x13fc <__fixunssfsi+0x22>
    13f6:	ba 95       	dec	r27
    13f8:	c9 f7       	brne	.-14     	; 0x13ec <__fixunssfsi+0x12>
    13fa:	12 c0       	rjmp	.+36     	; 0x1420 <__fixunssfsi+0x46>
    13fc:	b1 30       	cpi	r27, 0x01	; 1
    13fe:	81 f0       	breq	.+32     	; 0x1420 <__fixunssfsi+0x46>
    1400:	d8 d0       	rcall	.+432    	; 0x15b2 <__fp_zero>
    1402:	b1 e0       	ldi	r27, 0x01	; 1
    1404:	08 95       	ret
    1406:	d5 c0       	rjmp	.+426    	; 0x15b2 <__fp_zero>
    1408:	67 2f       	mov	r22, r23
    140a:	78 2f       	mov	r23, r24
    140c:	88 27       	eor	r24, r24
    140e:	b8 5f       	subi	r27, 0xF8	; 248
    1410:	39 f0       	breq	.+14     	; 0x1420 <__fixunssfsi+0x46>
    1412:	b9 3f       	cpi	r27, 0xF9	; 249
    1414:	cc f3       	brlt	.-14     	; 0x1408 <__fixunssfsi+0x2e>
    1416:	86 95       	lsr	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	b3 95       	inc	r27
    141e:	d9 f7       	brne	.-10     	; 0x1416 <__fixunssfsi+0x3c>
    1420:	3e f4       	brtc	.+14     	; 0x1430 <__fixunssfsi+0x56>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	08 95       	ret

00001432 <__floatunsisf>:
    1432:	e8 94       	clt
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <__floatsisf+0x12>

00001436 <__floatsisf>:
    1436:	97 fb       	bst	r25, 7
    1438:	3e f4       	brtc	.+14     	; 0x1448 <__floatsisf+0x12>
    143a:	90 95       	com	r25
    143c:	80 95       	com	r24
    143e:	70 95       	com	r23
    1440:	61 95       	neg	r22
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	99 23       	and	r25, r25
    144a:	a9 f0       	breq	.+42     	; 0x1476 <__floatsisf+0x40>
    144c:	f9 2f       	mov	r31, r25
    144e:	96 e9       	ldi	r25, 0x96	; 150
    1450:	bb 27       	eor	r27, r27
    1452:	93 95       	inc	r25
    1454:	f6 95       	lsr	r31
    1456:	87 95       	ror	r24
    1458:	77 95       	ror	r23
    145a:	67 95       	ror	r22
    145c:	b7 95       	ror	r27
    145e:	f1 11       	cpse	r31, r1
    1460:	f8 cf       	rjmp	.-16     	; 0x1452 <__floatsisf+0x1c>
    1462:	fa f4       	brpl	.+62     	; 0x14a2 <__floatsisf+0x6c>
    1464:	bb 0f       	add	r27, r27
    1466:	11 f4       	brne	.+4      	; 0x146c <__floatsisf+0x36>
    1468:	60 ff       	sbrs	r22, 0
    146a:	1b c0       	rjmp	.+54     	; 0x14a2 <__floatsisf+0x6c>
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	8f 4f       	sbci	r24, 0xFF	; 255
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	16 c0       	rjmp	.+44     	; 0x14a2 <__floatsisf+0x6c>
    1476:	88 23       	and	r24, r24
    1478:	11 f0       	breq	.+4      	; 0x147e <__floatsisf+0x48>
    147a:	96 e9       	ldi	r25, 0x96	; 150
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <__floatsisf+0x6a>
    147e:	77 23       	and	r23, r23
    1480:	21 f0       	breq	.+8      	; 0x148a <__floatsisf+0x54>
    1482:	9e e8       	ldi	r25, 0x8E	; 142
    1484:	87 2f       	mov	r24, r23
    1486:	76 2f       	mov	r23, r22
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <__floatsisf+0x5e>
    148a:	66 23       	and	r22, r22
    148c:	71 f0       	breq	.+28     	; 0x14aa <__floatsisf+0x74>
    148e:	96 e8       	ldi	r25, 0x86	; 134
    1490:	86 2f       	mov	r24, r22
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	2a f0       	brmi	.+10     	; 0x14a2 <__floatsisf+0x6c>
    1498:	9a 95       	dec	r25
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	da f7       	brpl	.-10     	; 0x1498 <__floatsisf+0x62>
    14a2:	88 0f       	add	r24, r24
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret

000014ac <__fp_inf>:
    14ac:	97 f9       	bld	r25, 7
    14ae:	9f 67       	ori	r25, 0x7F	; 127
    14b0:	80 e8       	ldi	r24, 0x80	; 128
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	08 95       	ret

000014b8 <__fp_nan>:
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	80 ec       	ldi	r24, 0xC0	; 192
    14bc:	08 95       	ret

000014be <__fp_pscA>:
    14be:	00 24       	eor	r0, r0
    14c0:	0a 94       	dec	r0
    14c2:	16 16       	cp	r1, r22
    14c4:	17 06       	cpc	r1, r23
    14c6:	18 06       	cpc	r1, r24
    14c8:	09 06       	cpc	r0, r25
    14ca:	08 95       	ret

000014cc <__fp_pscB>:
    14cc:	00 24       	eor	r0, r0
    14ce:	0a 94       	dec	r0
    14d0:	12 16       	cp	r1, r18
    14d2:	13 06       	cpc	r1, r19
    14d4:	14 06       	cpc	r1, r20
    14d6:	05 06       	cpc	r0, r21
    14d8:	08 95       	ret
    14da:	ee cf       	rjmp	.-36     	; 0x14b8 <__fp_nan>

000014dc <__fp_rempio2>:
    14dc:	50 d0       	rcall	.+160    	; 0x157e <__fp_splitA>
    14de:	e8 f3       	brcs	.-6      	; 0x14da <__fp_pscB+0xe>
    14e0:	e8 94       	clt
    14e2:	e0 e0       	ldi	r30, 0x00	; 0
    14e4:	bb 27       	eor	r27, r27
    14e6:	9f 57       	subi	r25, 0x7F	; 127
    14e8:	f0 f0       	brcs	.+60     	; 0x1526 <__fp_rempio2+0x4a>
    14ea:	2a ed       	ldi	r18, 0xDA	; 218
    14ec:	3f e0       	ldi	r19, 0x0F	; 15
    14ee:	49 ec       	ldi	r20, 0xC9	; 201
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <__fp_rempio2+0x22>
    14f2:	ee 0f       	add	r30, r30
    14f4:	bb 0f       	add	r27, r27
    14f6:	66 1f       	adc	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	28 f0       	brcs	.+10     	; 0x1508 <__fp_rempio2+0x2c>
    14fe:	b2 3a       	cpi	r27, 0xA2	; 162
    1500:	62 07       	cpc	r22, r18
    1502:	73 07       	cpc	r23, r19
    1504:	84 07       	cpc	r24, r20
    1506:	28 f0       	brcs	.+10     	; 0x1512 <__fp_rempio2+0x36>
    1508:	b2 5a       	subi	r27, 0xA2	; 162
    150a:	62 0b       	sbc	r22, r18
    150c:	73 0b       	sbc	r23, r19
    150e:	84 0b       	sbc	r24, r20
    1510:	e3 95       	inc	r30
    1512:	9a 95       	dec	r25
    1514:	72 f7       	brpl	.-36     	; 0x14f2 <__fp_rempio2+0x16>
    1516:	80 38       	cpi	r24, 0x80	; 128
    1518:	30 f4       	brcc	.+12     	; 0x1526 <__fp_rempio2+0x4a>
    151a:	9a 95       	dec	r25
    151c:	bb 0f       	add	r27, r27
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	d2 f7       	brpl	.-12     	; 0x151a <__fp_rempio2+0x3e>
    1526:	90 48       	sbci	r25, 0x80	; 128
    1528:	d8 c0       	rjmp	.+432    	; 0x16da <__fp_mpack_finite>

0000152a <__fp_round>:
    152a:	09 2e       	mov	r0, r25
    152c:	03 94       	inc	r0
    152e:	00 0c       	add	r0, r0
    1530:	11 f4       	brne	.+4      	; 0x1536 <__fp_round+0xc>
    1532:	88 23       	and	r24, r24
    1534:	52 f0       	brmi	.+20     	; 0x154a <__fp_round+0x20>
    1536:	bb 0f       	add	r27, r27
    1538:	40 f4       	brcc	.+16     	; 0x154a <__fp_round+0x20>
    153a:	bf 2b       	or	r27, r31
    153c:	11 f4       	brne	.+4      	; 0x1542 <__fp_round+0x18>
    153e:	60 ff       	sbrs	r22, 0
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__fp_round+0x20>
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	8f 4f       	sbci	r24, 0xFF	; 255
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	08 95       	ret

0000154c <__fp_sinus>:
    154c:	ef 93       	push	r30
    154e:	e0 ff       	sbrs	r30, 0
    1550:	06 c0       	rjmp	.+12     	; 0x155e <__fp_sinus+0x12>
    1552:	a2 ea       	ldi	r26, 0xA2	; 162
    1554:	2a ed       	ldi	r18, 0xDA	; 218
    1556:	3f e0       	ldi	r19, 0x0F	; 15
    1558:	49 ec       	ldi	r20, 0xC9	; 201
    155a:	5f eb       	ldi	r21, 0xBF	; 191
    155c:	7b de       	rcall	.-778    	; 0x1254 <__addsf3x>
    155e:	e5 df       	rcall	.-54     	; 0x152a <__fp_round>
    1560:	0f 90       	pop	r0
    1562:	03 94       	inc	r0
    1564:	01 fc       	sbrc	r0, 1
    1566:	90 58       	subi	r25, 0x80	; 128
    1568:	e8 e6       	ldi	r30, 0x68	; 104
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	c2 c0       	rjmp	.+388    	; 0x16f2 <__fp_powsodd>

0000156e <__fp_split3>:
    156e:	57 fd       	sbrc	r21, 7
    1570:	90 58       	subi	r25, 0x80	; 128
    1572:	44 0f       	add	r20, r20
    1574:	55 1f       	adc	r21, r21
    1576:	59 f0       	breq	.+22     	; 0x158e <__fp_splitA+0x10>
    1578:	5f 3f       	cpi	r21, 0xFF	; 255
    157a:	71 f0       	breq	.+28     	; 0x1598 <__fp_splitA+0x1a>
    157c:	47 95       	ror	r20

0000157e <__fp_splitA>:
    157e:	88 0f       	add	r24, r24
    1580:	97 fb       	bst	r25, 7
    1582:	99 1f       	adc	r25, r25
    1584:	61 f0       	breq	.+24     	; 0x159e <__fp_splitA+0x20>
    1586:	9f 3f       	cpi	r25, 0xFF	; 255
    1588:	79 f0       	breq	.+30     	; 0x15a8 <__fp_splitA+0x2a>
    158a:	87 95       	ror	r24
    158c:	08 95       	ret
    158e:	12 16       	cp	r1, r18
    1590:	13 06       	cpc	r1, r19
    1592:	14 06       	cpc	r1, r20
    1594:	55 1f       	adc	r21, r21
    1596:	f2 cf       	rjmp	.-28     	; 0x157c <__fp_split3+0xe>
    1598:	46 95       	lsr	r20
    159a:	f1 df       	rcall	.-30     	; 0x157e <__fp_splitA>
    159c:	08 c0       	rjmp	.+16     	; 0x15ae <__fp_splitA+0x30>
    159e:	16 16       	cp	r1, r22
    15a0:	17 06       	cpc	r1, r23
    15a2:	18 06       	cpc	r1, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	f1 cf       	rjmp	.-30     	; 0x158a <__fp_splitA+0xc>
    15a8:	86 95       	lsr	r24
    15aa:	71 05       	cpc	r23, r1
    15ac:	61 05       	cpc	r22, r1
    15ae:	08 94       	sec
    15b0:	08 95       	ret

000015b2 <__fp_zero>:
    15b2:	e8 94       	clt

000015b4 <__fp_szero>:
    15b4:	bb 27       	eor	r27, r27
    15b6:	66 27       	eor	r22, r22
    15b8:	77 27       	eor	r23, r23
    15ba:	cb 01       	movw	r24, r22
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__gesf2>:
    15c0:	66 d0       	rcall	.+204    	; 0x168e <__fp_cmp>
    15c2:	08 f4       	brcc	.+2      	; 0x15c6 <__gesf2+0x6>
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	08 95       	ret

000015c8 <__mulsf3>:
    15c8:	0b d0       	rcall	.+22     	; 0x15e0 <__mulsf3x>
    15ca:	af cf       	rjmp	.-162    	; 0x152a <__fp_round>
    15cc:	78 df       	rcall	.-272    	; 0x14be <__fp_pscA>
    15ce:	28 f0       	brcs	.+10     	; 0x15da <__mulsf3+0x12>
    15d0:	7d df       	rcall	.-262    	; 0x14cc <__fp_pscB>
    15d2:	18 f0       	brcs	.+6      	; 0x15da <__mulsf3+0x12>
    15d4:	95 23       	and	r25, r21
    15d6:	09 f0       	breq	.+2      	; 0x15da <__mulsf3+0x12>
    15d8:	69 cf       	rjmp	.-302    	; 0x14ac <__fp_inf>
    15da:	6e cf       	rjmp	.-292    	; 0x14b8 <__fp_nan>
    15dc:	11 24       	eor	r1, r1
    15de:	ea cf       	rjmp	.-44     	; 0x15b4 <__fp_szero>

000015e0 <__mulsf3x>:
    15e0:	c6 df       	rcall	.-116    	; 0x156e <__fp_split3>
    15e2:	a0 f3       	brcs	.-24     	; 0x15cc <__mulsf3+0x4>

000015e4 <__mulsf3_pse>:
    15e4:	95 9f       	mul	r25, r21
    15e6:	d1 f3       	breq	.-12     	; 0x15dc <__mulsf3+0x14>
    15e8:	95 0f       	add	r25, r21
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	55 1f       	adc	r21, r21
    15ee:	62 9f       	mul	r22, r18
    15f0:	f0 01       	movw	r30, r0
    15f2:	72 9f       	mul	r23, r18
    15f4:	bb 27       	eor	r27, r27
    15f6:	f0 0d       	add	r31, r0
    15f8:	b1 1d       	adc	r27, r1
    15fa:	63 9f       	mul	r22, r19
    15fc:	aa 27       	eor	r26, r26
    15fe:	f0 0d       	add	r31, r0
    1600:	b1 1d       	adc	r27, r1
    1602:	aa 1f       	adc	r26, r26
    1604:	64 9f       	mul	r22, r20
    1606:	66 27       	eor	r22, r22
    1608:	b0 0d       	add	r27, r0
    160a:	a1 1d       	adc	r26, r1
    160c:	66 1f       	adc	r22, r22
    160e:	82 9f       	mul	r24, r18
    1610:	22 27       	eor	r18, r18
    1612:	b0 0d       	add	r27, r0
    1614:	a1 1d       	adc	r26, r1
    1616:	62 1f       	adc	r22, r18
    1618:	73 9f       	mul	r23, r19
    161a:	b0 0d       	add	r27, r0
    161c:	a1 1d       	adc	r26, r1
    161e:	62 1f       	adc	r22, r18
    1620:	83 9f       	mul	r24, r19
    1622:	a0 0d       	add	r26, r0
    1624:	61 1d       	adc	r22, r1
    1626:	22 1f       	adc	r18, r18
    1628:	74 9f       	mul	r23, r20
    162a:	33 27       	eor	r19, r19
    162c:	a0 0d       	add	r26, r0
    162e:	61 1d       	adc	r22, r1
    1630:	23 1f       	adc	r18, r19
    1632:	84 9f       	mul	r24, r20
    1634:	60 0d       	add	r22, r0
    1636:	21 1d       	adc	r18, r1
    1638:	82 2f       	mov	r24, r18
    163a:	76 2f       	mov	r23, r22
    163c:	6a 2f       	mov	r22, r26
    163e:	11 24       	eor	r1, r1
    1640:	9f 57       	subi	r25, 0x7F	; 127
    1642:	50 40       	sbci	r21, 0x00	; 0
    1644:	8a f0       	brmi	.+34     	; 0x1668 <__mulsf3_pse+0x84>
    1646:	e1 f0       	breq	.+56     	; 0x1680 <__mulsf3_pse+0x9c>
    1648:	88 23       	and	r24, r24
    164a:	4a f0       	brmi	.+18     	; 0x165e <__mulsf3_pse+0x7a>
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	bb 1f       	adc	r27, r27
    1652:	66 1f       	adc	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	91 50       	subi	r25, 0x01	; 1
    165a:	50 40       	sbci	r21, 0x00	; 0
    165c:	a9 f7       	brne	.-22     	; 0x1648 <__mulsf3_pse+0x64>
    165e:	9e 3f       	cpi	r25, 0xFE	; 254
    1660:	51 05       	cpc	r21, r1
    1662:	70 f0       	brcs	.+28     	; 0x1680 <__mulsf3_pse+0x9c>
    1664:	23 cf       	rjmp	.-442    	; 0x14ac <__fp_inf>
    1666:	a6 cf       	rjmp	.-180    	; 0x15b4 <__fp_szero>
    1668:	5f 3f       	cpi	r21, 0xFF	; 255
    166a:	ec f3       	brlt	.-6      	; 0x1666 <__mulsf3_pse+0x82>
    166c:	98 3e       	cpi	r25, 0xE8	; 232
    166e:	dc f3       	brlt	.-10     	; 0x1666 <__mulsf3_pse+0x82>
    1670:	86 95       	lsr	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	f7 95       	ror	r31
    167a:	e7 95       	ror	r30
    167c:	9f 5f       	subi	r25, 0xFF	; 255
    167e:	c1 f7       	brne	.-16     	; 0x1670 <__mulsf3_pse+0x8c>
    1680:	fe 2b       	or	r31, r30
    1682:	88 0f       	add	r24, r24
    1684:	91 1d       	adc	r25, r1
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	97 f9       	bld	r25, 7
    168c:	08 95       	ret

0000168e <__fp_cmp>:
    168e:	99 0f       	add	r25, r25
    1690:	00 08       	sbc	r0, r0
    1692:	55 0f       	add	r21, r21
    1694:	aa 0b       	sbc	r26, r26
    1696:	e0 e8       	ldi	r30, 0x80	; 128
    1698:	fe ef       	ldi	r31, 0xFE	; 254
    169a:	16 16       	cp	r1, r22
    169c:	17 06       	cpc	r1, r23
    169e:	e8 07       	cpc	r30, r24
    16a0:	f9 07       	cpc	r31, r25
    16a2:	c0 f0       	brcs	.+48     	; 0x16d4 <__fp_cmp+0x46>
    16a4:	12 16       	cp	r1, r18
    16a6:	13 06       	cpc	r1, r19
    16a8:	e4 07       	cpc	r30, r20
    16aa:	f5 07       	cpc	r31, r21
    16ac:	98 f0       	brcs	.+38     	; 0x16d4 <__fp_cmp+0x46>
    16ae:	62 1b       	sub	r22, r18
    16b0:	73 0b       	sbc	r23, r19
    16b2:	84 0b       	sbc	r24, r20
    16b4:	95 0b       	sbc	r25, r21
    16b6:	39 f4       	brne	.+14     	; 0x16c6 <__fp_cmp+0x38>
    16b8:	0a 26       	eor	r0, r26
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <__fp_cmp+0x46>
    16bc:	23 2b       	or	r18, r19
    16be:	24 2b       	or	r18, r20
    16c0:	25 2b       	or	r18, r21
    16c2:	21 f4       	brne	.+8      	; 0x16cc <__fp_cmp+0x3e>
    16c4:	08 95       	ret
    16c6:	0a 26       	eor	r0, r26
    16c8:	09 f4       	brne	.+2      	; 0x16cc <__fp_cmp+0x3e>
    16ca:	a1 40       	sbci	r26, 0x01	; 1
    16cc:	a6 95       	lsr	r26
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	81 1d       	adc	r24, r1
    16d2:	81 1d       	adc	r24, r1
    16d4:	08 95       	ret

000016d6 <__fp_mpack>:
    16d6:	9f 3f       	cpi	r25, 0xFF	; 255
    16d8:	31 f0       	breq	.+12     	; 0x16e6 <__fp_mpack_finite+0xc>

000016da <__fp_mpack_finite>:
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	20 f4       	brcc	.+8      	; 0x16e6 <__fp_mpack_finite+0xc>
    16de:	87 95       	ror	r24
    16e0:	77 95       	ror	r23
    16e2:	67 95       	ror	r22
    16e4:	b7 95       	ror	r27
    16e6:	88 0f       	add	r24, r24
    16e8:	91 1d       	adc	r25, r1
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret

000016f2 <__fp_powsodd>:
    16f2:	9f 93       	push	r25
    16f4:	8f 93       	push	r24
    16f6:	7f 93       	push	r23
    16f8:	6f 93       	push	r22
    16fa:	ff 93       	push	r31
    16fc:	ef 93       	push	r30
    16fe:	9b 01       	movw	r18, r22
    1700:	ac 01       	movw	r20, r24
    1702:	62 df       	rcall	.-316    	; 0x15c8 <__mulsf3>
    1704:	ef 91       	pop	r30
    1706:	ff 91       	pop	r31
    1708:	05 d0       	rcall	.+10     	; 0x1714 <__fp_powser>
    170a:	2f 91       	pop	r18
    170c:	3f 91       	pop	r19
    170e:	4f 91       	pop	r20
    1710:	5f 91       	pop	r21
    1712:	5a cf       	rjmp	.-332    	; 0x15c8 <__mulsf3>

00001714 <__fp_powser>:
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	1f 93       	push	r17
    171a:	0f 93       	push	r16
    171c:	ff 92       	push	r15
    171e:	ef 92       	push	r14
    1720:	df 92       	push	r13
    1722:	7b 01       	movw	r14, r22
    1724:	8c 01       	movw	r16, r24
    1726:	68 94       	set
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <__fp_powser+0x20>
    172a:	da 2e       	mov	r13, r26
    172c:	ef 01       	movw	r28, r30
    172e:	58 df       	rcall	.-336    	; 0x15e0 <__mulsf3x>
    1730:	fe 01       	movw	r30, r28
    1732:	e8 94       	clt
    1734:	a5 91       	lpm	r26, Z+
    1736:	25 91       	lpm	r18, Z+
    1738:	35 91       	lpm	r19, Z+
    173a:	45 91       	lpm	r20, Z+
    173c:	55 91       	lpm	r21, Z+
    173e:	ae f3       	brts	.-22     	; 0x172a <__fp_powser+0x16>
    1740:	ef 01       	movw	r28, r30
    1742:	88 dd       	rcall	.-1264   	; 0x1254 <__addsf3x>
    1744:	fe 01       	movw	r30, r28
    1746:	97 01       	movw	r18, r14
    1748:	a8 01       	movw	r20, r16
    174a:	da 94       	dec	r13
    174c:	79 f7       	brne	.-34     	; 0x172c <__fp_powser+0x18>
    174e:	df 90       	pop	r13
    1750:	ef 90       	pop	r14
    1752:	ff 90       	pop	r15
    1754:	0f 91       	pop	r16
    1756:	1f 91       	pop	r17
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <__mulsi3>:
    175e:	62 9f       	mul	r22, r18
    1760:	d0 01       	movw	r26, r0
    1762:	73 9f       	mul	r23, r19
    1764:	f0 01       	movw	r30, r0
    1766:	82 9f       	mul	r24, r18
    1768:	e0 0d       	add	r30, r0
    176a:	f1 1d       	adc	r31, r1
    176c:	64 9f       	mul	r22, r20
    176e:	e0 0d       	add	r30, r0
    1770:	f1 1d       	adc	r31, r1
    1772:	92 9f       	mul	r25, r18
    1774:	f0 0d       	add	r31, r0
    1776:	83 9f       	mul	r24, r19
    1778:	f0 0d       	add	r31, r0
    177a:	74 9f       	mul	r23, r20
    177c:	f0 0d       	add	r31, r0
    177e:	65 9f       	mul	r22, r21
    1780:	f0 0d       	add	r31, r0
    1782:	99 27       	eor	r25, r25
    1784:	72 9f       	mul	r23, r18
    1786:	b0 0d       	add	r27, r0
    1788:	e1 1d       	adc	r30, r1
    178a:	f9 1f       	adc	r31, r25
    178c:	63 9f       	mul	r22, r19
    178e:	b0 0d       	add	r27, r0
    1790:	e1 1d       	adc	r30, r1
    1792:	f9 1f       	adc	r31, r25
    1794:	bd 01       	movw	r22, r26
    1796:	cf 01       	movw	r24, r30
    1798:	11 24       	eor	r1, r1
    179a:	08 95       	ret

0000179c <__udivmodsi4>:
    179c:	a1 e2       	ldi	r26, 0x21	; 33
    179e:	1a 2e       	mov	r1, r26
    17a0:	aa 1b       	sub	r26, r26
    17a2:	bb 1b       	sub	r27, r27
    17a4:	fd 01       	movw	r30, r26
    17a6:	0d c0       	rjmp	.+26     	; 0x17c2 <__udivmodsi4_ep>

000017a8 <__udivmodsi4_loop>:
    17a8:	aa 1f       	adc	r26, r26
    17aa:	bb 1f       	adc	r27, r27
    17ac:	ee 1f       	adc	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	a2 17       	cp	r26, r18
    17b2:	b3 07       	cpc	r27, r19
    17b4:	e4 07       	cpc	r30, r20
    17b6:	f5 07       	cpc	r31, r21
    17b8:	20 f0       	brcs	.+8      	; 0x17c2 <__udivmodsi4_ep>
    17ba:	a2 1b       	sub	r26, r18
    17bc:	b3 0b       	sbc	r27, r19
    17be:	e4 0b       	sbc	r30, r20
    17c0:	f5 0b       	sbc	r31, r21

000017c2 <__udivmodsi4_ep>:
    17c2:	66 1f       	adc	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	1a 94       	dec	r1
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <__udivmodsi4_loop>
    17ce:	60 95       	com	r22
    17d0:	70 95       	com	r23
    17d2:	80 95       	com	r24
    17d4:	90 95       	com	r25
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	bd 01       	movw	r22, r26
    17dc:	cf 01       	movw	r24, r30
    17de:	08 95       	ret

000017e0 <__divmodsi4>:
    17e0:	97 fb       	bst	r25, 7
    17e2:	09 2e       	mov	r0, r25
    17e4:	05 26       	eor	r0, r21
    17e6:	0e d0       	rcall	.+28     	; 0x1804 <__divmodsi4_neg1>
    17e8:	57 fd       	sbrc	r21, 7
    17ea:	04 d0       	rcall	.+8      	; 0x17f4 <__divmodsi4_neg2>
    17ec:	d7 df       	rcall	.-82     	; 0x179c <__udivmodsi4>
    17ee:	0a d0       	rcall	.+20     	; 0x1804 <__divmodsi4_neg1>
    17f0:	00 1c       	adc	r0, r0
    17f2:	38 f4       	brcc	.+14     	; 0x1802 <__divmodsi4_exit>

000017f4 <__divmodsi4_neg2>:
    17f4:	50 95       	com	r21
    17f6:	40 95       	com	r20
    17f8:	30 95       	com	r19
    17fa:	21 95       	neg	r18
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	4f 4f       	sbci	r20, 0xFF	; 255
    1800:	5f 4f       	sbci	r21, 0xFF	; 255

00001802 <__divmodsi4_exit>:
    1802:	08 95       	ret

00001804 <__divmodsi4_neg1>:
    1804:	f6 f7       	brtc	.-4      	; 0x1802 <__divmodsi4_exit>
    1806:	90 95       	com	r25
    1808:	80 95       	com	r24
    180a:	70 95       	com	r23
    180c:	61 95       	neg	r22
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	8f 4f       	sbci	r24, 0xFF	; 255
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	08 95       	ret

00001816 <__tablejump2__>:
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31

0000181a <__tablejump__>:
    181a:	05 90       	lpm	r0, Z+
    181c:	f4 91       	lpm	r31, Z+
    181e:	e0 2d       	mov	r30, r0
    1820:	09 94       	ijmp

00001822 <_exit>:
    1822:	f8 94       	cli

00001824 <__stop_program>:
    1824:	ff cf       	rjmp	.-2      	; 0x1824 <__stop_program>
