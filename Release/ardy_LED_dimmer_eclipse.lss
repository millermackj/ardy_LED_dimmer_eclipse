
ardy_LED_dimmer_eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  000019a4  00001a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  0080018a  0080018a  00001ac2  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000928  00000000  00000000  0000459c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000238  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000056b  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021bf  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1c  00000000  00000000  00007826  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bb8  00000000  00000000  00008342  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  00009efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c20  00000000  00000000  0000a24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012c4  00000000  00000000  0000ae6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f0  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    }
}

int LedControl::getDeviceCount() {
    return maxDevices;
}
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_16>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <_Z12init_impulsePiii+0xb0>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <port_to_mode_PGM>:
      86:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000090 <port_to_output_PGM>:
      90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_input_PGM>:
      9a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000a4 <digital_pin_to_port_PGM>:
      a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b4:	03 03 03 03                                         ....

000000b8 <digital_pin_to_bit_mask_PGM>:
      b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c8:	04 08 10 20                                         ... 

000000cc <digital_pin_to_timer_PGM>:
      cc:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      dc:	00 00 00 00                                         ....

000000e0 <__ctors_start>:
      e0:	9b 00       	.word	0x009b	; ????

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d8 e0       	ldi	r29, 0x08	; 8
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e4 ea       	ldi	r30, 0xA4	; 164
      f6:	f9 e1       	ldi	r31, 0x19	; 25
      f8:	02 c0       	rjmp	.+4      	; 0xfe <.do_copy_data_start>

000000fa <.do_copy_data_loop>:
      fa:	05 90       	lpm	r0, Z+
      fc:	0d 92       	st	X+, r0

000000fe <.do_copy_data_start>:
      fe:	aa 38       	cpi	r26, 0x8A	; 138
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <.do_copy_data_loop>

00000104 <__do_clear_bss>:
     104:	13 e0       	ldi	r17, 0x03	; 3
     106:	aa e8       	ldi	r26, 0x8A	; 138
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	a5 30       	cpi	r26, 0x05	; 5
     110:	b1 07       	cpc	r27, r17
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>

00000114 <__do_global_ctors>:
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	c2 ee       	ldi	r28, 0xE2	; 226
     118:	d0 e0       	ldi	r29, 0x00	; 0
     11a:	04 c0       	rjmp	.+8      	; 0x124 <.do_global_ctors_start>

0000011c <.do_global_ctors_loop>:
     11c:	22 97       	sbiw	r28, 0x02	; 2
     11e:	fe 01       	movw	r30, r28
     120:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__tablejump__>

00000124 <.do_global_ctors_start>:
     124:	c0 3e       	cpi	r28, 0xE0	; 224
     126:	d1 07       	cpc	r29, r17
     128:	c9 f7       	brne	.-14     	; 0x11c <.do_global_ctors_loop>
     12a:	0e 94 7f 07 	call	0xefe	; 0xefe <main>
     12e:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_GLOBAL__I_dimmer_cts>:
  	update_display_clock = current_time + update_display_period;
//    showLED((long int)pulser.pulse_up_period * 1000, 4);
//    showLED((long int)dimmer_pct * 1000, 4);

  }
}
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
pulser_struct pulser;
int hold_display = 0;

double alpha = .05;
// instantiate LED Display controller -- the 4th argument is the number of displays
LedControl ledDisplay = LedControl(LED_DATA_PIN, LED_CLOCK_PIN, LED_CSLOAD_PIN, 1);
     13a:	86 e8       	ldi	r24, 0x86	; 134
     13c:	92 e0       	ldi	r25, 0x02	; 2
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	42 e0       	ldi	r20, 0x02	; 2
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	24 e0       	ldi	r18, 0x04	; 4
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	01 e0       	ldi	r16, 0x01	; 1
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN10LedControlC1Eiiii>
  	update_display_clock = current_time + update_display_period;
//    showLED((long int)pulser.pulse_up_period * 1000, 4);
//    showLED((long int)dimmer_pct * 1000, 4);

  }
}
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	08 95       	ret

00000158 <_Z7showLEDli>:
	ledDisplay.setIntensity(0, 12);
	ledDisplay.clearDisplay(0);
}

// method that takes a number in millis and displays it to the hundredth on LED display
void showLED(long dispNumMill, int sigfigs) {
     158:	4f 92       	push	r4
     15a:	5f 92       	push	r5
     15c:	6f 92       	push	r6
     15e:	7f 92       	push	r7
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	28 97       	sbiw	r28, 0x08	; 8
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	4b 01       	movw	r8, r22
     18a:	5c 01       	movw	r10, r24
     18c:	2a 01       	movw	r4, r20
	// flag for negative value -- light up last decimal if negative
	bool neg = (dispNumMill < 0);

	int decipoint = 2; // decimal point after third digit from right by default

	dispNumMill = abs(dispNumMill);
     18e:	7b 01       	movw	r14, r22
     190:	8c 01       	movw	r16, r24
     192:	97 ff       	sbrs	r25, 7
     194:	07 c0       	rjmp	.+14     	; 0x1a4 <_Z7showLEDli+0x4c>
     196:	ee 24       	eor	r14, r14
     198:	ff 24       	eor	r15, r15
     19a:	87 01       	movw	r16, r14
     19c:	e6 1a       	sub	r14, r22
     19e:	f7 0a       	sbc	r15, r23
     1a0:	08 0b       	sbc	r16, r24
     1a2:	19 0b       	sbc	r17, r25

	if (dispNumMill >= 100000) { // if number is bigger than a hundred, move decimal to right.
     1a4:	80 ea       	ldi	r24, 0xA0	; 160
     1a6:	e8 16       	cp	r14, r24
     1a8:	86 e8       	ldi	r24, 0x86	; 134
     1aa:	f8 06       	cpc	r15, r24
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	08 07       	cpc	r16, r24
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	18 07       	cpc	r17, r24
     1b4:	24 f4       	brge	.+8      	; 0x1be <_Z7showLEDli+0x66>
     1b6:	22 e0       	ldi	r18, 0x02	; 2
     1b8:	62 2e       	mov	r6, r18
     1ba:	71 2c       	mov	r7, r1
     1bc:	28 c0       	rjmp	.+80     	; 0x20e <_Z7showLEDli+0xb6>
		decipoint = 1;
		dispNumMill = dispNumMill / 10;
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	2a e0       	ldi	r18, 0x0A	; 10
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     1ce:	c9 01       	movw	r24, r18
     1d0:	da 01       	movw	r26, r20
     1d2:	7c 01       	movw	r14, r24
     1d4:	8d 01       	movw	r16, r26
	}

	if (dispNumMill >= 100000) { // if number is still bigger than a hundred, move decimal to right.
     1d6:	90 ea       	ldi	r25, 0xA0	; 160
     1d8:	e9 16       	cp	r14, r25
     1da:	96 e8       	ldi	r25, 0x86	; 134
     1dc:	f9 06       	cpc	r15, r25
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	09 07       	cpc	r16, r25
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	19 07       	cpc	r17, r25
     1e6:	24 f4       	brge	.+8      	; 0x1f0 <_Z7showLEDli+0x98>
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	69 2e       	mov	r6, r25
     1ec:	71 2c       	mov	r7, r1
     1ee:	0f c0       	rjmp	.+30     	; 0x20e <_Z7showLEDli+0xb6>
		decipoint = -1;
		dispNumMill = dispNumMill / 10;
     1f0:	c8 01       	movw	r24, r16
     1f2:	b7 01       	movw	r22, r14
     1f4:	2a e0       	ldi	r18, 0x0A	; 10
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     200:	c9 01       	movw	r24, r18
     202:	da 01       	movw	r26, r20
     204:	7c 01       	movw	r14, r24
     206:	8d 01       	movw	r16, r26
     208:	66 24       	eor	r6, r6
     20a:	6a 94       	dec	r6
     20c:	76 2c       	mov	r7, r6
	}

	int remainder = dispNumMill % 10;
     20e:	c8 01       	movw	r24, r16
     210:	b7 01       	movw	r22, r14
     212:	2a e0       	ldi	r18, 0x0A	; 10
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
	// do some rounding if necessary

	if (remainder >= 5)
     21e:	65 30       	cpi	r22, 0x05	; 5
     220:	71 05       	cpc	r23, r1
     222:	8c f0       	brlt	.+34     	; 0x246 <_Z7showLEDli+0xee>
		dispNumMill = dispNumMill - remainder + 10;
     224:	8a e0       	ldi	r24, 0x0A	; 10
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	e8 0e       	add	r14, r24
     22e:	f9 1e       	adc	r15, r25
     230:	0a 1f       	adc	r16, r26
     232:	1b 1f       	adc	r17, r27
     234:	cb 01       	movw	r24, r22
     236:	aa 27       	eor	r26, r26
     238:	97 fd       	sbrc	r25, 7
     23a:	a0 95       	com	r26
     23c:	ba 2f       	mov	r27, r26
     23e:	e8 1a       	sub	r14, r24
     240:	f9 0a       	sbc	r15, r25
     242:	0a 0b       	sbc	r16, r26
     244:	1b 0b       	sbc	r17, r27

	int dig[4]; // array to store display digits

	// determine digit values by extracting them from dispNumMill

	dig[3] = (dispNumMill % 100000) / 10000;
     246:	c8 01       	movw	r24, r16
     248:	b7 01       	movw	r22, r14
     24a:	20 ea       	ldi	r18, 0xA0	; 160
     24c:	36 e8       	ldi	r19, 0x86	; 134
     24e:	41 e0       	ldi	r20, 0x01	; 1
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     256:	20 e1       	ldi	r18, 0x10	; 16
     258:	37 e2       	ldi	r19, 0x27	; 39
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     262:	38 87       	std	Y+8, r19	; 0x08
     264:	2f 83       	std	Y+7, r18	; 0x07
	dig[2] = (dispNumMill % 10000) / 1000;
     266:	c8 01       	movw	r24, r16
     268:	b7 01       	movw	r22, r14
     26a:	20 e1       	ldi	r18, 0x10	; 16
     26c:	37 e2       	ldi	r19, 0x27	; 39
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     276:	28 ee       	ldi	r18, 0xE8	; 232
     278:	33 e0       	ldi	r19, 0x03	; 3
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     282:	3e 83       	std	Y+6, r19	; 0x06
     284:	2d 83       	std	Y+5, r18	; 0x05
	dig[1] = (dispNumMill % 1000) / 100;
     286:	c8 01       	movw	r24, r16
     288:	b7 01       	movw	r22, r14
     28a:	28 ee       	ldi	r18, 0xE8	; 232
     28c:	33 e0       	ldi	r19, 0x03	; 3
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     296:	24 e6       	ldi	r18, 0x64	; 100
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     2a2:	3c 83       	std	Y+4, r19	; 0x04
     2a4:	2b 83       	std	Y+3, r18	; 0x03
	dig[0] = (dispNumMill % 100) / 10;
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	24 e6       	ldi	r18, 0x64	; 100
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     2b6:	2a e0       	ldi	r18, 0x0A	; 10
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     2c2:	3a 83       	std	Y+2, r19	; 0x02
     2c4:	29 83       	std	Y+1, r18	; 0x01
     2c6:	6e 01       	movw	r12, r28
     2c8:	08 94       	sec
     2ca:	c1 1c       	adc	r12, r1
     2cc:	d1 1c       	adc	r13, r1
     2ce:	f6 01       	movw	r30, r12
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < 4 - sigfigs; i++) {
     2d4:	84 e0       	ldi	r24, 0x04	; 4
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	84 19       	sub	r24, r4
     2da:	95 09       	sbc	r25, r5
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <_Z7showLEDli+0x18e>
		dig[i] = 0;
     2de:	11 92       	st	Z+, r1
     2e0:	11 92       	st	Z+, r1
	dig[3] = (dispNumMill % 100000) / 10000;
	dig[2] = (dispNumMill % 10000) / 1000;
	dig[1] = (dispNumMill % 1000) / 100;
	dig[0] = (dispNumMill % 100) / 10;

	for (int i = 0; i < 4 - sigfigs; i++) {
     2e2:	2f 5f       	subi	r18, 0xFF	; 255
     2e4:	3f 4f       	sbci	r19, 0xFF	; 255
     2e6:	28 17       	cp	r18, r24
     2e8:	39 07       	cpc	r19, r25
     2ea:	cc f3       	brlt	.-14     	; 0x2de <_Z7showLEDli+0x186>
     2ec:	ee 24       	eor	r14, r14
     2ee:	ff 24       	eor	r15, r15
		dig[i] = 0;
	}

	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
     2f0:	88 24       	eor	r8, r8
     2f2:	b7 fc       	sbrc	r11, 7
     2f4:	83 94       	inc	r8
     2f6:	99 24       	eor	r9, r9
     2f8:	aa 24       	eor	r10, r10
     2fa:	bb 24       	eor	r11, r11
     2fc:	18 2d       	mov	r17, r8
     2fe:	d6 01       	movw	r26, r12
     300:	2c 91       	ld	r18, X
     302:	e6 14       	cp	r14, r6
     304:	f7 04       	cpc	r15, r7
     306:	11 f4       	brne	.+4      	; 0x30c <_Z7showLEDli+0x1b4>
     308:	01 e0       	ldi	r16, 0x01	; 1
     30a:	06 c0       	rjmp	.+12     	; 0x318 <_Z7showLEDli+0x1c0>
     30c:	e1 14       	cp	r14, r1
     30e:	f1 04       	cpc	r15, r1
     310:	11 f0       	breq	.+4      	; 0x316 <_Z7showLEDli+0x1be>
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	01 c0       	rjmp	.+2      	; 0x318 <_Z7showLEDli+0x1c0>
     316:	01 2f       	mov	r16, r17
     318:	86 e8       	ldi	r24, 0x86	; 134
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	a7 01       	movw	r20, r14
     322:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN10LedControl8setDigitEiihh>

	for (int i = 0; i < 4 - sigfigs; i++) {
		dig[i] = 0;
	}

	for (int i = 0; i < 4; i++) { // send digits to the display; light up rightmost DP if number is negative
     326:	08 94       	sec
     328:	e1 1c       	adc	r14, r1
     32a:	f1 1c       	adc	r15, r1
     32c:	e2 e0       	ldi	r30, 0x02	; 2
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ce 0e       	add	r12, r30
     332:	df 1e       	adc	r13, r31
     334:	f4 e0       	ldi	r31, 0x04	; 4
     336:	ef 16       	cp	r14, r31
     338:	f1 04       	cpc	r15, r1
     33a:	09 f7       	brne	.-62     	; 0x2fe <_Z7showLEDli+0x1a6>
		ledDisplay.setDigit(0, i, dig[i], (i == decipoint || (i == 0 && neg))); // set decimal point
	}
}
     33c:	28 96       	adiw	r28, 0x08	; 8
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <loop>:

void loop() {
     36a:	6f 92       	push	r6
     36c:	7f 92       	push	r7
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
	long unsigned int current_time = millis();
     382:	0e 94 d6 07 	call	0xfac	; 0xfac <millis>
     386:	3b 01       	movw	r6, r22
     388:	4c 01       	movw	r8, r24
  if(current_time >= sample_clock){
     38a:	80 91 98 01 	lds	r24, 0x0198
     38e:	90 91 99 01 	lds	r25, 0x0199
     392:	a0 91 9a 01 	lds	r26, 0x019A
     396:	b0 91 9b 01 	lds	r27, 0x019B
     39a:	68 16       	cp	r6, r24
     39c:	79 06       	cpc	r7, r25
     39e:	8a 06       	cpc	r8, r26
     3a0:	9b 06       	cpc	r9, r27
     3a2:	08 f4       	brcc	.+2      	; 0x3a6 <loop+0x3c>
     3a4:	f0 c1       	rjmp	.+992    	; 0x786 <loop+0x41c>
  	sample_clock += SAMPLE_PERIOD;
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	a1 1d       	adc	r26, r1
     3aa:	b1 1d       	adc	r27, r1
     3ac:	80 93 98 01 	sts	0x0198, r24
     3b0:	90 93 99 01 	sts	0x0199, r25
     3b4:	a0 93 9a 01 	sts	0x019A, r26
     3b8:	b0 93 9b 01 	sts	0x019B, r27
    dimmer_cts = alpha*analogRead(POT_PIN) + (1.0-alpha)*dimmer_cts;
     3bc:	e0 90 04 01 	lds	r14, 0x0104
     3c0:	f0 90 05 01 	lds	r15, 0x0105
     3c4:	00 91 06 01 	lds	r16, 0x0106
     3c8:	10 91 07 01 	lds	r17, 0x0107
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 1f 08 	call	0x103e	; 0x103e <analogRead>
     3d2:	aa 27       	eor	r26, r26
     3d4:	97 fd       	sbrc	r25, 7
     3d6:	a0 95       	com	r26
     3d8:	ba 2f       	mov	r27, r26
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__floatsisf>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	c8 01       	movw	r24, r16
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     3ee:	7b 01       	movw	r14, r22
     3f0:	8c 01       	movw	r16, r24
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e8       	ldi	r24, 0x80	; 128
     3f8:	9f e3       	ldi	r25, 0x3F	; 63
     3fa:	20 91 04 01 	lds	r18, 0x0104
     3fe:	30 91 05 01 	lds	r19, 0x0105
     402:	40 91 06 01 	lds	r20, 0x0106
     406:	50 91 07 01 	lds	r21, 0x0107
     40a:	0e 94 b0 09 	call	0x1360	; 0x1360 <__subsf3>
     40e:	20 91 8a 01 	lds	r18, 0x018A
     412:	30 91 8b 01 	lds	r19, 0x018B
     416:	40 91 8c 01 	lds	r20, 0x018C
     41a:	50 91 8d 01 	lds	r21, 0x018D
     41e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	c8 01       	movw	r24, r16
     428:	b7 01       	movw	r22, r14
     42a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__addsf3>
     42e:	7b 01       	movw	r14, r22
     430:	8c 01       	movw	r16, r24
     432:	60 93 8a 01 	sts	0x018A, r22
     436:	70 93 8b 01 	sts	0x018B, r23
     43a:	80 93 8c 01 	sts	0x018C, r24
     43e:	90 93 8d 01 	sts	0x018D, r25
    dimmer_pct = map(round(dimmer_cts), 0 , 873, 0, 100);
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__gesf2>
     44e:	88 23       	and	r24, r24
     450:	4c f0       	brlt	.+18     	; 0x464 <loop+0xfa>
     452:	c8 01       	movw	r24, r16
     454:	b7 01       	movw	r22, r14
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	5f e3       	ldi	r21, 0x3F	; 63
     45e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__addsf3>
     462:	08 c0       	rjmp	.+16     	; 0x474 <loop+0x10a>
     464:	c8 01       	movw	r24, r16
     466:	b7 01       	movw	r22, r14
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	5f e3       	ldi	r21, 0x3F	; 63
     470:	0e 94 b0 09 	call	0x1360	; 0x1360 <__subsf3>
     474:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixsfsi>
     478:	9b 01       	movw	r18, r22
     47a:	ac 01       	movw	r20, r24
     47c:	00 d0       	rcall	.+0      	; 0x47e <loop+0x114>
     47e:	00 d0       	rcall	.+0      	; 0x480 <loop+0x116>
     480:	84 e6       	ldi	r24, 0x64	; 100
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	ed b7       	in	r30, 0x3d	; 61
     48a:	fe b7       	in	r31, 0x3e	; 62
     48c:	81 83       	std	Z+1, r24	; 0x01
     48e:	92 83       	std	Z+2, r25	; 0x02
     490:	a3 83       	std	Z+3, r26	; 0x03
     492:	b4 83       	std	Z+4, r27	; 0x04
     494:	ca 01       	movw	r24, r20
     496:	b9 01       	movw	r22, r18
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	f9 e6       	ldi	r31, 0x69	; 105
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	ff 2e       	mov	r15, r31
     4a8:	01 2d       	mov	r16, r1
     4aa:	11 2d       	mov	r17, r1
     4ac:	aa 24       	eor	r10, r10
     4ae:	bb 24       	eor	r11, r11
     4b0:	65 01       	movw	r12, r10
     4b2:	0e 94 36 07 	call	0xe6c	; 0xe6c <_Z3maplllll>
     4b6:	70 93 8f 01 	sts	0x018F, r23
     4ba:	60 93 8e 01 	sts	0x018E, r22
//  	pulser.pulse_up_period = (int)map(round(dimmer_cts), 0 , 873, 0, (long int)pulser.carrier_period);
    analogWrite(LED_PWM_PIN, map(round(dimmer_cts), 0, 873, 0, 255));
     4be:	e0 90 8a 01 	lds	r14, 0x018A
     4c2:	f0 90 8b 01 	lds	r15, 0x018B
     4c6:	00 91 8c 01 	lds	r16, 0x018C
     4ca:	10 91 8d 01 	lds	r17, 0x018D
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	c8 01       	movw	r24, r16
     4d8:	b7 01       	movw	r22, r14
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__gesf2>
     4e6:	88 23       	and	r24, r24
     4e8:	4c f0       	brlt	.+18     	; 0x4fc <loop+0x192>
     4ea:	c8 01       	movw	r24, r16
     4ec:	b7 01       	movw	r22, r14
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	5f e3       	ldi	r21, 0x3F	; 63
     4f6:	0e 94 b1 09 	call	0x1362	; 0x1362 <__addsf3>
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <loop+0x1a2>
     4fc:	c8 01       	movw	r24, r16
     4fe:	b7 01       	movw	r22, r14
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	5f e3       	ldi	r21, 0x3F	; 63
     508:	0e 94 b0 09 	call	0x1360	; 0x1360 <__subsf3>
     50c:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixsfsi>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	00 d0       	rcall	.+0      	; 0x516 <loop+0x1ac>
     516:	00 d0       	rcall	.+0      	; 0x518 <loop+0x1ae>
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	81 83       	std	Z+1, r24	; 0x01
     526:	92 83       	std	Z+2, r25	; 0x02
     528:	a3 83       	std	Z+3, r26	; 0x03
     52a:	b4 83       	std	Z+4, r27	; 0x04
     52c:	ca 01       	movw	r24, r20
     52e:	b9 01       	movw	r22, r18
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	e9 e6       	ldi	r30, 0x69	; 105
     53a:	ee 2e       	mov	r14, r30
     53c:	e3 e0       	ldi	r30, 0x03	; 3
     53e:	fe 2e       	mov	r15, r30
     540:	01 2d       	mov	r16, r1
     542:	11 2d       	mov	r17, r1
     544:	aa 24       	eor	r10, r10
     546:	bb 24       	eor	r11, r11
     548:	65 01       	movw	r12, r10
     54a:	0e 94 36 07 	call	0xe6c	; 0xe6c <_Z3maplllll>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	8b e0       	ldi	r24, 0x0B	; 11
     55c:	b9 01       	movw	r22, r18
     55e:	0e 94 41 08 	call	0x1082	; 0x1082 <analogWrite>
    if(current_time >= pulser.carrier_clock){
     562:	80 91 72 02 	lds	r24, 0x0272
     566:	90 91 73 02 	lds	r25, 0x0273
     56a:	a0 91 74 02 	lds	r26, 0x0274
     56e:	b0 91 75 02 	lds	r27, 0x0275
     572:	68 16       	cp	r6, r24
     574:	79 06       	cpc	r7, r25
     576:	8a 06       	cpc	r8, r26
     578:	9b 06       	cpc	r9, r27
     57a:	08 f4       	brcc	.+2      	; 0x57e <loop+0x214>
     57c:	4e c0       	rjmp	.+156    	; 0x61a <loop+0x2b0>
    	pulser.pulse_down_period = pulser.carrier_period - pulser.pulse_up_period;
     57e:	00 91 68 02 	lds	r16, 0x0268
     582:	10 91 69 02 	lds	r17, 0x0269
     586:	80 91 6a 02 	lds	r24, 0x026A
     58a:	90 91 6b 02 	lds	r25, 0x026B
     58e:	f8 01       	movw	r30, r16
     590:	e8 1b       	sub	r30, r24
     592:	f9 0b       	sbc	r31, r25
     594:	f0 93 6d 02 	sts	0x026D, r31
     598:	e0 93 6c 02 	sts	0x026C, r30
      pulser.step_period_up = pulser.pulse_up_period / impulse_num_samples;
     59c:	64 e6       	ldi	r22, 0x64	; 100
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__divmodhi4>
     5a4:	70 93 6f 02 	sts	0x026F, r23
     5a8:	60 93 6e 02 	sts	0x026E, r22
      pulser.step_period_down = pulser.pulse_down_period / impulse_num_samples;
     5ac:	cf 01       	movw	r24, r30
     5ae:	64 e6       	ldi	r22, 0x64	; 100
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__divmodhi4>
     5b6:	70 93 71 02 	sts	0x0271, r23
     5ba:	60 93 70 02 	sts	0x0270, r22
      pulser.carrier_clock = current_time + pulser.carrier_period;
     5be:	22 27       	eor	r18, r18
     5c0:	17 fd       	sbrc	r17, 7
     5c2:	20 95       	com	r18
     5c4:	32 2f       	mov	r19, r18
     5c6:	06 0d       	add	r16, r6
     5c8:	17 1d       	adc	r17, r7
     5ca:	28 1d       	adc	r18, r8
     5cc:	39 1d       	adc	r19, r9
     5ce:	00 93 72 02 	sts	0x0272, r16
     5d2:	10 93 73 02 	sts	0x0273, r17
     5d6:	20 93 74 02 	sts	0x0274, r18
     5da:	30 93 75 02 	sts	0x0275, r19
    	pulser.index = 0;
     5de:	10 92 7f 02 	sts	0x027F, r1
     5e2:	10 92 7e 02 	sts	0x027E, r1
    	pulser.step_clock = current_time + pulser.offset_time;
     5e6:	80 91 80 02 	lds	r24, 0x0280
     5ea:	90 91 81 02 	lds	r25, 0x0281
     5ee:	aa 27       	eor	r26, r26
     5f0:	97 fd       	sbrc	r25, 7
     5f2:	a0 95       	com	r26
     5f4:	ba 2f       	mov	r27, r26
     5f6:	86 0d       	add	r24, r6
     5f8:	97 1d       	adc	r25, r7
     5fa:	a8 1d       	adc	r26, r8
     5fc:	b9 1d       	adc	r27, r9
     5fe:	80 93 7a 02 	sts	0x027A, r24
     602:	90 93 7b 02 	sts	0x027B, r25
     606:	a0 93 7c 02 	sts	0x027C, r26
     60a:	b0 93 7d 02 	sts	0x027D, r27
    	pulser.down_or_up = UP;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	90 93 83 02 	sts	0x0283, r25
     616:	80 93 82 02 	sts	0x0282, r24
    }
//    analogWrite(LED_PWM_PIN, impulse_array[pulser.index]);
//    showLED((long int)impulse_array[pulser.index] * 1000, 4);

    if(current_time >= pulser.step_clock){
     61a:	40 91 7a 02 	lds	r20, 0x027A
     61e:	50 91 7b 02 	lds	r21, 0x027B
     622:	60 91 7c 02 	lds	r22, 0x027C
     626:	70 91 7d 02 	lds	r23, 0x027D
     62a:	64 16       	cp	r6, r20
     62c:	75 06       	cpc	r7, r21
     62e:	86 06       	cpc	r8, r22
     630:	97 06       	cpc	r9, r23
     632:	08 f4       	brcc	.+2      	; 0x636 <loop+0x2cc>
     634:	49 c0       	rjmp	.+146    	; 0x6c8 <loop+0x35e>
    	if (pulser.down_or_up == UP && pulser.index < impulse_num_samples - 1) {
     636:	80 91 82 02 	lds	r24, 0x0282
     63a:	90 91 83 02 	lds	r25, 0x0283
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f4       	brne	.+60     	; 0x67e <loop+0x314>
     642:	20 91 7e 02 	lds	r18, 0x027E
     646:	30 91 7f 02 	lds	r19, 0x027F
     64a:	23 36       	cpi	r18, 0x63	; 99
     64c:	31 05       	cpc	r19, r1
     64e:	bc f4       	brge	.+46     	; 0x67e <loop+0x314>
    		pulser.step_clock += pulser.step_period_up;
     650:	80 91 6e 02 	lds	r24, 0x026E
     654:	90 91 6f 02 	lds	r25, 0x026F
     658:	aa 27       	eor	r26, r26
     65a:	97 fd       	sbrc	r25, 7
     65c:	a0 95       	com	r26
     65e:	ba 2f       	mov	r27, r26
     660:	84 0f       	add	r24, r20
     662:	95 1f       	adc	r25, r21
     664:	a6 1f       	adc	r26, r22
     666:	b7 1f       	adc	r27, r23
     668:	80 93 7a 02 	sts	0x027A, r24
     66c:	90 93 7b 02 	sts	0x027B, r25
     670:	a0 93 7c 02 	sts	0x027C, r26
     674:	b0 93 7d 02 	sts	0x027D, r27
    		pulser.index++;
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	21 c0       	rjmp	.+66     	; 0x6c0 <loop+0x356>
    	}
    	else if(pulser.index > 0){
     67e:	20 91 7e 02 	lds	r18, 0x027E
     682:	30 91 7f 02 	lds	r19, 0x027F
     686:	12 16       	cp	r1, r18
     688:	13 06       	cpc	r1, r19
     68a:	f4 f4       	brge	.+60     	; 0x6c8 <loop+0x35e>
    		pulser.down_or_up = DOWN;
     68c:	10 92 83 02 	sts	0x0283, r1
     690:	10 92 82 02 	sts	0x0282, r1
    		pulser.step_clock += pulser.step_period_down;
     694:	80 91 70 02 	lds	r24, 0x0270
     698:	90 91 71 02 	lds	r25, 0x0271
     69c:	aa 27       	eor	r26, r26
     69e:	97 fd       	sbrc	r25, 7
     6a0:	a0 95       	com	r26
     6a2:	ba 2f       	mov	r27, r26
     6a4:	84 0f       	add	r24, r20
     6a6:	95 1f       	adc	r25, r21
     6a8:	a6 1f       	adc	r26, r22
     6aa:	b7 1f       	adc	r27, r23
     6ac:	80 93 7a 02 	sts	0x027A, r24
     6b0:	90 93 7b 02 	sts	0x027B, r25
     6b4:	a0 93 7c 02 	sts	0x027C, r26
     6b8:	b0 93 7d 02 	sts	0x027D, r27
    		pulser.index--;
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	30 40       	sbci	r19, 0x00	; 0
     6c0:	30 93 7f 02 	sts	0x027F, r19
     6c4:	20 93 7e 02 	sts	0x027E, r18
    	}
    }


//    showLED(100L*dimmer_pct, 4);
    if(!digitalRead(cadence_enc.pin_num)){
     6c8:	80 91 ee 02 	lds	r24, 0x02EE
     6cc:	0e 94 1b 09 	call	0x1236	; 0x1236 <digitalRead>
     6d0:	89 2b       	or	r24, r25
     6d2:	c9 f4       	brne	.+50     	; 0x706 <loop+0x39c>
      if(cadence_enc.debounce_cnt < cadence_enc.debounce_min)
     6d4:	20 91 de 02 	lds	r18, 0x02DE
     6d8:	30 91 df 02 	lds	r19, 0x02DF
     6dc:	80 91 e0 02 	lds	r24, 0x02E0
     6e0:	90 91 e1 02 	lds	r25, 0x02E1
     6e4:	28 17       	cp	r18, r24
     6e6:	39 07       	cpc	r19, r25
     6e8:	3c f4       	brge	.+14     	; 0x6f8 <loop+0x38e>
      	cadence_enc.debounce_cnt++;
     6ea:	2f 5f       	subi	r18, 0xFF	; 255
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	30 93 df 02 	sts	0x02DF, r19
     6f2:	20 93 de 02 	sts	0x02DE, r18
     6f6:	18 c0       	rjmp	.+48     	; 0x728 <loop+0x3be>
      else{ // debounce count is equal to or greater than minimum
      	cadence_enc.pin_state = HIGH;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 e3 02 	sts	0x02E3, r25
     700:	80 93 e2 02 	sts	0x02E2, r24
     704:	11 c0       	rjmp	.+34     	; 0x728 <loop+0x3be>
      }
    }
    else{
      if(cadence_enc.debounce_cnt > 0)
     706:	80 91 de 02 	lds	r24, 0x02DE
     70a:	90 91 df 02 	lds	r25, 0x02DF
     70e:	18 16       	cp	r1, r24
     710:	19 06       	cpc	r1, r25
     712:	34 f4       	brge	.+12     	; 0x720 <loop+0x3b6>
      	cadence_enc.debounce_cnt--;
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	90 93 df 02 	sts	0x02DF, r25
     71a:	80 93 de 02 	sts	0x02DE, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <loop+0x3be>
      else{ // debounce count is at zero
      	cadence_enc.pin_state = LOW;
     720:	10 92 e3 02 	sts	0x02E3, r1
     724:	10 92 e2 02 	sts	0x02E2, r1
      }
    }

    if (cadence_enc.last_state != cadence_enc.pin_state){
     728:	60 91 e2 02 	lds	r22, 0x02E2
     72c:	70 91 e3 02 	lds	r23, 0x02E3
     730:	80 91 f4 02 	lds	r24, 0x02F4
     734:	90 91 f5 02 	lds	r25, 0x02F5
     738:	86 17       	cp	r24, r22
     73a:	97 07       	cpc	r25, r23
     73c:	e1 f0       	breq	.+56     	; 0x776 <loop+0x40c>
    	digitalWrite(LED_PIN, cadence_enc.pin_state);
     73e:	88 e0       	ldi	r24, 0x08	; 8
     740:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
    	if(cadence_enc.pin_state == LOW){ // detect falling edge
     744:	80 91 e2 02 	lds	r24, 0x02E2
     748:	90 91 e3 02 	lds	r25, 0x02E3
     74c:	89 2b       	or	r24, r25
     74e:	99 f4       	brne	.+38     	; 0x776 <loop+0x40c>
//    		cadence_enc.last_period = (cadence_enc.alpha*(current_time - cadence_enc.startTime)
//    				+ (1000L - cadence_enc.alpha)*cadence_enc.last_period)/1000;
    		cadence_enc.last_period = (current_time - cadence_enc.startTime);
     750:	80 91 e4 02 	lds	r24, 0x02E4
     754:	90 91 e5 02 	lds	r25, 0x02E5
     758:	93 01       	movw	r18, r6
     75a:	28 1b       	sub	r18, r24
     75c:	39 0b       	sbc	r19, r25
     75e:	30 93 f1 02 	sts	0x02F1, r19
     762:	20 93 f0 02 	sts	0x02F0, r18
    		cadence_enc.startTime = current_time;
     766:	60 92 e4 02 	sts	0x02E4, r6
     76a:	70 92 e5 02 	sts	0x02E5, r7
     76e:	80 92 e6 02 	sts	0x02E6, r8
     772:	90 92 e7 02 	sts	0x02E7, r9
    	}
    }
    cadence_enc.last_state = cadence_enc.pin_state;
     776:	80 91 e2 02 	lds	r24, 0x02E2
     77a:	90 91 e3 02 	lds	r25, 0x02E3
     77e:	90 93 f5 02 	sts	0x02F5, r25
     782:	80 93 f4 02 	sts	0x02F4, r24
  }
  if(current_time >= calc_cadence_clock){
     786:	80 91 94 01 	lds	r24, 0x0194
     78a:	90 91 95 01 	lds	r25, 0x0195
     78e:	a0 91 96 01 	lds	r26, 0x0196
     792:	b0 91 97 01 	lds	r27, 0x0197
     796:	68 16       	cp	r6, r24
     798:	79 06       	cpc	r7, r25
     79a:	8a 06       	cpc	r8, r26
     79c:	9b 06       	cpc	r9, r27
     79e:	08 f4       	brcc	.+2      	; 0x7a2 <loop+0x438>
     7a0:	79 c0       	rjmp	.+242    	; 0x894 <loop+0x52a>
  	if((current_time - cadence_enc.startTime) > cadence_enc.max_period){
     7a2:	80 91 e4 02 	lds	r24, 0x02E4
     7a6:	90 91 e5 02 	lds	r25, 0x02E5
     7aa:	a0 91 e6 02 	lds	r26, 0x02E6
     7ae:	b0 91 e7 02 	lds	r27, 0x02E7
     7b2:	a4 01       	movw	r20, r8
     7b4:	93 01       	movw	r18, r6
     7b6:	28 1b       	sub	r18, r24
     7b8:	39 0b       	sbc	r19, r25
     7ba:	4a 0b       	sbc	r20, r26
     7bc:	5b 0b       	sbc	r21, r27
     7be:	80 91 f6 02 	lds	r24, 0x02F6
     7c2:	90 91 f7 02 	lds	r25, 0x02F7
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	82 17       	cp	r24, r18
     7cc:	93 07       	cpc	r25, r19
     7ce:	a4 07       	cpc	r26, r20
     7d0:	b5 07       	cpc	r27, r21
     7d2:	48 f4       	brcc	.+18     	; 0x7e6 <loop+0x47c>
  		cadence_enc.hertz = 0;
     7d4:	10 92 ea 02 	sts	0x02EA, r1
     7d8:	10 92 eb 02 	sts	0x02EB, r1
     7dc:	10 92 ec 02 	sts	0x02EC, r1
     7e0:	10 92 ed 02 	sts	0x02ED, r1
     7e4:	25 c0       	rjmp	.+74     	; 0x830 <loop+0x4c6>
  	}
  	else if(current_time - cadence_enc.startTime > cadence_enc.last_period)
     7e6:	80 91 f0 02 	lds	r24, 0x02F0
     7ea:	90 91 f1 02 	lds	r25, 0x02F1
     7ee:	7c 01       	movw	r14, r24
     7f0:	00 27       	eor	r16, r16
     7f2:	f7 fc       	sbrc	r15, 7
     7f4:	00 95       	com	r16
     7f6:	10 2f       	mov	r17, r16
     7f8:	e2 16       	cp	r14, r18
     7fa:	f3 06       	cpc	r15, r19
     7fc:	04 07       	cpc	r16, r20
     7fe:	15 07       	cpc	r17, r21
     800:	38 f4       	brcc	.+14     	; 0x810 <loop+0x4a6>
  		cadence_enc.hertz = (1000L*1000L)/(current_time - cadence_enc.startTime);
     802:	60 e4       	ldi	r22, 0x40	; 64
     804:	72 e4       	ldi	r23, 0x42	; 66
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__udivmodsi4>
     80e:	08 c0       	rjmp	.+16     	; 0x820 <loop+0x4b6>
  	else{
  		cadence_enc.hertz = (1000L*1000L)/cadence_enc.last_period;
     810:	60 e4       	ldi	r22, 0x40	; 64
     812:	72 e4       	ldi	r23, 0x42	; 66
     814:	8f e0       	ldi	r24, 0x0F	; 15
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a8 01       	movw	r20, r16
     81a:	97 01       	movw	r18, r14
     81c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     820:	20 93 ea 02 	sts	0x02EA, r18
     824:	30 93 eb 02 	sts	0x02EB, r19
     828:	40 93 ec 02 	sts	0x02EC, r20
     82c:	50 93 ed 02 	sts	0x02ED, r21
  	}
  	if(!hold_display){
     830:	80 91 84 02 	lds	r24, 0x0284
     834:	90 91 85 02 	lds	r25, 0x0285
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	99 f4       	brne	.+38     	; 0x862 <loop+0x4f8>
  		showLED(60*cadence_enc.hertz,4);
     83c:	60 91 ea 02 	lds	r22, 0x02EA
     840:	70 91 eb 02 	lds	r23, 0x02EB
     844:	80 91 ec 02 	lds	r24, 0x02EC
     848:	90 91 ed 02 	lds	r25, 0x02ED
     84c:	2c e3       	ldi	r18, 0x3C	; 60
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	0e 94 47 0c 	call	0x188e	; 0x188e <__mulsi3>
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 ac 00 	call	0x158	; 0x158 <_Z7showLEDli>
     860:	05 c0       	rjmp	.+10     	; 0x86c <loop+0x502>
  	}
  	else
  		hold_display--;
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	90 93 85 02 	sts	0x0285, r25
     868:	80 93 84 02 	sts	0x0284, r24
  	calc_cadence_clock = current_time+calc_cadence_period;
     86c:	80 91 02 01 	lds	r24, 0x0102
     870:	90 91 03 01 	lds	r25, 0x0103
     874:	aa 27       	eor	r26, r26
     876:	97 fd       	sbrc	r25, 7
     878:	a0 95       	com	r26
     87a:	ba 2f       	mov	r27, r26
     87c:	86 0d       	add	r24, r6
     87e:	97 1d       	adc	r25, r7
     880:	a8 1d       	adc	r26, r8
     882:	b9 1d       	adc	r27, r9
     884:	80 93 94 01 	sts	0x0194, r24
     888:	90 93 95 01 	sts	0x0195, r25
     88c:	a0 93 96 01 	sts	0x0196, r26
     890:	b0 93 97 01 	sts	0x0197, r27
//  	led_state = !led_state;
//  	digitalWrite(LED_PIN, led_state);
//  	blink_clock = current_time + blink_period;
//  }

  if(current_time >= update_display_clock){
     894:	80 91 9c 01 	lds	r24, 0x019C
     898:	90 91 9d 01 	lds	r25, 0x019D
     89c:	a0 91 9e 01 	lds	r26, 0x019E
     8a0:	b0 91 9f 01 	lds	r27, 0x019F
     8a4:	68 16       	cp	r6, r24
     8a6:	79 06       	cpc	r7, r25
     8a8:	8a 06       	cpc	r8, r26
     8aa:	9b 06       	cpc	r9, r27
     8ac:	a0 f0       	brcs	.+40     	; 0x8d6 <loop+0x56c>
  	update_display_clock = current_time + update_display_period;
     8ae:	80 91 00 01 	lds	r24, 0x0100
     8b2:	90 91 01 01 	lds	r25, 0x0101
     8b6:	aa 27       	eor	r26, r26
     8b8:	97 fd       	sbrc	r25, 7
     8ba:	a0 95       	com	r26
     8bc:	ba 2f       	mov	r27, r26
     8be:	86 0d       	add	r24, r6
     8c0:	97 1d       	adc	r25, r7
     8c2:	a8 1d       	adc	r26, r8
     8c4:	b9 1d       	adc	r27, r9
     8c6:	80 93 9c 01 	sts	0x019C, r24
     8ca:	90 93 9d 01 	sts	0x019D, r25
     8ce:	a0 93 9e 01 	sts	0x019E, r26
     8d2:	b0 93 9f 01 	sts	0x019F, r27
//    showLED((long int)pulser.pulse_up_period * 1000, 4);
//    showLED((long int)dimmer_pct * 1000, 4);

  }
}
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	6f 90       	pop	r6
     8ee:	08 95       	ret

000008f0 <_Z11initLedDispv>:
		array[i] = -(int)((double)peak_value*0.5*(cos((pi/(double)array_length)*(double)i) - 1.0));
	}
}

// a little setup code for the LED display
void initLedDisp() {
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
	ledDisplay.shutdown(0, false);
     8f4:	06 e8       	ldi	r16, 0x86	; 134
     8f6:	12 e0       	ldi	r17, 0x02	; 2
     8f8:	c8 01       	movw	r24, r16
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN10LedControl8shutdownEib>
	ledDisplay.setIntensity(0, 12);
     904:	c8 01       	movw	r24, r16
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	4c e0       	ldi	r20, 0x0C	; 12
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN10LedControl12setIntensityEii>
	ledDisplay.clearDisplay(0);
     912:	c8 01       	movw	r24, r16
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN10LedControl12clearDisplayEi>
}
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <_Z12init_impulsePiii>:
  pulser.offset_time = 0; // start pulse at beginning of each carrier period

  init_impulse(impulse_array, impulse_num_samples, 255);
}

void init_impulse(int * array, int array_length, int peak_value){
     922:	2f 92       	push	r2
     924:	3f 92       	push	r3
     926:	4f 92       	push	r4
     928:	5f 92       	push	r5
     92a:	6f 92       	push	r6
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	00 d0       	rcall	.+0      	; 0x948 <_Z12init_impulsePiii+0x26>
     948:	00 d0       	rcall	.+0      	; 0x94a <_Z12init_impulsePiii+0x28>
     94a:	00 d0       	rcall	.+0      	; 0x94c <_Z12init_impulsePiii+0x2a>
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	7c 83       	std	Y+4, r23	; 0x04
     952:	6b 83       	std	Y+3, r22	; 0x03
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	1e 82       	std	Y+6, r1	; 0x06
     95a:	1d 82       	std	Y+5, r1	; 0x05
	int i = 0;
	for(i = 0; i < array_length; i ++){
//		array[i] = (int)((double)peak_value*0.5*(cos((2.0*pi*(double)i)/(double)array_length - pi) + 1.0));
		array[i] = -(int)((double)peak_value*0.5*(cos((pi/(double)array_length)*(double)i) - 1.0));
     95c:	1b 01       	movw	r2, r22
     95e:	44 24       	eor	r4, r4
     960:	37 fc       	sbrc	r3, 7
     962:	40 94       	com	r4
     964:	54 2c       	mov	r5, r4
     966:	3a 01       	movw	r6, r20
     968:	88 24       	eor	r8, r8
     96a:	77 fc       	sbrc	r7, 7
     96c:	80 94       	com	r8
     96e:	98 2c       	mov	r9, r8
     970:	4c c0       	rjmp	.+152    	; 0xa0a <_Z12init_impulsePiii+0xe8>
     972:	c2 01       	movw	r24, r4
     974:	b1 01       	movw	r22, r2
     976:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__floatsisf>
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	6b ed       	ldi	r22, 0xDB	; 219
     980:	7f e0       	ldi	r23, 0x0F	; 15
     982:	89 e4       	ldi	r24, 0x49	; 73
     984:	90 e4       	ldi	r25, 0x40	; 64
     986:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divsf3>
     98a:	7b 01       	movw	r14, r22
     98c:	8c 01       	movw	r16, r24
     98e:	2d 81       	ldd	r18, Y+5	; 0x05
     990:	3e 81       	ldd	r19, Y+6	; 0x06
     992:	b9 01       	movw	r22, r18
     994:	88 27       	eor	r24, r24
     996:	77 fd       	sbrc	r23, 7
     998:	80 95       	com	r24
     99a:	98 2f       	mov	r25, r24
     99c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__floatsisf>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	c8 01       	movw	r24, r16
     9a6:	b7 01       	movw	r22, r14
     9a8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     9ac:	0e 94 15 0a 	call	0x142a	; 0x142a <cos>
     9b0:	5b 01       	movw	r10, r22
     9b2:	6c 01       	movw	r12, r24
     9b4:	c4 01       	movw	r24, r8
     9b6:	b3 01       	movw	r22, r6
     9b8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__floatsisf>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	5f e3       	ldi	r21, 0x3F	; 63
     9c4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     9c8:	7b 01       	movw	r14, r22
     9ca:	8c 01       	movw	r16, r24
     9cc:	c6 01       	movw	r24, r12
     9ce:	b5 01       	movw	r22, r10
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 b0 09 	call	0x1360	; 0x1360 <__subsf3>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	c8 01       	movw	r24, r16
     9e2:	b7 01       	movw	r22, r14
     9e4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     9e8:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixsfsi>
     9ec:	70 95       	com	r23
     9ee:	61 95       	neg	r22
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	e9 81       	ldd	r30, Y+1	; 0x01
     9f4:	fa 81       	ldd	r31, Y+2	; 0x02
     9f6:	61 93       	st	Z+, r22
     9f8:	71 93       	st	Z+, r23
     9fa:	fa 83       	std	Y+2, r31	; 0x02
     9fc:	e9 83       	std	Y+1, r30	; 0x01
  init_impulse(impulse_array, impulse_num_samples, 255);
}

void init_impulse(int * array, int array_length, int peak_value){
	int i = 0;
	for(i = 0; i < array_length; i ++){
     9fe:	2d 81       	ldd	r18, Y+5	; 0x05
     a00:	3e 81       	ldd	r19, Y+6	; 0x06
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	3e 83       	std	Y+6, r19	; 0x06
     a08:	2d 83       	std	Y+5, r18	; 0x05
     a0a:	8d 81       	ldd	r24, Y+5	; 0x05
     a0c:	9e 81       	ldd	r25, Y+6	; 0x06
     a0e:	eb 81       	ldd	r30, Y+3	; 0x03
     a10:	fc 81       	ldd	r31, Y+4	; 0x04
     a12:	8e 17       	cp	r24, r30
     a14:	9f 07       	cpc	r25, r31
     a16:	0c f4       	brge	.+2      	; 0xa1a <_Z12init_impulsePiii+0xf8>
     a18:	ac cf       	rjmp	.-168    	; 0x972 <_Z12init_impulsePiii+0x50>
//		array[i] = (int)((double)peak_value*0.5*(cos((2.0*pi*(double)i)/(double)array_length - pi) + 1.0));
		array[i] = -(int)((double)peak_value*0.5*(cos((pi/(double)array_length)*(double)i) - 1.0));
	}
}
     a1a:	26 96       	adiw	r28, 0x06	; 6
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	9f 90       	pop	r9
     a3c:	8f 90       	pop	r8
     a3e:	7f 90       	pop	r7
     a40:	6f 90       	pop	r6
     a42:	5f 90       	pop	r5
     a44:	4f 90       	pop	r4
     a46:	3f 90       	pop	r3
     a48:	2f 90       	pop	r2
     a4a:	08 95       	ret

00000a4c <setup>:
// instantiate LED Display controller -- the 4th argument is the number of displays
LedControl ledDisplay = LedControl(LED_DATA_PIN, LED_CLOCK_PIN, LED_CSLOAD_PIN, 1);
encoder_struct cadence_enc;

void setup() {
  pinMode(LED_PWM_PIN, OUTPUT);
     a4c:	8b e0       	ldi	r24, 0x0B	; 11
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
  //pinMode(POT_PIN, INPUT);
  pinMode(INTERRUPTER_PIN, INPUT);
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
  pinMode(LED_PIN, OUTPUT);
     a5c:	88 e0       	ldi	r24, 0x08	; 8
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
  initLedDisp();
     a64:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_Z11initLedDispv>
  blink_clock = millis();
     a68:	0e 94 d6 07 	call	0xfac	; 0xfac <millis>
     a6c:	60 93 90 01 	sts	0x0190, r22
     a70:	70 93 91 01 	sts	0x0191, r23
     a74:	80 93 92 01 	sts	0x0192, r24
     a78:	90 93 93 01 	sts	0x0193, r25
  cadence_enc.max_hertz = 5;
     a7c:	25 e0       	ldi	r18, 0x05	; 5
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	30 93 e9 02 	sts	0x02E9, r19
     a84:	20 93 e8 02 	sts	0x02E8, r18
  cadence_enc.max_period = 3000;
     a88:	88 eb       	ldi	r24, 0xB8	; 184
     a8a:	9b e0       	ldi	r25, 0x0B	; 11
     a8c:	90 93 f7 02 	sts	0x02F7, r25
     a90:	80 93 f6 02 	sts	0x02F6, r24
  cadence_enc.pin_num = INTERRUPTER_PIN;
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 ef 02 	sts	0x02EF, r25
     a9c:	80 93 ee 02 	sts	0x02EE, r24
  cadence_enc.debounce_min = 5;
     aa0:	30 93 e1 02 	sts	0x02E1, r19
     aa4:	20 93 e0 02 	sts	0x02E0, r18
  cadence_enc.alpha = 800;
     aa8:	80 e2       	ldi	r24, 0x20	; 32
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	80 93 f8 02 	sts	0x02F8, r24
     ab4:	90 93 f9 02 	sts	0x02F9, r25
     ab8:	a0 93 fa 02 	sts	0x02FA, r26
     abc:	b0 93 fb 02 	sts	0x02FB, r27
  cadence_enc.cts_per_rev = 1;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	90 93 f3 02 	sts	0x02F3, r25
     ac8:	80 93 f2 02 	sts	0x02F2, r24

  pulser.carrier_clock = 0;
     acc:	10 92 72 02 	sts	0x0272, r1
     ad0:	10 92 73 02 	sts	0x0273, r1
     ad4:	10 92 74 02 	sts	0x0274, r1
     ad8:	10 92 75 02 	sts	0x0275, r1
  pulser.carrier_period = 5000;
     adc:	88 e8       	ldi	r24, 0x88	; 136
     ade:	93 e1       	ldi	r25, 0x13	; 19
     ae0:	90 93 69 02 	sts	0x0269, r25
     ae4:	80 93 68 02 	sts	0x0268, r24
  pulser.step_clock = 0;
     ae8:	10 92 7a 02 	sts	0x027A, r1
     aec:	10 92 7b 02 	sts	0x027B, r1
     af0:	10 92 7c 02 	sts	0x027C, r1
     af4:	10 92 7d 02 	sts	0x027D, r1
  pulser.pulse_up_period = 1000;
     af8:	88 ee       	ldi	r24, 0xE8	; 232
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	90 93 6b 02 	sts	0x026B, r25
     b00:	80 93 6a 02 	sts	0x026A, r24
  pulser.pulse_down_period = 3500;
     b04:	8c ea       	ldi	r24, 0xAC	; 172
     b06:	9d e0       	ldi	r25, 0x0D	; 13
     b08:	90 93 6d 02 	sts	0x026D, r25
     b0c:	80 93 6c 02 	sts	0x026C, r24
  pulser.step_period_up = pulser.pulse_up_period / impulse_num_samples;
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 93 6f 02 	sts	0x026F, r25
     b18:	80 93 6e 02 	sts	0x026E, r24
  pulser.step_period_down = pulser.pulse_down_period / impulse_num_samples;
     b1c:	83 e2       	ldi	r24, 0x23	; 35
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	90 93 71 02 	sts	0x0271, r25
     b24:	80 93 70 02 	sts	0x0270, r24
  pulser.index = 0;
     b28:	10 92 7f 02 	sts	0x027F, r1
     b2c:	10 92 7e 02 	sts	0x027E, r1
  pulser.offset_time = 0; // start pulse at beginning of each carrier period
     b30:	10 92 81 02 	sts	0x0281, r1
     b34:	10 92 80 02 	sts	0x0280, r1

  init_impulse(impulse_array, impulse_num_samples, 255);
     b38:	80 ea       	ldi	r24, 0xA0	; 160
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	64 e6       	ldi	r22, 0x64	; 100
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	4f ef       	ldi	r20, 0xFF	; 255
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 91 04 	call	0x922	; 0x922 <_Z12init_impulsePiii>
}
     b48:	08 95       	ret

00000b4a <_ZN10LedControl11spiTransferEihh>:
	v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
}

void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	00 d0       	rcall	.+0      	; 0xb64 <_ZN10LedControl11spiTransferEihh+0x1a>
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	7c 01       	movw	r14, r24
     b6a:	49 83       	std	Y+1, r20	; 0x01
     b6c:	2a 83       	std	Y+2, r18	; 0x02
    //Create an array with the data to shift out
    int offset=addr*2;
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
    int maxbytes=maxDevices*2;
     b72:	86 e5       	ldi	r24, 0x56	; 86
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	e8 0e       	add	r14, r24
     b78:	f9 1e       	adc	r15, r25
     b7a:	f7 01       	movw	r30, r14
     b7c:	00 81       	ld	r16, Z
     b7e:	11 81       	ldd	r17, Z+1	; 0x01
     b80:	8a ea       	ldi	r24, 0xAA	; 170
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	e8 0e       	add	r14, r24
     b86:	f9 1e       	adc	r15, r25
     b88:	00 0f       	add	r16, r16
     b8a:	11 1f       	adc	r17, r17
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <_ZN10LedControl11spiTransferEihh+0x52>

    for(int i=0;i<maxbytes;i++)
	spidata[i]=(byte)0;
     b92:	f7 01       	movw	r30, r14
     b94:	e8 0f       	add	r30, r24
     b96:	f9 1f       	adc	r31, r25
     b98:	10 82       	st	Z, r1
void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
    //Create an array with the data to shift out
    int offset=addr*2;
    int maxbytes=maxDevices*2;

    for(int i=0;i<maxbytes;i++)
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	80 17       	cp	r24, r16
     b9e:	91 07       	cpc	r25, r17
     ba0:	c4 f3       	brlt	.-16     	; 0xb92 <_ZN10LedControl11spiTransferEihh+0x48>
	spidata[i]=(byte)0;
    //put our device data into the array
    spidata[offset+1]=opcode;
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	f7 01       	movw	r30, r14
     ba6:	e6 0f       	add	r30, r22
     ba8:	f7 1f       	adc	r31, r23
     baa:	81 83       	std	Z+1, r24	; 0x01
    spidata[offset]=data;
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	80 83       	st	Z, r24
    //enable the line 
    digitalWrite(SPI_CS,LOW);
     bb0:	f7 01       	movw	r30, r14
     bb2:	ec 5a       	subi	r30, 0xAC	; 172
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	80 81       	ld	r24, Z
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
     bbe:	01 50       	subi	r16, 0x01	; 1
     bc0:	10 40       	sbci	r17, 0x00	; 0
     bc2:	67 01       	movw	r12, r14
     bc4:	c0 0e       	add	r12, r16
     bc6:	d1 1e       	adc	r13, r17
     bc8:	0f 5f       	subi	r16, 0xFF	; 255
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
    //Now shift out the data 
    for(int i=maxbytes;i>0;i--)
 	shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);
     bcc:	90 e5       	ldi	r25, 0x50	; 80
     bce:	89 2e       	mov	r8, r25
     bd0:	91 2c       	mov	r9, r1
     bd2:	8e 0c       	add	r8, r14
     bd4:	9f 1c       	adc	r9, r15
     bd6:	82 e5       	ldi	r24, 0x52	; 82
     bd8:	a8 2e       	mov	r10, r24
     bda:	b1 2c       	mov	r11, r1
     bdc:	ae 0c       	add	r10, r14
     bde:	bf 1c       	adc	r11, r15
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <_ZN10LedControl11spiTransferEihh+0xb4>
     be2:	01 50       	subi	r16, 0x01	; 1
     be4:	10 40       	sbci	r17, 0x00	; 0
     be6:	f4 01       	movw	r30, r8
     be8:	80 81       	ld	r24, Z
     bea:	f5 01       	movw	r30, r10
     bec:	60 81       	ld	r22, Z
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	f6 01       	movw	r30, r12
     bf2:	20 81       	ld	r18, Z
     bf4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <shiftOut>
     bf8:	08 94       	sec
     bfa:	c1 08       	sbc	r12, r1
     bfc:	d1 08       	sbc	r13, r1
    spidata[offset+1]=opcode;
    spidata[offset]=data;
    //enable the line 
    digitalWrite(SPI_CS,LOW);
    //Now shift out the data 
    for(int i=maxbytes;i>0;i--)
     bfe:	10 16       	cp	r1, r16
     c00:	11 06       	cpc	r1, r17
     c02:	7c f3       	brlt	.-34     	; 0xbe2 <_ZN10LedControl11spiTransferEihh+0x98>
 	shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,spidata[i-1]);
    //latch the data onto the display
    digitalWrite(SPI_CS,HIGH);
     c04:	84 e5       	ldi	r24, 0x54	; 84
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	e8 0e       	add	r14, r24
     c0a:	f9 1e       	adc	r15, r25
     c0c:	f7 01       	movw	r30, r14
     c0e:	80 81       	ld	r24, Z
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
}    
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	bf 90       	pop	r11
     c2c:	af 90       	pop	r10
     c2e:	9f 90       	pop	r9
     c30:	8f 90       	pop	r8
     c32:	08 95       	ret

00000c34 <_ZN10LedControl8setDigitEiihh>:
	val=val & 0x01;
	setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
     c34:	0f 93       	push	r16
     c36:	dc 01       	movw	r26, r24
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
     c38:	77 fd       	sbrc	r23, 7
     c3a:	25 c0       	rjmp	.+74     	; 0xc86 <_ZN10LedControl8setDigitEiihh+0x52>
     c3c:	aa 5a       	subi	r26, 0xAA	; 170
     c3e:	bf 4f       	sbci	r27, 0xFF	; 255
     c40:	8d 91       	ld	r24, X+
     c42:	9c 91       	ld	r25, X
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	a6 55       	subi	r26, 0x56	; 86
     c48:	b0 40       	sbci	r27, 0x00	; 0
     c4a:	68 17       	cp	r22, r24
     c4c:	79 07       	cpc	r23, r25
     c4e:	dc f4       	brge	.+54     	; 0xc86 <_ZN10LedControl8setDigitEiihh+0x52>
	return;
    if(digit<0 || digit>7 || value>15)
     c50:	48 30       	cpi	r20, 0x08	; 8
     c52:	51 05       	cpc	r21, r1
     c54:	c0 f4       	brcc	.+48     	; 0xc86 <_ZN10LedControl8setDigitEiihh+0x52>
     c56:	20 31       	cpi	r18, 0x10	; 16
     c58:	b0 f4       	brcc	.+44     	; 0xc86 <_ZN10LedControl8setDigitEiihh+0x52>
	return;
    offset=addr*8;
    v=charTable[value];
     c5a:	e2 2f       	mov	r30, r18
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	e7 5f       	subi	r30, 0xF7	; 247
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	20 81       	ld	r18, Z
    if(dp)
     c64:	01 11       	cpse	r16, r1
	v|=B10000000;
     c66:	20 68       	ori	r18, 0x80	; 128
    status[offset+digit]=v;
     c68:	fb 01       	movw	r30, r22
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	8a 95       	dec	r24
     c72:	e1 f7       	brne	.-8      	; 0xc6c <_ZN10LedControl8setDigitEiihh+0x38>
     c74:	ea 0f       	add	r30, r26
     c76:	fb 1f       	adc	r31, r27
     c78:	e4 0f       	add	r30, r20
     c7a:	f5 1f       	adc	r31, r21
     c7c:	20 8b       	std	Z+16, r18	; 0x10
    spiTransfer(addr, digit+1,v);
     c7e:	4f 5f       	subi	r20, 0xFF	; 255
     c80:	cd 01       	movw	r24, r26
     c82:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
    
}
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <_ZN10LedControl12clearDisplayEi>:
    if(intensity>=0 || intensity<16)	
	spiTransfer(addr, OP_INTENSITY,intensity);
    
}

void LedControl::clearDisplay(int addr) {
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	7b 01       	movw	r14, r22
    int offset;

    if(addr<0 || addr>=maxDevices)
     c9c:	77 fd       	sbrc	r23, 7
     c9e:	22 c0       	rjmp	.+68     	; 0xce4 <_ZN10LedControl12clearDisplayEi+0x5a>
     ca0:	ca 5a       	subi	r28, 0xAA	; 170
     ca2:	df 4f       	sbci	r29, 0xFF	; 255
     ca4:	88 81       	ld	r24, Y
     ca6:	99 81       	ldd	r25, Y+1	; 0x01
     ca8:	c6 55       	subi	r28, 0x56	; 86
     caa:	d0 40       	sbci	r29, 0x00	; 0
     cac:	68 17       	cp	r22, r24
     cae:	79 07       	cpc	r23, r25
     cb0:	cc f4       	brge	.+50     	; 0xce4 <_ZN10LedControl12clearDisplayEi+0x5a>
     cb2:	8b 01       	movw	r16, r22
     cb4:	0e 5f       	subi	r16, 0xFE	; 254
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	53 e0       	ldi	r21, 0x03	; 3
     cba:	00 0f       	add	r16, r16
     cbc:	11 1f       	adc	r17, r17
     cbe:	5a 95       	dec	r21
     cc0:	e1 f7       	brne	.-8      	; 0xcba <_ZN10LedControl12clearDisplayEi+0x30>
     cc2:	0c 0f       	add	r16, r28
     cc4:	1d 1f       	adc	r17, r29
     cc6:	dd 24       	eor	r13, r13
     cc8:	d3 94       	inc	r13
	return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
	status[offset+i]=0;
     cca:	f8 01       	movw	r30, r16
     ccc:	11 92       	st	Z+, r1
     cce:	8f 01       	movw	r16, r30
	spiTransfer(addr, i+1,status[offset+i]);
     cd0:	ce 01       	movw	r24, r28
     cd2:	b7 01       	movw	r22, r14
     cd4:	4d 2d       	mov	r20, r13
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
     cdc:	d3 94       	inc	r13
    int offset;

    if(addr<0 || addr>=maxDevices)
	return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
     cde:	f9 e0       	ldi	r31, 0x09	; 9
     ce0:	df 16       	cp	r13, r31
     ce2:	99 f7       	brne	.-26     	; 0xcca <_ZN10LedControl12clearDisplayEi+0x40>
	status[offset+i]=0;
	spiTransfer(addr, i+1,status[offset+i]);
    }
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	08 95       	ret

00000cf4 <_ZN10LedControl12setIntensityEii>:
	return;
    if(limit>=0 || limit<8)
    	spiTransfer(addr, OP_SCANLIMIT,limit);
}

void LedControl::setIntensity(int addr, int intensity) {
     cf4:	fc 01       	movw	r30, r24
     cf6:	24 2f       	mov	r18, r20
    if(addr<0 || addr>=maxDevices)
     cf8:	77 fd       	sbrc	r23, 7
     cfa:	0d c0       	rjmp	.+26     	; 0xd16 <_ZN10LedControl12setIntensityEii+0x22>
     cfc:	ea 5a       	subi	r30, 0xAA	; 170
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	e6 55       	subi	r30, 0x56	; 86
     d06:	f0 40       	sbci	r31, 0x00	; 0
     d08:	68 17       	cp	r22, r24
     d0a:	79 07       	cpc	r23, r25
     d0c:	24 f4       	brge	.+8      	; 0xd16 <_ZN10LedControl12setIntensityEii+0x22>
	return;
    if(intensity>=0 || intensity<16)	
	spiTransfer(addr, OP_INTENSITY,intensity);
     d0e:	cf 01       	movw	r24, r30
     d10:	4a e0       	ldi	r20, 0x0A	; 10
     d12:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
     d16:	08 95       	ret

00000d18 <_ZN10LedControl12setScanLimitEii>:
	spiTransfer(addr, OP_SHUTDOWN,0);
    else
	spiTransfer(addr, OP_SHUTDOWN,1);
}
	
void LedControl::setScanLimit(int addr, int limit) {
     d18:	fc 01       	movw	r30, r24
     d1a:	24 2f       	mov	r18, r20
    if(addr<0 || addr>=maxDevices)
     d1c:	77 fd       	sbrc	r23, 7
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <_ZN10LedControl12setScanLimitEii+0x22>
     d20:	ea 5a       	subi	r30, 0xAA	; 170
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	e6 55       	subi	r30, 0x56	; 86
     d2a:	f0 40       	sbci	r31, 0x00	; 0
     d2c:	68 17       	cp	r22, r24
     d2e:	79 07       	cpc	r23, r25
     d30:	24 f4       	brge	.+8      	; 0xd3a <_ZN10LedControl12setScanLimitEii+0x22>
	return;
    if(limit>=0 || limit<8)
    	spiTransfer(addr, OP_SCANLIMIT,limit);
     d32:	cf 01       	movw	r24, r30
     d34:	4b e0       	ldi	r20, 0x0B	; 11
     d36:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
     d3a:	08 95       	ret

00000d3c <_ZN10LedControl8shutdownEib>:

int LedControl::getDeviceCount() {
    return maxDevices;
}

void LedControl::shutdown(int addr, bool b) {
     d3c:	fc 01       	movw	r30, r24
    if(addr<0 || addr>=maxDevices)
     d3e:	77 fd       	sbrc	r23, 7
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <_ZN10LedControl8shutdownEib+0x32>
     d42:	ea 5a       	subi	r30, 0xAA	; 170
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	e6 55       	subi	r30, 0x56	; 86
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	68 17       	cp	r22, r24
     d50:	79 07       	cpc	r23, r25
     d52:	6c f4       	brge	.+26     	; 0xd6e <_ZN10LedControl8shutdownEib+0x32>
	return;
    if(b)
     d54:	44 23       	and	r20, r20
     d56:	31 f0       	breq	.+12     	; 0xd64 <_ZN10LedControl8shutdownEib+0x28>
	spiTransfer(addr, OP_SHUTDOWN,0);
     d58:	cf 01       	movw	r24, r30
     d5a:	4c e0       	ldi	r20, 0x0C	; 12
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
     d62:	08 95       	ret
    else
	spiTransfer(addr, OP_SHUTDOWN,1);
     d64:	cf 01       	movw	r24, r30
     d66:	4c e0       	ldi	r20, 0x0C	; 12
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
     d6e:	08 95       	ret

00000d70 <_ZN10LedControlC1Eiiii>:
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	ec 01       	movw	r28, r24
     d82:	6b 01       	movw	r12, r22
    SPI_MOSI=dataPin;
     d84:	c0 5b       	subi	r28, 0xB0	; 176
     d86:	df 4f       	sbci	r29, 0xFF	; 255
     d88:	69 93       	st	Y+, r22
     d8a:	79 93       	st	Y+, r23
    SPI_CLK=clkPin;
     d8c:	49 93       	st	Y+, r20
     d8e:	59 93       	st	Y+, r21
    SPI_CS=csPin;
     d90:	39 83       	std	Y+1, r19	; 0x01
     d92:	28 83       	st	Y, r18
     d94:	c4 55       	subi	r28, 0x54	; 84
     d96:	d0 40       	sbci	r29, 0x00	; 0
    if(numDevices<=0 || numDevices>8 )
     d98:	c8 01       	movw	r24, r16
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	08 97       	sbiw	r24, 0x08	; 8
     d9e:	10 f0       	brcs	.+4      	; 0xda4 <_ZN10LedControlC1Eiiii+0x34>
     da0:	08 e0       	ldi	r16, 0x08	; 8
     da2:	10 e0       	ldi	r17, 0x00	; 0
	numDevices=8;
    maxDevices=numDevices;
     da4:	ca 5a       	subi	r28, 0xAA	; 170
     da6:	df 4f       	sbci	r29, 0xFF	; 255
     da8:	19 83       	std	Y+1, r17	; 0x01
     daa:	08 83       	st	Y, r16
     dac:	c6 55       	subi	r28, 0x56	; 86
     dae:	d0 40       	sbci	r29, 0x00	; 0
    pinMode(SPI_MOSI,OUTPUT);
     db0:	8e 01       	movw	r16, r28
     db2:	00 5b       	subi	r16, 0xB0	; 176
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	f8 01       	movw	r30, r16
     db8:	80 81       	ld	r24, Z
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
    pinMode(SPI_CLK,OUTPUT);
     dc0:	fe 01       	movw	r30, r28
     dc2:	ee 5a       	subi	r30, 0xAE	; 174
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
    pinMode(SPI_CS,OUTPUT);
     dce:	74 e5       	ldi	r23, 0x54	; 84
     dd0:	e7 2e       	mov	r14, r23
     dd2:	f1 2c       	mov	r15, r1
     dd4:	ec 0e       	add	r14, r28
     dd6:	fd 1e       	adc	r15, r29
     dd8:	f7 01       	movw	r30, r14
     dda:	80 81       	ld	r24, Z
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
    digitalWrite(SPI_CS,HIGH);
     de2:	f7 01       	movw	r30, r14
     de4:	80 81       	ld	r24, Z
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
    SPI_MOSI=dataPin;
     dec:	f8 01       	movw	r30, r16
     dee:	d1 82       	std	Z+1, r13	; 0x01
     df0:	c0 82       	st	Z, r12
     df2:	fe 01       	movw	r30, r28
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
    for(int i=0;i<64;i++) 
	status[i]=0x00;
     df8:	10 8a       	std	Z+16, r1	; 0x10
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	31 96       	adiw	r30, 0x01	; 1
     dfe:	80 34       	cpi	r24, 0x40	; 64
     e00:	91 05       	cpc	r25, r1
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <_ZN10LedControlC1Eiiii+0x88>
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	10 e0       	ldi	r17, 0x00	; 0
	status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
     e08:	66 e5       	ldi	r22, 0x56	; 86
     e0a:	c6 2e       	mov	r12, r22
     e0c:	d1 2c       	mov	r13, r1
     e0e:	cc 0e       	add	r12, r28
     e10:	dd 1e       	adc	r13, r29
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <_ZN10LedControlC1Eiiii+0xde>
	spiTransfer(i,OP_DISPLAYTEST,0);
     e14:	ce 01       	movw	r24, r28
     e16:	b8 01       	movw	r22, r16
     e18:	4f e0       	ldi	r20, 0x0F	; 15
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
	//scanlimit is set to max on startup
	setScanLimit(i,7);
     e20:	ce 01       	movw	r24, r28
     e22:	b8 01       	movw	r22, r16
     e24:	47 e0       	ldi	r20, 0x07	; 7
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN10LedControl12setScanLimitEii>
	//decode is done in source
	spiTransfer(i,OP_DECODEMODE,0);
     e2c:	ce 01       	movw	r24, r28
     e2e:	b8 01       	movw	r22, r16
     e30:	49 e0       	ldi	r20, 0x09	; 9
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN10LedControl11spiTransferEihh>
	clearDisplay(i);
     e38:	ce 01       	movw	r24, r28
     e3a:	b8 01       	movw	r22, r16
     e3c:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN10LedControl12clearDisplayEi>
	//we go into shutdown-mode on startup
	shutdown(i,true);
     e40:	ce 01       	movw	r24, r28
     e42:	b8 01       	movw	r22, r16
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN10LedControl8shutdownEib>
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
	status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	f6 01       	movw	r30, r12
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	08 17       	cp	r16, r24
     e56:	19 07       	cpc	r17, r25
     e58:	ec f2       	brlt	.-70     	; 0xe14 <_ZN10LedControlC1Eiiii+0xa4>
	spiTransfer(i,OP_DECODEMODE,0);
	clearDisplay(i);
	//we go into shutdown-mode on startup
	shutdown(i,true);
    }
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	08 95       	ret

00000e6c <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
     e6c:	2f 92       	push	r2
     e6e:	3f 92       	push	r3
     e70:	4f 92       	push	r4
     e72:	5f 92       	push	r5
     e74:	6f 92       	push	r6
     e76:	7f 92       	push	r7
     e78:	8f 92       	push	r8
     e7a:	9f 92       	push	r9
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	3b 01       	movw	r6, r22
     e96:	4c 01       	movw	r8, r24
     e98:	19 01       	movw	r2, r18
     e9a:	2a 01       	movw	r4, r20
     e9c:	6d 89       	ldd	r22, Y+21	; 0x15
     e9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ea0:	8f 89       	ldd	r24, Y+23	; 0x17
     ea2:	98 8d       	ldd	r25, Y+24	; 0x18
     ea4:	6a 19       	sub	r22, r10
     ea6:	7b 09       	sbc	r23, r11
     ea8:	8c 09       	sbc	r24, r12
     eaa:	9d 09       	sbc	r25, r13
     eac:	62 1a       	sub	r6, r18
     eae:	73 0a       	sbc	r7, r19
     eb0:	84 0a       	sbc	r8, r20
     eb2:	95 0a       	sbc	r9, r21
     eb4:	a4 01       	movw	r20, r8
     eb6:	93 01       	movw	r18, r6
     eb8:	0e 94 47 0c 	call	0x188e	; 0x188e <__mulsi3>
     ebc:	e2 18       	sub	r14, r2
     ebe:	f3 08       	sbc	r15, r3
     ec0:	04 09       	sbc	r16, r4
     ec2:	15 09       	sbc	r17, r5
     ec4:	a8 01       	movw	r20, r16
     ec6:	97 01       	movw	r18, r14
     ec8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divmodsi4>
     ecc:	2a 0d       	add	r18, r10
     ece:	3b 1d       	adc	r19, r11
     ed0:	4c 1d       	adc	r20, r12
     ed2:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
     ed4:	b9 01       	movw	r22, r18
     ed6:	ca 01       	movw	r24, r20
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	bf 90       	pop	r11
     eea:	af 90       	pop	r10
     eec:	9f 90       	pop	r9
     eee:	8f 90       	pop	r8
     ef0:	7f 90       	pop	r7
     ef2:	6f 90       	pop	r6
     ef4:	5f 90       	pop	r5
     ef6:	4f 90       	pop	r4
     ef8:	3f 90       	pop	r3
     efa:	2f 90       	pop	r2
     efc:	08 95       	ret

00000efe <main>:
#include <Arduino.h>

int main(void)
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
{
	init();
     f02:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     f06:	0e 94 26 05 	call	0xa4c	; 0xa4c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     f0a:	c0 e0       	ldi	r28, 0x00	; 0
     f0c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     f0e:	0e 94 b5 01 	call	0x36a	; 0x36a <loop>
		if (serialEventRun) serialEventRun();
     f12:	20 97       	sbiw	r28, 0x00	; 0
     f14:	e1 f3       	breq	.-8      	; 0xf0e <main+0x10>
     f16:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f1a:	f9 cf       	rjmp	.-14     	; 0xf0e <main+0x10>

00000f1c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	8f 93       	push	r24
     f2c:	9f 93       	push	r25
     f2e:	af 93       	push	r26
     f30:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     f32:	80 91 00 03 	lds	r24, 0x0300
     f36:	90 91 01 03 	lds	r25, 0x0301
     f3a:	a0 91 02 03 	lds	r26, 0x0302
     f3e:	b0 91 03 03 	lds	r27, 0x0303
	unsigned char f = timer0_fract;
     f42:	30 91 04 03 	lds	r19, 0x0304

	m += MILLIS_INC;
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	a1 1d       	adc	r26, r1
     f4a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     f4c:	23 2f       	mov	r18, r19
     f4e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     f50:	2d 37       	cpi	r18, 0x7D	; 125
     f52:	20 f0       	brcs	.+8      	; 0xf5c <__vector_16+0x40>
		f -= FRACT_MAX;
     f54:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	a1 1d       	adc	r26, r1
     f5a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f5c:	20 93 04 03 	sts	0x0304, r18
	timer0_millis = m;
     f60:	80 93 00 03 	sts	0x0300, r24
     f64:	90 93 01 03 	sts	0x0301, r25
     f68:	a0 93 02 03 	sts	0x0302, r26
     f6c:	b0 93 03 03 	sts	0x0303, r27
	timer0_overflow_count++;
     f70:	80 91 fc 02 	lds	r24, 0x02FC
     f74:	90 91 fd 02 	lds	r25, 0x02FD
     f78:	a0 91 fe 02 	lds	r26, 0x02FE
     f7c:	b0 91 ff 02 	lds	r27, 0x02FF
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	a1 1d       	adc	r26, r1
     f84:	b1 1d       	adc	r27, r1
     f86:	80 93 fc 02 	sts	0x02FC, r24
     f8a:	90 93 fd 02 	sts	0x02FD, r25
     f8e:	a0 93 fe 02 	sts	0x02FE, r26
     f92:	b0 93 ff 02 	sts	0x02FF, r27
}
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     fac:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     fae:	f8 94       	cli
	m = timer0_millis;
     fb0:	20 91 00 03 	lds	r18, 0x0300
     fb4:	30 91 01 03 	lds	r19, 0x0301
     fb8:	40 91 02 03 	lds	r20, 0x0302
     fbc:	50 91 03 03 	lds	r21, 0x0303
	SREG = oldSREG;
     fc0:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     fc2:	b9 01       	movw	r22, r18
     fc4:	ca 01       	movw	r24, r20
     fc6:	08 95       	ret

00000fc8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     fc8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     fca:	84 b5       	in	r24, 0x24	; 36
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     fd0:	84 b5       	in	r24, 0x24	; 36
     fd2:	81 60       	ori	r24, 0x01	; 1
     fd4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     fd6:	85 b5       	in	r24, 0x25	; 37
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     fdc:	85 b5       	in	r24, 0x25	; 37
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     fe2:	ee e6       	ldi	r30, 0x6E	; 110
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     fec:	e1 e8       	ldi	r30, 0x81	; 129
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ffe:	e0 e8       	ldi	r30, 0x80	; 128
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1008:	e1 eb       	ldi	r30, 0xB1	; 177
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	84 60       	ori	r24, 0x04	; 4
    1010:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1012:	e0 eb       	ldi	r30, 0xB0	; 176
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	81 60       	ori	r24, 0x01	; 1
    101a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    101c:	ea e7       	ldi	r30, 0x7A	; 122
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	84 60       	ori	r24, 0x04	; 4
    1024:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1026:	80 81       	ld	r24, Z
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    102c:	80 81       	ld	r24, Z
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1038:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    103c:	08 95       	ret

0000103e <analogRead>:

int analogRead(uint8_t pin)
{
    103e:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1040:	8e 30       	cpi	r24, 0x0E	; 14
    1042:	08 f0       	brcs	.+2      	; 0x1046 <analogRead+0x8>
    1044:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1046:	97 70       	andi	r25, 0x07	; 7
    1048:	80 91 08 01 	lds	r24, 0x0108
    104c:	82 95       	swap	r24
    104e:	88 0f       	add	r24, r24
    1050:	88 0f       	add	r24, r24
    1052:	80 7c       	andi	r24, 0xC0	; 192
    1054:	89 2b       	or	r24, r25
    1056:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    105a:	80 91 7a 00 	lds	r24, 0x007A
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1064:	80 91 7a 00 	lds	r24, 0x007A
    1068:	86 fd       	sbrc	r24, 6
    106a:	fc cf       	rjmp	.-8      	; 0x1064 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    106c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    1070:	40 91 79 00 	lds	r20, 0x0079
    1074:	94 2f       	mov	r25, r20
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	28 2b       	or	r18, r24
    107c:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    107e:	c9 01       	movw	r24, r18
    1080:	08 95       	ret

00001082 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	18 2f       	mov	r17, r24
    108a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	0e 94 a1 08 	call	0x1142	; 0x1142 <pinMode>
	if (val == 0)
    1092:	20 97       	sbiw	r28, 0x00	; 0
    1094:	09 f4       	brne	.+2      	; 0x1098 <analogWrite+0x16>
    1096:	4a c0       	rjmp	.+148    	; 0x112c <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    1098:	cf 3f       	cpi	r28, 0xFF	; 255
    109a:	d1 05       	cpc	r29, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <analogWrite+0x1e>
    109e:	49 c0       	rjmp	.+146    	; 0x1132 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    10a0:	e1 2f       	mov	r30, r17
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	e4 53       	subi	r30, 0x34	; 52
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	84 91       	lpm	r24, Z+
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	c1 f0       	breq	.+48     	; 0x10de <analogWrite+0x5c>
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	28 f4       	brcc	.+10     	; 0x10bc <analogWrite+0x3a>
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	51 f0       	breq	.+20     	; 0x10ca <analogWrite+0x48>
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	b1 f5       	brne	.+108    	; 0x1126 <analogWrite+0xa4>
    10ba:	0c c0       	rjmp	.+24     	; 0x10d4 <analogWrite+0x52>
    10bc:	86 30       	cpi	r24, 0x06	; 6
    10be:	19 f1       	breq	.+70     	; 0x1106 <analogWrite+0x84>
    10c0:	87 30       	cpi	r24, 0x07	; 7
    10c2:	49 f1       	breq	.+82     	; 0x1116 <analogWrite+0x94>
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	79 f5       	brne	.+94     	; 0x1126 <analogWrite+0xa4>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    10ca:	84 b5       	in	r24, 0x24	; 36
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    10d0:	c7 bd       	out	0x27, r28	; 39
    10d2:	33 c0       	rjmp	.+102    	; 0x113a <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    10d4:	84 b5       	in	r24, 0x24	; 36
    10d6:	80 62       	ori	r24, 0x20	; 32
    10d8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    10da:	c8 bd       	out	0x28, r28	; 40
    10dc:	2e c0       	rjmp	.+92     	; 0x113a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    10de:	80 91 80 00 	lds	r24, 0x0080
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    10e8:	d0 93 89 00 	sts	0x0089, r29
    10ec:	c0 93 88 00 	sts	0x0088, r28
    10f0:	24 c0       	rjmp	.+72     	; 0x113a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    10f2:	80 91 80 00 	lds	r24, 0x0080
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    10fc:	d0 93 8b 00 	sts	0x008B, r29
    1100:	c0 93 8a 00 	sts	0x008A, r28
    1104:	1a c0       	rjmp	.+52     	; 0x113a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1106:	80 91 b0 00 	lds	r24, 0x00B0
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    1110:	c0 93 b3 00 	sts	0x00B3, r28
    1114:	12 c0       	rjmp	.+36     	; 0x113a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1116:	80 91 b0 00 	lds	r24, 0x00B0
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    1120:	c0 93 b4 00 	sts	0x00B4, r28
    1124:	0a c0       	rjmp	.+20     	; 0x113a <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1126:	c0 38       	cpi	r28, 0x80	; 128
    1128:	d1 05       	cpc	r29, r1
    112a:	1c f4       	brge	.+6      	; 0x1132 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    112c:	81 2f       	mov	r24, r17
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    1132:	81 2f       	mov	r24, r17
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
				}
		}
	}
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    1142:	48 2f       	mov	r20, r24
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	ca 01       	movw	r24, r20
    1148:	88 54       	subi	r24, 0x48	; 72
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	fc 01       	movw	r30, r24
    114e:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    1150:	4c 55       	subi	r20, 0x5C	; 92
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	fa 01       	movw	r30, r20
    1156:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    1158:	88 23       	and	r24, r24
    115a:	c1 f0       	breq	.+48     	; 0x118c <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    115c:	e8 2f       	mov	r30, r24
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	ee 0f       	add	r30, r30
    1162:	ff 1f       	adc	r31, r31
    1164:	ea 57       	subi	r30, 0x7A	; 122
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	a5 91       	lpm	r26, Z+
    116a:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    116c:	66 23       	and	r22, r22
    116e:	41 f4       	brne	.+16     	; 0x1180 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1170:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1172:	f8 94       	cli
		*reg &= ~bit;
    1174:	8c 91       	ld	r24, X
    1176:	20 95       	com	r18
    1178:	82 23       	and	r24, r18
    117a:	8c 93       	st	X, r24
		SREG = oldSREG;
    117c:	9f bf       	out	0x3f, r25	; 63
    117e:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1180:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1182:	f8 94       	cli
		*reg |= bit;
    1184:	8c 91       	ld	r24, X
    1186:	82 2b       	or	r24, r18
    1188:	8c 93       	st	X, r24
		SREG = oldSREG;
    118a:	9f bf       	out	0x3f, r25	; 63
    118c:	08 95       	ret

0000118e <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    118e:	48 2f       	mov	r20, r24
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	ca 01       	movw	r24, r20
    1194:	84 53       	subi	r24, 0x34	; 52
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	fc 01       	movw	r30, r24
    119a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    119c:	ca 01       	movw	r24, r20
    119e:	88 54       	subi	r24, 0x48	; 72
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	fc 01       	movw	r30, r24
    11a4:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    11a6:	4c 55       	subi	r20, 0x5C	; 92
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	fa 01       	movw	r30, r20
    11ac:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11ae:	33 23       	and	r19, r19
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <digitalWrite+0x26>
    11b2:	40 c0       	rjmp	.+128    	; 0x1234 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11b4:	22 23       	and	r18, r18
    11b6:	51 f1       	breq	.+84     	; 0x120c <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    11b8:	23 30       	cpi	r18, 0x03	; 3
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <digitalWrite+0x4a>
    11bc:	24 30       	cpi	r18, 0x04	; 4
    11be:	28 f4       	brcc	.+10     	; 0x11ca <digitalWrite+0x3c>
    11c0:	21 30       	cpi	r18, 0x01	; 1
    11c2:	a1 f0       	breq	.+40     	; 0x11ec <digitalWrite+0x5e>
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	11 f5       	brne	.+68     	; 0x120c <digitalWrite+0x7e>
    11c8:	14 c0       	rjmp	.+40     	; 0x11f2 <digitalWrite+0x64>
    11ca:	26 30       	cpi	r18, 0x06	; 6
    11cc:	b1 f0       	breq	.+44     	; 0x11fa <digitalWrite+0x6c>
    11ce:	27 30       	cpi	r18, 0x07	; 7
    11d0:	c1 f0       	breq	.+48     	; 0x1202 <digitalWrite+0x74>
    11d2:	24 30       	cpi	r18, 0x04	; 4
    11d4:	d9 f4       	brne	.+54     	; 0x120c <digitalWrite+0x7e>
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    11d8:	80 91 80 00 	lds	r24, 0x0080
    11dc:	8f 77       	andi	r24, 0x7F	; 127
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11e0:	80 91 80 00 	lds	r24, 0x0080
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	80 93 80 00 	sts	0x0080, r24
    11ea:	10 c0       	rjmp	.+32     	; 0x120c <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    11ec:	84 b5       	in	r24, 0x24	; 36
    11ee:	8f 77       	andi	r24, 0x7F	; 127
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    11f2:	84 b5       	in	r24, 0x24	; 36
    11f4:	8f 7d       	andi	r24, 0xDF	; 223
    11f6:	84 bd       	out	0x24, r24	; 36
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11fa:	80 91 b0 00 	lds	r24, 0x00B0
    11fe:	8f 77       	andi	r24, 0x7F	; 127
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1202:	80 91 b0 00 	lds	r24, 0x00B0
    1206:	8f 7d       	andi	r24, 0xDF	; 223
    1208:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    120c:	e3 2f       	mov	r30, r19
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	e0 57       	subi	r30, 0x70	; 112
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	a5 91       	lpm	r26, Z+
    121a:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    121c:	2f b7       	in	r18, 0x3f	; 63
	cli();
    121e:	f8 94       	cli

	if (val == LOW) {
    1220:	66 23       	and	r22, r22
    1222:	21 f4       	brne	.+8      	; 0x122c <digitalWrite+0x9e>
		*out &= ~bit;
    1224:	8c 91       	ld	r24, X
    1226:	90 95       	com	r25
    1228:	89 23       	and	r24, r25
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    122c:	8c 91       	ld	r24, X
    122e:	89 2b       	or	r24, r25
    1230:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1232:	2f bf       	out	0x3f, r18	; 63
    1234:	08 95       	ret

00001236 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1236:	68 2f       	mov	r22, r24
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	cb 01       	movw	r24, r22
    123c:	84 53       	subi	r24, 0x34	; 52
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	fc 01       	movw	r30, r24
    1242:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1244:	cb 01       	movw	r24, r22
    1246:	88 54       	subi	r24, 0x48	; 72
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	fc 01       	movw	r30, r24
    124c:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    124e:	6c 55       	subi	r22, 0x5C	; 92
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	fb 01       	movw	r30, r22
    1254:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    1256:	99 23       	and	r25, r25
    1258:	19 f4       	brne	.+6      	; 0x1260 <digitalRead+0x2a>
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3c c0       	rjmp	.+120    	; 0x12d8 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1260:	22 23       	and	r18, r18
    1262:	51 f1       	breq	.+84     	; 0x12b8 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1264:	23 30       	cpi	r18, 0x03	; 3
    1266:	71 f0       	breq	.+28     	; 0x1284 <digitalRead+0x4e>
    1268:	24 30       	cpi	r18, 0x04	; 4
    126a:	28 f4       	brcc	.+10     	; 0x1276 <digitalRead+0x40>
    126c:	21 30       	cpi	r18, 0x01	; 1
    126e:	a1 f0       	breq	.+40     	; 0x1298 <digitalRead+0x62>
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	11 f5       	brne	.+68     	; 0x12b8 <digitalRead+0x82>
    1274:	14 c0       	rjmp	.+40     	; 0x129e <digitalRead+0x68>
    1276:	26 30       	cpi	r18, 0x06	; 6
    1278:	b1 f0       	breq	.+44     	; 0x12a6 <digitalRead+0x70>
    127a:	27 30       	cpi	r18, 0x07	; 7
    127c:	c1 f0       	breq	.+48     	; 0x12ae <digitalRead+0x78>
    127e:	24 30       	cpi	r18, 0x04	; 4
    1280:	d9 f4       	brne	.+54     	; 0x12b8 <digitalRead+0x82>
    1282:	04 c0       	rjmp	.+8      	; 0x128c <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1284:	80 91 80 00 	lds	r24, 0x0080
    1288:	8f 77       	andi	r24, 0x7F	; 127
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    128c:	80 91 80 00 	lds	r24, 0x0080
    1290:	8f 7d       	andi	r24, 0xDF	; 223
    1292:	80 93 80 00 	sts	0x0080, r24
    1296:	10 c0       	rjmp	.+32     	; 0x12b8 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1298:	84 b5       	in	r24, 0x24	; 36
    129a:	8f 77       	andi	r24, 0x7F	; 127
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    129e:	84 b5       	in	r24, 0x24	; 36
    12a0:	8f 7d       	andi	r24, 0xDF	; 223
    12a2:	84 bd       	out	0x24, r24	; 36
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12a6:	80 91 b0 00 	lds	r24, 0x00B0
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    12ae:	80 91 b0 00 	lds	r24, 0x00B0
    12b2:	8f 7d       	andi	r24, 0xDF	; 223
    12b4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    12b8:	89 2f       	mov	r24, r25
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	86 56       	subi	r24, 0x66	; 102
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	fc 01       	movw	r30, r24
    12c6:	a5 91       	lpm	r26, Z+
    12c8:	b4 91       	lpm	r27, Z+
    12ca:	8c 91       	ld	r24, X
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	84 23       	and	r24, r20
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <digitalRead+0xa2>
    12d4:	21 e0       	ldi	r18, 0x01	; 1
    12d6:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    12d8:	c9 01       	movw	r24, r18
    12da:	08 95       	ret

000012dc <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	e8 2e       	mov	r14, r24
    12f0:	f6 2e       	mov	r15, r22
    12f2:	b4 2e       	mov	r11, r20
    12f4:	c7 e0       	ldi	r28, 0x07	; 7
    12f6:	d0 e0       	ldi	r29, 0x00	; 0
    12f8:	02 2f       	mov	r16, r18
    12fa:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    12fc:	87 e0       	ldi	r24, 0x07	; 7
    12fe:	c8 2e       	mov	r12, r24
    1300:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    1302:	bb 20       	and	r11, r11
    1304:	59 f4       	brne	.+22     	; 0x131c <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    1306:	b6 01       	movw	r22, r12
    1308:	6c 1b       	sub	r22, r28
    130a:	7d 0b       	sbc	r23, r29
    130c:	c8 01       	movw	r24, r16
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <shiftOut+0x38>
    1310:	95 95       	asr	r25
    1312:	87 95       	ror	r24
    1314:	6a 95       	dec	r22
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <shiftOut+0x34>
    1318:	bc 01       	movw	r22, r24
    131a:	07 c0       	rjmp	.+14     	; 0x132a <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    131c:	b8 01       	movw	r22, r16
    131e:	0c 2e       	mov	r0, r28
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <shiftOut+0x4a>
    1322:	75 95       	asr	r23
    1324:	67 95       	ror	r22
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <shiftOut+0x46>
    132a:	61 70       	andi	r22, 0x01	; 1
    132c:	8e 2d       	mov	r24, r14
    132e:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    1332:	8f 2d       	mov	r24, r15
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
		digitalWrite(clockPin, LOW);		
    133a:	8f 2d       	mov	r24, r15
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	0e 94 c7 08 	call	0x118e	; 0x118e <digitalWrite>
    1342:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	cf 3f       	cpi	r28, 0xFF	; 255
    1348:	d9 07       	cpc	r29, r25
    134a:	d9 f6       	brne	.-74     	; 0x1302 <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	bf 90       	pop	r11
    135e:	08 95       	ret

00001360 <__subsf3>:
    1360:	50 58       	subi	r21, 0x80	; 128

00001362 <__addsf3>:
    1362:	bb 27       	eor	r27, r27
    1364:	aa 27       	eor	r26, r26
    1366:	0e d0       	rcall	.+28     	; 0x1384 <__addsf3x>
    1368:	78 c1       	rjmp	.+752    	; 0x165a <__fp_round>
    136a:	41 d1       	rcall	.+642    	; 0x15ee <__fp_pscA>
    136c:	30 f0       	brcs	.+12     	; 0x137a <__addsf3+0x18>
    136e:	46 d1       	rcall	.+652    	; 0x15fc <__fp_pscB>
    1370:	20 f0       	brcs	.+8      	; 0x137a <__addsf3+0x18>
    1372:	31 f4       	brne	.+12     	; 0x1380 <__addsf3+0x1e>
    1374:	9f 3f       	cpi	r25, 0xFF	; 255
    1376:	11 f4       	brne	.+4      	; 0x137c <__addsf3+0x1a>
    1378:	1e f4       	brtc	.+6      	; 0x1380 <__addsf3+0x1e>
    137a:	36 c1       	rjmp	.+620    	; 0x15e8 <__fp_nan>
    137c:	0e f4       	brtc	.+2      	; 0x1380 <__addsf3+0x1e>
    137e:	e0 95       	com	r30
    1380:	e7 fb       	bst	r30, 7
    1382:	2c c1       	rjmp	.+600    	; 0x15dc <__fp_inf>

00001384 <__addsf3x>:
    1384:	e9 2f       	mov	r30, r25
    1386:	8b d1       	rcall	.+790    	; 0x169e <__fp_split3>
    1388:	80 f3       	brcs	.-32     	; 0x136a <__addsf3+0x8>
    138a:	ba 17       	cp	r27, r26
    138c:	62 07       	cpc	r22, r18
    138e:	73 07       	cpc	r23, r19
    1390:	84 07       	cpc	r24, r20
    1392:	95 07       	cpc	r25, r21
    1394:	18 f0       	brcs	.+6      	; 0x139c <__addsf3x+0x18>
    1396:	71 f4       	brne	.+28     	; 0x13b4 <__addsf3x+0x30>
    1398:	9e f5       	brtc	.+102    	; 0x1400 <__addsf3x+0x7c>
    139a:	a3 c1       	rjmp	.+838    	; 0x16e2 <__fp_zero>
    139c:	0e f4       	brtc	.+2      	; 0x13a0 <__addsf3x+0x1c>
    139e:	e0 95       	com	r30
    13a0:	0b 2e       	mov	r0, r27
    13a2:	ba 2f       	mov	r27, r26
    13a4:	a0 2d       	mov	r26, r0
    13a6:	0b 01       	movw	r0, r22
    13a8:	b9 01       	movw	r22, r18
    13aa:	90 01       	movw	r18, r0
    13ac:	0c 01       	movw	r0, r24
    13ae:	ca 01       	movw	r24, r20
    13b0:	a0 01       	movw	r20, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	ff 27       	eor	r31, r31
    13b6:	59 1b       	sub	r21, r25
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <__addsf3x+0x5c>
    13ba:	59 3f       	cpi	r21, 0xF9	; 249
    13bc:	50 f4       	brcc	.+20     	; 0x13d2 <__addsf3x+0x4e>
    13be:	50 3e       	cpi	r21, 0xE0	; 224
    13c0:	68 f1       	brcs	.+90     	; 0x141c <__addsf3x+0x98>
    13c2:	1a 16       	cp	r1, r26
    13c4:	f0 40       	sbci	r31, 0x00	; 0
    13c6:	a2 2f       	mov	r26, r18
    13c8:	23 2f       	mov	r18, r19
    13ca:	34 2f       	mov	r19, r20
    13cc:	44 27       	eor	r20, r20
    13ce:	58 5f       	subi	r21, 0xF8	; 248
    13d0:	f3 cf       	rjmp	.-26     	; 0x13b8 <__addsf3x+0x34>
    13d2:	46 95       	lsr	r20
    13d4:	37 95       	ror	r19
    13d6:	27 95       	ror	r18
    13d8:	a7 95       	ror	r26
    13da:	f0 40       	sbci	r31, 0x00	; 0
    13dc:	53 95       	inc	r21
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <__addsf3x+0x4e>
    13e0:	7e f4       	brtc	.+30     	; 0x1400 <__addsf3x+0x7c>
    13e2:	1f 16       	cp	r1, r31
    13e4:	ba 0b       	sbc	r27, r26
    13e6:	62 0b       	sbc	r22, r18
    13e8:	73 0b       	sbc	r23, r19
    13ea:	84 0b       	sbc	r24, r20
    13ec:	ba f0       	brmi	.+46     	; 0x141c <__addsf3x+0x98>
    13ee:	91 50       	subi	r25, 0x01	; 1
    13f0:	a1 f0       	breq	.+40     	; 0x141a <__addsf3x+0x96>
    13f2:	ff 0f       	add	r31, r31
    13f4:	bb 1f       	adc	r27, r27
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	c2 f7       	brpl	.-16     	; 0x13ee <__addsf3x+0x6a>
    13fe:	0e c0       	rjmp	.+28     	; 0x141c <__addsf3x+0x98>
    1400:	ba 0f       	add	r27, r26
    1402:	62 1f       	adc	r22, r18
    1404:	73 1f       	adc	r23, r19
    1406:	84 1f       	adc	r24, r20
    1408:	48 f4       	brcc	.+18     	; 0x141c <__addsf3x+0x98>
    140a:	87 95       	ror	r24
    140c:	77 95       	ror	r23
    140e:	67 95       	ror	r22
    1410:	b7 95       	ror	r27
    1412:	f7 95       	ror	r31
    1414:	9e 3f       	cpi	r25, 0xFE	; 254
    1416:	08 f0       	brcs	.+2      	; 0x141a <__addsf3x+0x96>
    1418:	b3 cf       	rjmp	.-154    	; 0x1380 <__addsf3+0x1e>
    141a:	93 95       	inc	r25
    141c:	88 0f       	add	r24, r24
    141e:	08 f0       	brcs	.+2      	; 0x1422 <__addsf3x+0x9e>
    1420:	99 27       	eor	r25, r25
    1422:	ee 0f       	add	r30, r30
    1424:	97 95       	ror	r25
    1426:	87 95       	ror	r24
    1428:	08 95       	ret

0000142a <cos>:
    142a:	f0 d0       	rcall	.+480    	; 0x160c <__fp_rempio2>
    142c:	e3 95       	inc	r30
    142e:	26 c1       	rjmp	.+588    	; 0x167c <__fp_sinus>

00001430 <__divsf3>:
    1430:	0c d0       	rcall	.+24     	; 0x144a <__divsf3x>
    1432:	13 c1       	rjmp	.+550    	; 0x165a <__fp_round>
    1434:	e3 d0       	rcall	.+454    	; 0x15fc <__fp_pscB>
    1436:	40 f0       	brcs	.+16     	; 0x1448 <__divsf3+0x18>
    1438:	da d0       	rcall	.+436    	; 0x15ee <__fp_pscA>
    143a:	30 f0       	brcs	.+12     	; 0x1448 <__divsf3+0x18>
    143c:	21 f4       	brne	.+8      	; 0x1446 <__divsf3+0x16>
    143e:	5f 3f       	cpi	r21, 0xFF	; 255
    1440:	19 f0       	breq	.+6      	; 0x1448 <__divsf3+0x18>
    1442:	cc c0       	rjmp	.+408    	; 0x15dc <__fp_inf>
    1444:	51 11       	cpse	r21, r1
    1446:	4e c1       	rjmp	.+668    	; 0x16e4 <__fp_szero>
    1448:	cf c0       	rjmp	.+414    	; 0x15e8 <__fp_nan>

0000144a <__divsf3x>:
    144a:	29 d1       	rcall	.+594    	; 0x169e <__fp_split3>
    144c:	98 f3       	brcs	.-26     	; 0x1434 <__divsf3+0x4>

0000144e <__divsf3_pse>:
    144e:	99 23       	and	r25, r25
    1450:	c9 f3       	breq	.-14     	; 0x1444 <__divsf3+0x14>
    1452:	55 23       	and	r21, r21
    1454:	b1 f3       	breq	.-20     	; 0x1442 <__divsf3+0x12>
    1456:	95 1b       	sub	r25, r21
    1458:	55 0b       	sbc	r21, r21
    145a:	bb 27       	eor	r27, r27
    145c:	aa 27       	eor	r26, r26
    145e:	62 17       	cp	r22, r18
    1460:	73 07       	cpc	r23, r19
    1462:	84 07       	cpc	r24, r20
    1464:	38 f0       	brcs	.+14     	; 0x1474 <__divsf3_pse+0x26>
    1466:	9f 5f       	subi	r25, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	44 1f       	adc	r20, r20
    1470:	aa 1f       	adc	r26, r26
    1472:	a9 f3       	breq	.-22     	; 0x145e <__divsf3_pse+0x10>
    1474:	33 d0       	rcall	.+102    	; 0x14dc <__divsf3_pse+0x8e>
    1476:	0e 2e       	mov	r0, r30
    1478:	3a f0       	brmi	.+14     	; 0x1488 <__divsf3_pse+0x3a>
    147a:	e0 e8       	ldi	r30, 0x80	; 128
    147c:	30 d0       	rcall	.+96     	; 0x14de <__divsf3_pse+0x90>
    147e:	91 50       	subi	r25, 0x01	; 1
    1480:	50 40       	sbci	r21, 0x00	; 0
    1482:	e6 95       	lsr	r30
    1484:	00 1c       	adc	r0, r0
    1486:	ca f7       	brpl	.-14     	; 0x147a <__divsf3_pse+0x2c>
    1488:	29 d0       	rcall	.+82     	; 0x14dc <__divsf3_pse+0x8e>
    148a:	fe 2f       	mov	r31, r30
    148c:	27 d0       	rcall	.+78     	; 0x14dc <__divsf3_pse+0x8e>
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	88 1f       	adc	r24, r24
    1494:	bb 1f       	adc	r27, r27
    1496:	26 17       	cp	r18, r22
    1498:	37 07       	cpc	r19, r23
    149a:	48 07       	cpc	r20, r24
    149c:	ab 07       	cpc	r26, r27
    149e:	b0 e8       	ldi	r27, 0x80	; 128
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <__divsf3_pse+0x56>
    14a2:	bb 0b       	sbc	r27, r27
    14a4:	80 2d       	mov	r24, r0
    14a6:	bf 01       	movw	r22, r30
    14a8:	ff 27       	eor	r31, r31
    14aa:	93 58       	subi	r25, 0x83	; 131
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	2a f0       	brmi	.+10     	; 0x14ba <__divsf3_pse+0x6c>
    14b0:	9e 3f       	cpi	r25, 0xFE	; 254
    14b2:	51 05       	cpc	r21, r1
    14b4:	68 f0       	brcs	.+26     	; 0x14d0 <__divsf3_pse+0x82>
    14b6:	92 c0       	rjmp	.+292    	; 0x15dc <__fp_inf>
    14b8:	15 c1       	rjmp	.+554    	; 0x16e4 <__fp_szero>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	ec f3       	brlt	.-6      	; 0x14b8 <__divsf3_pse+0x6a>
    14be:	98 3e       	cpi	r25, 0xE8	; 232
    14c0:	dc f3       	brlt	.-10     	; 0x14b8 <__divsf3_pse+0x6a>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f7 95       	ror	r31
    14cc:	9f 5f       	subi	r25, 0xFF	; 255
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__divsf3_pse+0x74>
    14d0:	88 0f       	add	r24, r24
    14d2:	91 1d       	adc	r25, r1
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	97 f9       	bld	r25, 7
    14da:	08 95       	ret
    14dc:	e1 e0       	ldi	r30, 0x01	; 1
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	bb 1f       	adc	r27, r27
    14e6:	62 17       	cp	r22, r18
    14e8:	73 07       	cpc	r23, r19
    14ea:	84 07       	cpc	r24, r20
    14ec:	ba 07       	cpc	r27, r26
    14ee:	20 f0       	brcs	.+8      	; 0x14f8 <__divsf3_pse+0xaa>
    14f0:	62 1b       	sub	r22, r18
    14f2:	73 0b       	sbc	r23, r19
    14f4:	84 0b       	sbc	r24, r20
    14f6:	ba 0b       	sbc	r27, r26
    14f8:	ee 1f       	adc	r30, r30
    14fa:	88 f7       	brcc	.-30     	; 0x14de <__divsf3_pse+0x90>
    14fc:	e0 95       	com	r30
    14fe:	08 95       	ret

00001500 <__fixsfsi>:
    1500:	04 d0       	rcall	.+8      	; 0x150a <__fixunssfsi>
    1502:	68 94       	set
    1504:	b1 11       	cpse	r27, r1
    1506:	ee c0       	rjmp	.+476    	; 0x16e4 <__fp_szero>
    1508:	08 95       	ret

0000150a <__fixunssfsi>:
    150a:	d1 d0       	rcall	.+418    	; 0x16ae <__fp_splitA>
    150c:	88 f0       	brcs	.+34     	; 0x1530 <__fixunssfsi+0x26>
    150e:	9f 57       	subi	r25, 0x7F	; 127
    1510:	90 f0       	brcs	.+36     	; 0x1536 <__fixunssfsi+0x2c>
    1512:	b9 2f       	mov	r27, r25
    1514:	99 27       	eor	r25, r25
    1516:	b7 51       	subi	r27, 0x17	; 23
    1518:	a0 f0       	brcs	.+40     	; 0x1542 <__fixunssfsi+0x38>
    151a:	d1 f0       	breq	.+52     	; 0x1550 <__fixunssfsi+0x46>
    151c:	66 0f       	add	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	1a f0       	brmi	.+6      	; 0x152c <__fixunssfsi+0x22>
    1526:	ba 95       	dec	r27
    1528:	c9 f7       	brne	.-14     	; 0x151c <__fixunssfsi+0x12>
    152a:	12 c0       	rjmp	.+36     	; 0x1550 <__fixunssfsi+0x46>
    152c:	b1 30       	cpi	r27, 0x01	; 1
    152e:	81 f0       	breq	.+32     	; 0x1550 <__fixunssfsi+0x46>
    1530:	d8 d0       	rcall	.+432    	; 0x16e2 <__fp_zero>
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	08 95       	ret
    1536:	d5 c0       	rjmp	.+426    	; 0x16e2 <__fp_zero>
    1538:	67 2f       	mov	r22, r23
    153a:	78 2f       	mov	r23, r24
    153c:	88 27       	eor	r24, r24
    153e:	b8 5f       	subi	r27, 0xF8	; 248
    1540:	39 f0       	breq	.+14     	; 0x1550 <__fixunssfsi+0x46>
    1542:	b9 3f       	cpi	r27, 0xF9	; 249
    1544:	cc f3       	brlt	.-14     	; 0x1538 <__fixunssfsi+0x2e>
    1546:	86 95       	lsr	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b3 95       	inc	r27
    154e:	d9 f7       	brne	.-10     	; 0x1546 <__fixunssfsi+0x3c>
    1550:	3e f4       	brtc	.+14     	; 0x1560 <__fixunssfsi+0x56>
    1552:	90 95       	com	r25
    1554:	80 95       	com	r24
    1556:	70 95       	com	r23
    1558:	61 95       	neg	r22
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	08 95       	ret

00001562 <__floatunsisf>:
    1562:	e8 94       	clt
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <__floatsisf+0x12>

00001566 <__floatsisf>:
    1566:	97 fb       	bst	r25, 7
    1568:	3e f4       	brtc	.+14     	; 0x1578 <__floatsisf+0x12>
    156a:	90 95       	com	r25
    156c:	80 95       	com	r24
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	99 23       	and	r25, r25
    157a:	a9 f0       	breq	.+42     	; 0x15a6 <__floatsisf+0x40>
    157c:	f9 2f       	mov	r31, r25
    157e:	96 e9       	ldi	r25, 0x96	; 150
    1580:	bb 27       	eor	r27, r27
    1582:	93 95       	inc	r25
    1584:	f6 95       	lsr	r31
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f1 11       	cpse	r31, r1
    1590:	f8 cf       	rjmp	.-16     	; 0x1582 <__floatsisf+0x1c>
    1592:	fa f4       	brpl	.+62     	; 0x15d2 <__floatsisf+0x6c>
    1594:	bb 0f       	add	r27, r27
    1596:	11 f4       	brne	.+4      	; 0x159c <__floatsisf+0x36>
    1598:	60 ff       	sbrs	r22, 0
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <__floatsisf+0x6c>
    159c:	6f 5f       	subi	r22, 0xFF	; 255
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <__floatsisf+0x6c>
    15a6:	88 23       	and	r24, r24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <__floatsisf+0x48>
    15aa:	96 e9       	ldi	r25, 0x96	; 150
    15ac:	11 c0       	rjmp	.+34     	; 0x15d0 <__floatsisf+0x6a>
    15ae:	77 23       	and	r23, r23
    15b0:	21 f0       	breq	.+8      	; 0x15ba <__floatsisf+0x54>
    15b2:	9e e8       	ldi	r25, 0x8E	; 142
    15b4:	87 2f       	mov	r24, r23
    15b6:	76 2f       	mov	r23, r22
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <__floatsisf+0x5e>
    15ba:	66 23       	and	r22, r22
    15bc:	71 f0       	breq	.+28     	; 0x15da <__floatsisf+0x74>
    15be:	96 e8       	ldi	r25, 0x86	; 134
    15c0:	86 2f       	mov	r24, r22
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	2a f0       	brmi	.+10     	; 0x15d2 <__floatsisf+0x6c>
    15c8:	9a 95       	dec	r25
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	da f7       	brpl	.-10     	; 0x15c8 <__floatsisf+0x62>
    15d2:	88 0f       	add	r24, r24
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	97 f9       	bld	r25, 7
    15da:	08 95       	ret

000015dc <__fp_inf>:
    15dc:	97 f9       	bld	r25, 7
    15de:	9f 67       	ori	r25, 0x7F	; 127
    15e0:	80 e8       	ldi	r24, 0x80	; 128
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	08 95       	ret

000015e8 <__fp_nan>:
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
    15ea:	80 ec       	ldi	r24, 0xC0	; 192
    15ec:	08 95       	ret

000015ee <__fp_pscA>:
    15ee:	00 24       	eor	r0, r0
    15f0:	0a 94       	dec	r0
    15f2:	16 16       	cp	r1, r22
    15f4:	17 06       	cpc	r1, r23
    15f6:	18 06       	cpc	r1, r24
    15f8:	09 06       	cpc	r0, r25
    15fa:	08 95       	ret

000015fc <__fp_pscB>:
    15fc:	00 24       	eor	r0, r0
    15fe:	0a 94       	dec	r0
    1600:	12 16       	cp	r1, r18
    1602:	13 06       	cpc	r1, r19
    1604:	14 06       	cpc	r1, r20
    1606:	05 06       	cpc	r0, r21
    1608:	08 95       	ret
    160a:	ee cf       	rjmp	.-36     	; 0x15e8 <__fp_nan>

0000160c <__fp_rempio2>:
    160c:	50 d0       	rcall	.+160    	; 0x16ae <__fp_splitA>
    160e:	e8 f3       	brcs	.-6      	; 0x160a <__fp_pscB+0xe>
    1610:	e8 94       	clt
    1612:	e0 e0       	ldi	r30, 0x00	; 0
    1614:	bb 27       	eor	r27, r27
    1616:	9f 57       	subi	r25, 0x7F	; 127
    1618:	f0 f0       	brcs	.+60     	; 0x1656 <__fp_rempio2+0x4a>
    161a:	2a ed       	ldi	r18, 0xDA	; 218
    161c:	3f e0       	ldi	r19, 0x0F	; 15
    161e:	49 ec       	ldi	r20, 0xC9	; 201
    1620:	06 c0       	rjmp	.+12     	; 0x162e <__fp_rempio2+0x22>
    1622:	ee 0f       	add	r30, r30
    1624:	bb 0f       	add	r27, r27
    1626:	66 1f       	adc	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	28 f0       	brcs	.+10     	; 0x1638 <__fp_rempio2+0x2c>
    162e:	b2 3a       	cpi	r27, 0xA2	; 162
    1630:	62 07       	cpc	r22, r18
    1632:	73 07       	cpc	r23, r19
    1634:	84 07       	cpc	r24, r20
    1636:	28 f0       	brcs	.+10     	; 0x1642 <__fp_rempio2+0x36>
    1638:	b2 5a       	subi	r27, 0xA2	; 162
    163a:	62 0b       	sbc	r22, r18
    163c:	73 0b       	sbc	r23, r19
    163e:	84 0b       	sbc	r24, r20
    1640:	e3 95       	inc	r30
    1642:	9a 95       	dec	r25
    1644:	72 f7       	brpl	.-36     	; 0x1622 <__fp_rempio2+0x16>
    1646:	80 38       	cpi	r24, 0x80	; 128
    1648:	30 f4       	brcc	.+12     	; 0x1656 <__fp_rempio2+0x4a>
    164a:	9a 95       	dec	r25
    164c:	bb 0f       	add	r27, r27
    164e:	66 1f       	adc	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	d2 f7       	brpl	.-12     	; 0x164a <__fp_rempio2+0x3e>
    1656:	90 48       	sbci	r25, 0x80	; 128
    1658:	d8 c0       	rjmp	.+432    	; 0x180a <__fp_mpack_finite>

0000165a <__fp_round>:
    165a:	09 2e       	mov	r0, r25
    165c:	03 94       	inc	r0
    165e:	00 0c       	add	r0, r0
    1660:	11 f4       	brne	.+4      	; 0x1666 <__fp_round+0xc>
    1662:	88 23       	and	r24, r24
    1664:	52 f0       	brmi	.+20     	; 0x167a <__fp_round+0x20>
    1666:	bb 0f       	add	r27, r27
    1668:	40 f4       	brcc	.+16     	; 0x167a <__fp_round+0x20>
    166a:	bf 2b       	or	r27, r31
    166c:	11 f4       	brne	.+4      	; 0x1672 <__fp_round+0x18>
    166e:	60 ff       	sbrs	r22, 0
    1670:	04 c0       	rjmp	.+8      	; 0x167a <__fp_round+0x20>
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__fp_sinus>:
    167c:	ef 93       	push	r30
    167e:	e0 ff       	sbrs	r30, 0
    1680:	06 c0       	rjmp	.+12     	; 0x168e <__fp_sinus+0x12>
    1682:	a2 ea       	ldi	r26, 0xA2	; 162
    1684:	2a ed       	ldi	r18, 0xDA	; 218
    1686:	3f e0       	ldi	r19, 0x0F	; 15
    1688:	49 ec       	ldi	r20, 0xC9	; 201
    168a:	5f eb       	ldi	r21, 0xBF	; 191
    168c:	7b de       	rcall	.-778    	; 0x1384 <__addsf3x>
    168e:	e5 df       	rcall	.-54     	; 0x165a <__fp_round>
    1690:	0f 90       	pop	r0
    1692:	03 94       	inc	r0
    1694:	01 fc       	sbrc	r0, 1
    1696:	90 58       	subi	r25, 0x80	; 128
    1698:	e8 e6       	ldi	r30, 0x68	; 104
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	c2 c0       	rjmp	.+388    	; 0x1822 <__fp_powsodd>

0000169e <__fp_split3>:
    169e:	57 fd       	sbrc	r21, 7
    16a0:	90 58       	subi	r25, 0x80	; 128
    16a2:	44 0f       	add	r20, r20
    16a4:	55 1f       	adc	r21, r21
    16a6:	59 f0       	breq	.+22     	; 0x16be <__fp_splitA+0x10>
    16a8:	5f 3f       	cpi	r21, 0xFF	; 255
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <__fp_splitA+0x1a>
    16ac:	47 95       	ror	r20

000016ae <__fp_splitA>:
    16ae:	88 0f       	add	r24, r24
    16b0:	97 fb       	bst	r25, 7
    16b2:	99 1f       	adc	r25, r25
    16b4:	61 f0       	breq	.+24     	; 0x16ce <__fp_splitA+0x20>
    16b6:	9f 3f       	cpi	r25, 0xFF	; 255
    16b8:	79 f0       	breq	.+30     	; 0x16d8 <__fp_splitA+0x2a>
    16ba:	87 95       	ror	r24
    16bc:	08 95       	ret
    16be:	12 16       	cp	r1, r18
    16c0:	13 06       	cpc	r1, r19
    16c2:	14 06       	cpc	r1, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	f2 cf       	rjmp	.-28     	; 0x16ac <__fp_split3+0xe>
    16c8:	46 95       	lsr	r20
    16ca:	f1 df       	rcall	.-30     	; 0x16ae <__fp_splitA>
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <__fp_splitA+0x30>
    16ce:	16 16       	cp	r1, r22
    16d0:	17 06       	cpc	r1, r23
    16d2:	18 06       	cpc	r1, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	f1 cf       	rjmp	.-30     	; 0x16ba <__fp_splitA+0xc>
    16d8:	86 95       	lsr	r24
    16da:	71 05       	cpc	r23, r1
    16dc:	61 05       	cpc	r22, r1
    16de:	08 94       	sec
    16e0:	08 95       	ret

000016e2 <__fp_zero>:
    16e2:	e8 94       	clt

000016e4 <__fp_szero>:
    16e4:	bb 27       	eor	r27, r27
    16e6:	66 27       	eor	r22, r22
    16e8:	77 27       	eor	r23, r23
    16ea:	cb 01       	movw	r24, r22
    16ec:	97 f9       	bld	r25, 7
    16ee:	08 95       	ret

000016f0 <__gesf2>:
    16f0:	66 d0       	rcall	.+204    	; 0x17be <__fp_cmp>
    16f2:	08 f4       	brcc	.+2      	; 0x16f6 <__gesf2+0x6>
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	08 95       	ret

000016f8 <__mulsf3>:
    16f8:	0b d0       	rcall	.+22     	; 0x1710 <__mulsf3x>
    16fa:	af cf       	rjmp	.-162    	; 0x165a <__fp_round>
    16fc:	78 df       	rcall	.-272    	; 0x15ee <__fp_pscA>
    16fe:	28 f0       	brcs	.+10     	; 0x170a <__mulsf3+0x12>
    1700:	7d df       	rcall	.-262    	; 0x15fc <__fp_pscB>
    1702:	18 f0       	brcs	.+6      	; 0x170a <__mulsf3+0x12>
    1704:	95 23       	and	r25, r21
    1706:	09 f0       	breq	.+2      	; 0x170a <__mulsf3+0x12>
    1708:	69 cf       	rjmp	.-302    	; 0x15dc <__fp_inf>
    170a:	6e cf       	rjmp	.-292    	; 0x15e8 <__fp_nan>
    170c:	11 24       	eor	r1, r1
    170e:	ea cf       	rjmp	.-44     	; 0x16e4 <__fp_szero>

00001710 <__mulsf3x>:
    1710:	c6 df       	rcall	.-116    	; 0x169e <__fp_split3>
    1712:	a0 f3       	brcs	.-24     	; 0x16fc <__mulsf3+0x4>

00001714 <__mulsf3_pse>:
    1714:	95 9f       	mul	r25, r21
    1716:	d1 f3       	breq	.-12     	; 0x170c <__mulsf3+0x14>
    1718:	95 0f       	add	r25, r21
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	55 1f       	adc	r21, r21
    171e:	62 9f       	mul	r22, r18
    1720:	f0 01       	movw	r30, r0
    1722:	72 9f       	mul	r23, r18
    1724:	bb 27       	eor	r27, r27
    1726:	f0 0d       	add	r31, r0
    1728:	b1 1d       	adc	r27, r1
    172a:	63 9f       	mul	r22, r19
    172c:	aa 27       	eor	r26, r26
    172e:	f0 0d       	add	r31, r0
    1730:	b1 1d       	adc	r27, r1
    1732:	aa 1f       	adc	r26, r26
    1734:	64 9f       	mul	r22, r20
    1736:	66 27       	eor	r22, r22
    1738:	b0 0d       	add	r27, r0
    173a:	a1 1d       	adc	r26, r1
    173c:	66 1f       	adc	r22, r22
    173e:	82 9f       	mul	r24, r18
    1740:	22 27       	eor	r18, r18
    1742:	b0 0d       	add	r27, r0
    1744:	a1 1d       	adc	r26, r1
    1746:	62 1f       	adc	r22, r18
    1748:	73 9f       	mul	r23, r19
    174a:	b0 0d       	add	r27, r0
    174c:	a1 1d       	adc	r26, r1
    174e:	62 1f       	adc	r22, r18
    1750:	83 9f       	mul	r24, r19
    1752:	a0 0d       	add	r26, r0
    1754:	61 1d       	adc	r22, r1
    1756:	22 1f       	adc	r18, r18
    1758:	74 9f       	mul	r23, r20
    175a:	33 27       	eor	r19, r19
    175c:	a0 0d       	add	r26, r0
    175e:	61 1d       	adc	r22, r1
    1760:	23 1f       	adc	r18, r19
    1762:	84 9f       	mul	r24, r20
    1764:	60 0d       	add	r22, r0
    1766:	21 1d       	adc	r18, r1
    1768:	82 2f       	mov	r24, r18
    176a:	76 2f       	mov	r23, r22
    176c:	6a 2f       	mov	r22, r26
    176e:	11 24       	eor	r1, r1
    1770:	9f 57       	subi	r25, 0x7F	; 127
    1772:	50 40       	sbci	r21, 0x00	; 0
    1774:	8a f0       	brmi	.+34     	; 0x1798 <__mulsf3_pse+0x84>
    1776:	e1 f0       	breq	.+56     	; 0x17b0 <__mulsf3_pse+0x9c>
    1778:	88 23       	and	r24, r24
    177a:	4a f0       	brmi	.+18     	; 0x178e <__mulsf3_pse+0x7a>
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	bb 1f       	adc	r27, r27
    1782:	66 1f       	adc	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	91 50       	subi	r25, 0x01	; 1
    178a:	50 40       	sbci	r21, 0x00	; 0
    178c:	a9 f7       	brne	.-22     	; 0x1778 <__mulsf3_pse+0x64>
    178e:	9e 3f       	cpi	r25, 0xFE	; 254
    1790:	51 05       	cpc	r21, r1
    1792:	70 f0       	brcs	.+28     	; 0x17b0 <__mulsf3_pse+0x9c>
    1794:	23 cf       	rjmp	.-442    	; 0x15dc <__fp_inf>
    1796:	a6 cf       	rjmp	.-180    	; 0x16e4 <__fp_szero>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	ec f3       	brlt	.-6      	; 0x1796 <__mulsf3_pse+0x82>
    179c:	98 3e       	cpi	r25, 0xE8	; 232
    179e:	dc f3       	brlt	.-10     	; 0x1796 <__mulsf3_pse+0x82>
    17a0:	86 95       	lsr	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f7 95       	ror	r31
    17aa:	e7 95       	ror	r30
    17ac:	9f 5f       	subi	r25, 0xFF	; 255
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <__mulsf3_pse+0x8c>
    17b0:	fe 2b       	or	r31, r30
    17b2:	88 0f       	add	r24, r24
    17b4:	91 1d       	adc	r25, r1
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <__fp_cmp>:
    17be:	99 0f       	add	r25, r25
    17c0:	00 08       	sbc	r0, r0
    17c2:	55 0f       	add	r21, r21
    17c4:	aa 0b       	sbc	r26, r26
    17c6:	e0 e8       	ldi	r30, 0x80	; 128
    17c8:	fe ef       	ldi	r31, 0xFE	; 254
    17ca:	16 16       	cp	r1, r22
    17cc:	17 06       	cpc	r1, r23
    17ce:	e8 07       	cpc	r30, r24
    17d0:	f9 07       	cpc	r31, r25
    17d2:	c0 f0       	brcs	.+48     	; 0x1804 <__fp_cmp+0x46>
    17d4:	12 16       	cp	r1, r18
    17d6:	13 06       	cpc	r1, r19
    17d8:	e4 07       	cpc	r30, r20
    17da:	f5 07       	cpc	r31, r21
    17dc:	98 f0       	brcs	.+38     	; 0x1804 <__fp_cmp+0x46>
    17de:	62 1b       	sub	r22, r18
    17e0:	73 0b       	sbc	r23, r19
    17e2:	84 0b       	sbc	r24, r20
    17e4:	95 0b       	sbc	r25, r21
    17e6:	39 f4       	brne	.+14     	; 0x17f6 <__fp_cmp+0x38>
    17e8:	0a 26       	eor	r0, r26
    17ea:	61 f0       	breq	.+24     	; 0x1804 <__fp_cmp+0x46>
    17ec:	23 2b       	or	r18, r19
    17ee:	24 2b       	or	r18, r20
    17f0:	25 2b       	or	r18, r21
    17f2:	21 f4       	brne	.+8      	; 0x17fc <__fp_cmp+0x3e>
    17f4:	08 95       	ret
    17f6:	0a 26       	eor	r0, r26
    17f8:	09 f4       	brne	.+2      	; 0x17fc <__fp_cmp+0x3e>
    17fa:	a1 40       	sbci	r26, 0x01	; 1
    17fc:	a6 95       	lsr	r26
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	81 1d       	adc	r24, r1
    1802:	81 1d       	adc	r24, r1
    1804:	08 95       	ret

00001806 <__fp_mpack>:
    1806:	9f 3f       	cpi	r25, 0xFF	; 255
    1808:	31 f0       	breq	.+12     	; 0x1816 <__fp_mpack_finite+0xc>

0000180a <__fp_mpack_finite>:
    180a:	91 50       	subi	r25, 0x01	; 1
    180c:	20 f4       	brcc	.+8      	; 0x1816 <__fp_mpack_finite+0xc>
    180e:	87 95       	ror	r24
    1810:	77 95       	ror	r23
    1812:	67 95       	ror	r22
    1814:	b7 95       	ror	r27
    1816:	88 0f       	add	r24, r24
    1818:	91 1d       	adc	r25, r1
    181a:	96 95       	lsr	r25
    181c:	87 95       	ror	r24
    181e:	97 f9       	bld	r25, 7
    1820:	08 95       	ret

00001822 <__fp_powsodd>:
    1822:	9f 93       	push	r25
    1824:	8f 93       	push	r24
    1826:	7f 93       	push	r23
    1828:	6f 93       	push	r22
    182a:	ff 93       	push	r31
    182c:	ef 93       	push	r30
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	62 df       	rcall	.-316    	; 0x16f8 <__mulsf3>
    1834:	ef 91       	pop	r30
    1836:	ff 91       	pop	r31
    1838:	05 d0       	rcall	.+10     	; 0x1844 <__fp_powser>
    183a:	2f 91       	pop	r18
    183c:	3f 91       	pop	r19
    183e:	4f 91       	pop	r20
    1840:	5f 91       	pop	r21
    1842:	5a cf       	rjmp	.-332    	; 0x16f8 <__mulsf3>

00001844 <__fp_powser>:
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	1f 93       	push	r17
    184a:	0f 93       	push	r16
    184c:	ff 92       	push	r15
    184e:	ef 92       	push	r14
    1850:	df 92       	push	r13
    1852:	7b 01       	movw	r14, r22
    1854:	8c 01       	movw	r16, r24
    1856:	68 94       	set
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <__fp_powser+0x20>
    185a:	da 2e       	mov	r13, r26
    185c:	ef 01       	movw	r28, r30
    185e:	58 df       	rcall	.-336    	; 0x1710 <__mulsf3x>
    1860:	fe 01       	movw	r30, r28
    1862:	e8 94       	clt
    1864:	a5 91       	lpm	r26, Z+
    1866:	25 91       	lpm	r18, Z+
    1868:	35 91       	lpm	r19, Z+
    186a:	45 91       	lpm	r20, Z+
    186c:	55 91       	lpm	r21, Z+
    186e:	ae f3       	brts	.-22     	; 0x185a <__fp_powser+0x16>
    1870:	ef 01       	movw	r28, r30
    1872:	88 dd       	rcall	.-1264   	; 0x1384 <__addsf3x>
    1874:	fe 01       	movw	r30, r28
    1876:	97 01       	movw	r18, r14
    1878:	a8 01       	movw	r20, r16
    187a:	da 94       	dec	r13
    187c:	79 f7       	brne	.-34     	; 0x185c <__fp_powser+0x18>
    187e:	df 90       	pop	r13
    1880:	ef 90       	pop	r14
    1882:	ff 90       	pop	r15
    1884:	0f 91       	pop	r16
    1886:	1f 91       	pop	r17
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <__mulsi3>:
    188e:	62 9f       	mul	r22, r18
    1890:	d0 01       	movw	r26, r0
    1892:	73 9f       	mul	r23, r19
    1894:	f0 01       	movw	r30, r0
    1896:	82 9f       	mul	r24, r18
    1898:	e0 0d       	add	r30, r0
    189a:	f1 1d       	adc	r31, r1
    189c:	64 9f       	mul	r22, r20
    189e:	e0 0d       	add	r30, r0
    18a0:	f1 1d       	adc	r31, r1
    18a2:	92 9f       	mul	r25, r18
    18a4:	f0 0d       	add	r31, r0
    18a6:	83 9f       	mul	r24, r19
    18a8:	f0 0d       	add	r31, r0
    18aa:	74 9f       	mul	r23, r20
    18ac:	f0 0d       	add	r31, r0
    18ae:	65 9f       	mul	r22, r21
    18b0:	f0 0d       	add	r31, r0
    18b2:	99 27       	eor	r25, r25
    18b4:	72 9f       	mul	r23, r18
    18b6:	b0 0d       	add	r27, r0
    18b8:	e1 1d       	adc	r30, r1
    18ba:	f9 1f       	adc	r31, r25
    18bc:	63 9f       	mul	r22, r19
    18be:	b0 0d       	add	r27, r0
    18c0:	e1 1d       	adc	r30, r1
    18c2:	f9 1f       	adc	r31, r25
    18c4:	bd 01       	movw	r22, r26
    18c6:	cf 01       	movw	r24, r30
    18c8:	11 24       	eor	r1, r1
    18ca:	08 95       	ret

000018cc <__divmodhi4>:
    18cc:	97 fb       	bst	r25, 7
    18ce:	09 2e       	mov	r0, r25
    18d0:	07 26       	eor	r0, r23
    18d2:	0a d0       	rcall	.+20     	; 0x18e8 <__divmodhi4_neg1>
    18d4:	77 fd       	sbrc	r23, 7
    18d6:	04 d0       	rcall	.+8      	; 0x18e0 <__divmodhi4_neg2>
    18d8:	49 d0       	rcall	.+146    	; 0x196c <__udivmodhi4>
    18da:	06 d0       	rcall	.+12     	; 0x18e8 <__divmodhi4_neg1>
    18dc:	00 20       	and	r0, r0
    18de:	1a f4       	brpl	.+6      	; 0x18e6 <__divmodhi4_exit>

000018e0 <__divmodhi4_neg2>:
    18e0:	70 95       	com	r23
    18e2:	61 95       	neg	r22
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255

000018e6 <__divmodhi4_exit>:
    18e6:	08 95       	ret

000018e8 <__divmodhi4_neg1>:
    18e8:	f6 f7       	brtc	.-4      	; 0x18e6 <__divmodhi4_exit>
    18ea:	90 95       	com	r25
    18ec:	81 95       	neg	r24
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <__udivmodsi4>:
    18f2:	a1 e2       	ldi	r26, 0x21	; 33
    18f4:	1a 2e       	mov	r1, r26
    18f6:	aa 1b       	sub	r26, r26
    18f8:	bb 1b       	sub	r27, r27
    18fa:	fd 01       	movw	r30, r26
    18fc:	0d c0       	rjmp	.+26     	; 0x1918 <__udivmodsi4_ep>

000018fe <__udivmodsi4_loop>:
    18fe:	aa 1f       	adc	r26, r26
    1900:	bb 1f       	adc	r27, r27
    1902:	ee 1f       	adc	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	a2 17       	cp	r26, r18
    1908:	b3 07       	cpc	r27, r19
    190a:	e4 07       	cpc	r30, r20
    190c:	f5 07       	cpc	r31, r21
    190e:	20 f0       	brcs	.+8      	; 0x1918 <__udivmodsi4_ep>
    1910:	a2 1b       	sub	r26, r18
    1912:	b3 0b       	sbc	r27, r19
    1914:	e4 0b       	sbc	r30, r20
    1916:	f5 0b       	sbc	r31, r21

00001918 <__udivmodsi4_ep>:
    1918:	66 1f       	adc	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	1a 94       	dec	r1
    1922:	69 f7       	brne	.-38     	; 0x18fe <__udivmodsi4_loop>
    1924:	60 95       	com	r22
    1926:	70 95       	com	r23
    1928:	80 95       	com	r24
    192a:	90 95       	com	r25
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	bd 01       	movw	r22, r26
    1932:	cf 01       	movw	r24, r30
    1934:	08 95       	ret

00001936 <__divmodsi4>:
    1936:	97 fb       	bst	r25, 7
    1938:	09 2e       	mov	r0, r25
    193a:	05 26       	eor	r0, r21
    193c:	0e d0       	rcall	.+28     	; 0x195a <__divmodsi4_neg1>
    193e:	57 fd       	sbrc	r21, 7
    1940:	04 d0       	rcall	.+8      	; 0x194a <__divmodsi4_neg2>
    1942:	d7 df       	rcall	.-82     	; 0x18f2 <__udivmodsi4>
    1944:	0a d0       	rcall	.+20     	; 0x195a <__divmodsi4_neg1>
    1946:	00 1c       	adc	r0, r0
    1948:	38 f4       	brcc	.+14     	; 0x1958 <__divmodsi4_exit>

0000194a <__divmodsi4_neg2>:
    194a:	50 95       	com	r21
    194c:	40 95       	com	r20
    194e:	30 95       	com	r19
    1950:	21 95       	neg	r18
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	4f 4f       	sbci	r20, 0xFF	; 255
    1956:	5f 4f       	sbci	r21, 0xFF	; 255

00001958 <__divmodsi4_exit>:
    1958:	08 95       	ret

0000195a <__divmodsi4_neg1>:
    195a:	f6 f7       	brtc	.-4      	; 0x1958 <__divmodsi4_exit>
    195c:	90 95       	com	r25
    195e:	80 95       	com	r24
    1960:	70 95       	com	r23
    1962:	61 95       	neg	r22
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	8f 4f       	sbci	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	08 95       	ret

0000196c <__udivmodhi4>:
    196c:	aa 1b       	sub	r26, r26
    196e:	bb 1b       	sub	r27, r27
    1970:	51 e1       	ldi	r21, 0x11	; 17
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <__udivmodhi4_ep>

00001974 <__udivmodhi4_loop>:
    1974:	aa 1f       	adc	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	a6 17       	cp	r26, r22
    197a:	b7 07       	cpc	r27, r23
    197c:	10 f0       	brcs	.+4      	; 0x1982 <__udivmodhi4_ep>
    197e:	a6 1b       	sub	r26, r22
    1980:	b7 0b       	sbc	r27, r23

00001982 <__udivmodhi4_ep>:
    1982:	88 1f       	adc	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	5a 95       	dec	r21
    1988:	a9 f7       	brne	.-22     	; 0x1974 <__udivmodhi4_loop>
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	08 95       	ret

00001994 <__tablejump2__>:
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31

00001998 <__tablejump__>:
    1998:	05 90       	lpm	r0, Z+
    199a:	f4 91       	lpm	r31, Z+
    199c:	e0 2d       	mov	r30, r0
    199e:	09 94       	ijmp

000019a0 <_exit>:
    19a0:	f8 94       	cli

000019a2 <__stop_program>:
    19a2:	ff cf       	rjmp	.-2      	; 0x19a2 <__stop_program>
